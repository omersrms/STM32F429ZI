
TCP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afc0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021d4  0800b170  0800b170  0001b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d344  0800d344  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d34c  0800d34c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d34c  0800d34c  0001d34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000aa4c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000aad8  2000aad8  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c50e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067c9  00000000  00000000  0004c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  00052d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e78  00000000  00000000  00054290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030259  00000000  00000000  00056108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f7b8  00000000  00000000  00086361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecdfe  00000000  00000000  000b5b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a2917  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c4  00000000  00000000  001a2968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0001bccd  00000000  00000000  001a6f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b158 	.word	0x0800b158

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800b158 	.word	0x0800b158

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b500      	push	{lr}
 80005a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a8:	2230      	movs	r2, #48	; 0x30
 80005aa:	2100      	movs	r1, #0
 80005ac:	a808      	add	r0, sp, #32
 80005ae:	f009 fd67 	bl	800a080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	9303      	str	r3, [sp, #12]
 80005b6:	9304      	str	r3, [sp, #16]
 80005b8:	9305      	str	r3, [sp, #20]
 80005ba:	9306      	str	r3, [sp, #24]
 80005bc:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	4a20      	ldr	r2, [pc, #128]	; (8000644 <SystemClock_Config+0xa0>)
 80005c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80005c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005c8:	6411      	str	r1, [r2, #64]	; 0x40
 80005ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <SystemClock_Config+0xa4>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ea:	2301      	movs	r3, #1
 80005ec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005fc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005fe:	2204      	movs	r2, #4
 8000600:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000602:	22a8      	movs	r2, #168	; 0xa8
 8000604:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	a808      	add	r0, sp, #32
 800060e:	f001 fd3b 	bl	8002088 <HAL_RCC_OscConfig>
 8000612:	b998      	cbnz	r0, 800063c <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000624:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	2105      	movs	r1, #5
 800062e:	a803      	add	r0, sp, #12
 8000630:	f001 ff90 	bl	8002554 <HAL_RCC_ClockConfig>
 8000634:	b920      	cbnz	r0, 8000640 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8000636:	b015      	add	sp, #84	; 0x54
 8000638:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063e:	e7fe      	b.n	800063e <SystemClock_Config+0x9a>
 8000640:	b672      	cpsid	i
 8000642:	e7fe      	b.n	8000642 <SystemClock_Config+0x9e>
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <main>:
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000650:	f000 fc96 	bl	8000f80 <HAL_Init>
  SystemClock_Config();
 8000654:	f7ff ffa6 	bl	80005a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2400      	movs	r4, #0
 800065a:	9407      	str	r4, [sp, #28]
 800065c:	9408      	str	r4, [sp, #32]
 800065e:	9409      	str	r4, [sp, #36]	; 0x24
 8000660:	940a      	str	r4, [sp, #40]	; 0x28
 8000662:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	9401      	str	r4, [sp, #4]
 8000666:	4b51      	ldr	r3, [pc, #324]	; (80007ac <main+0x160>)
 8000668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066a:	f042 0204 	orr.w	r2, r2, #4
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
 8000670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000672:	f002 0204 	and.w	r2, r2, #4
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	9402      	str	r4, [sp, #8]
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000682:	631a      	str	r2, [r3, #48]	; 0x30
 8000684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000686:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800068a:	9202      	str	r2, [sp, #8]
 800068c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	9403      	str	r4, [sp, #12]
 8000690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000692:	f042 0201 	orr.w	r2, r2, #1
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	f002 0201 	and.w	r2, r2, #1
 800069e:	9203      	str	r2, [sp, #12]
 80006a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	9404      	str	r4, [sp, #16]
 80006a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a6:	f042 0202 	orr.w	r2, r2, #2
 80006aa:	631a      	str	r2, [r3, #48]	; 0x30
 80006ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ae:	f002 0202 	and.w	r2, r2, #2
 80006b2:	9204      	str	r2, [sp, #16]
 80006b4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b6:	9405      	str	r4, [sp, #20]
 80006b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ba:	f042 0208 	orr.w	r2, r2, #8
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
 80006c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c2:	f002 0208 	and.w	r2, r2, #8
 80006c6:	9205      	str	r2, [sp, #20]
 80006c8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ca:	9406      	str	r4, [sp, #24]
 80006cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	9306      	str	r3, [sp, #24]
 80006dc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006de:	4f34      	ldr	r7, [pc, #208]	; (80007b0 <main+0x164>)
 80006e0:	4622      	mov	r2, r4
 80006e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80006e6:	4638      	mov	r0, r7
 80006e8:	f001 fc30 	bl	8001f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ec:	4d31      	ldr	r5, [pc, #196]	; (80007b4 <main+0x168>)
 80006ee:	4622      	mov	r2, r4
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4628      	mov	r0, r5
 80006f4:	f001 fc2a 	bl	8001f4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000702:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000706:	a907      	add	r1, sp, #28
 8000708:	482b      	ldr	r0, [pc, #172]	; (80007b8 <main+0x16c>)
 800070a:	f001 fb0b 	bl	8001d24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800070e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000712:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2601      	movs	r6, #1
 8000716:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	a907      	add	r1, sp, #28
 800071e:	4638      	mov	r0, r7
 8000720:	f001 fb00 	bl	8001d24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072e:	a907      	add	r1, sp, #28
 8000730:	4628      	mov	r0, r5
 8000732:	f001 faf7 	bl	8001d24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000736:	2380      	movs	r3, #128	; 0x80
 8000738:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073e:	a907      	add	r1, sp, #28
 8000740:	4628      	mov	r0, r5
 8000742:	f001 faef 	bl	8001d24 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0x170>)
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <main+0x174>)
 800074a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800074c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000750:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	230c      	movs	r3, #12
 800075a:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000760:	f002 f852 	bl	8002808 <HAL_UART_Init>
 8000764:	b9f0      	cbnz	r0, 80007a4 <main+0x158>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <main+0x178>)
 8000768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800076c:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800076e:	2304      	movs	r3, #4
 8000770:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000772:	2202      	movs	r2, #2
 8000774:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077a:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800077c:	2201      	movs	r2, #1
 800077e:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000780:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000782:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000784:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000786:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000788:	f001 fbe6 	bl	8001f58 <HAL_PCD_Init>
 800078c:	b960      	cbnz	r0, 80007a8 <main+0x15c>
  MX_LWIP_Init();
 800078e:	f002 fa41 	bl	8002c14 <MX_LWIP_Init>
  tcp_server_init();
 8000792:	f000 fa9d 	bl	8000cd0 <tcp_server_init>
	  ethernetif_input(&gnetif);
 8000796:	4c0c      	ldr	r4, [pc, #48]	; (80007c8 <main+0x17c>)
 8000798:	4620      	mov	r0, r4
 800079a:	f002 fb2d 	bl	8002df8 <ethernetif_input>
	  sys_check_timeouts();
 800079e:	f007 fe99 	bl	80084d4 <sys_check_timeouts>
  while (1)
 80007a2:	e7f9      	b.n	8000798 <main+0x14c>
 80007a4:	b672      	cpsid	i
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0x15a>
 80007a8:	b672      	cpsid	i
 80007aa:	e7fe      	b.n	80007aa <main+0x15e>
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40020800 	.word	0x40020800
 80007bc:	200005b4 	.word	0x200005b4
 80007c0:	40004800 	.word	0x40004800
 80007c4:	200000a8 	.word	0x200000a8
 80007c8:	2000060c 	.word	0x2000060c

080007cc <Error_Handler>:
 80007cc:	b672      	cpsid	i
 80007ce:	e7fe      	b.n	80007ce <Error_Handler+0x2>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2100      	movs	r1, #0
 80007d4:	9100      	str	r1, [sp, #0]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_MspInit+0x34>)
 80007d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007de:	645a      	str	r2, [r3, #68]	; 0x44
 80007e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007e6:	9200      	str	r2, [sp, #0]
 80007e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	9101      	str	r1, [sp, #4]
 80007ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007f2:	641a      	str	r2, [r3, #64]	; 0x40
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b500      	push	{lr}
 800080a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2300      	movs	r3, #0
 800080e:	9303      	str	r3, [sp, #12]
 8000810:	9304      	str	r3, [sp, #16]
 8000812:	9305      	str	r3, [sp, #20]
 8000814:	9306      	str	r3, [sp, #24]
 8000816:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000818:	6802      	ldr	r2, [r0, #0]
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_UART_MspInit+0x68>)
 800081c:	429a      	cmp	r2, r3
 800081e:	d002      	beq.n	8000826 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000820:	b009      	add	sp, #36	; 0x24
 8000822:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8000826:	2100      	movs	r1, #0
 8000828:	9101      	str	r1, [sp, #4]
 800082a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800082e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000830:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000834:	641a      	str	r2, [r3, #64]	; 0x40
 8000836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000838:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800083c:	9201      	str	r2, [sp, #4]
 800083e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	9102      	str	r1, [sp, #8]
 8000842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000844:	f042 0208 	orr.w	r2, r2, #8
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000854:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000862:	2307      	movs	r3, #7
 8000864:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000866:	a903      	add	r1, sp, #12
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <HAL_UART_MspInit+0x6c>)
 800086a:	f001 fa5b 	bl	8001d24 <HAL_GPIO_Init>
}
 800086e:	e7d7      	b.n	8000820 <HAL_UART_MspInit+0x18>
 8000870:	40004800 	.word	0x40004800
 8000874:	40020c00 	.word	0x40020c00

08000878 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2300      	movs	r3, #0
 800087e:	9303      	str	r3, [sp, #12]
 8000880:	9304      	str	r3, [sp, #16]
 8000882:	9305      	str	r3, [sp, #20]
 8000884:	9306      	str	r3, [sp, #24]
 8000886:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8000888:	6803      	ldr	r3, [r0, #0]
 800088a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800088e:	d001      	beq.n	8000894 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000890:	b008      	add	sp, #32
 8000892:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	2500      	movs	r5, #0
 8000896:	9501      	str	r5, [sp, #4]
 8000898:	4c17      	ldr	r4, [pc, #92]	; (80008f8 <HAL_PCD_MspInit+0x80>)
 800089a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6323      	str	r3, [r4, #48]	; 0x30
 80008a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	4e0f      	ldr	r6, [pc, #60]	; (80008fc <HAL_PCD_MspInit+0x84>)
 80008c0:	a903      	add	r1, sp, #12
 80008c2:	4630      	mov	r0, r6
 80008c4:	f001 fa2e 	bl	8001d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	a903      	add	r1, sp, #12
 80008d4:	4630      	mov	r0, r6
 80008d6:	f001 fa25 	bl	8001d24 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6363      	str	r3, [r4, #52]	; 0x34
 80008e2:	9502      	str	r5, [sp, #8]
 80008e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6463      	str	r3, [r4, #68]	; 0x44
 80008ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	9b02      	ldr	r3, [sp, #8]
}
 80008f6:	e7cb      	b.n	8000890 <HAL_PCD_MspInit+0x18>
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler>

08000902 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler>

08000904 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler>

08000906 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler>

08000908 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler>

0800090a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 fb4f 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bd08      	pop	{r3, pc}

08000918 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800091a:	4802      	ldr	r0, [pc, #8]	; (8000924 <ETH_IRQHandler+0xc>)
 800091c:	f001 f870 	bl	8001a00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000920:	bd08      	pop	{r3, pc}
 8000922:	bf00      	nop
 8000924:	200007e8 	.word	0x200007e8

08000928 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000928:	2001      	movs	r0, #1
 800092a:	4770      	bx	lr

0800092c <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <_kill+0xc>)
 800092e:	2216      	movs	r2, #22
 8000930:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000932:	f04f 30ff 	mov.w	r0, #4294967295
 8000936:	4770      	bx	lr
 8000938:	2000aac8 	.word	0x2000aac8

0800093c <_exit>:
	errno = EINVAL;
 800093c:	4b01      	ldr	r3, [pc, #4]	; (8000944 <_exit+0x8>)
 800093e:	2216      	movs	r2, #22
 8000940:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000942:	e7fe      	b.n	8000942 <_exit+0x6>
 8000944:	2000aac8 	.word	0x2000aac8

08000948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	1e16      	subs	r6, r2, #0
 800094c:	dd07      	ble.n	800095e <_read+0x16>
 800094e:	460c      	mov	r4, r1
 8000950:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000952:	f3af 8000 	nop.w
 8000956:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	42a5      	cmp	r5, r4
 800095c:	d1f9      	bne.n	8000952 <_read+0xa>
	}

return len;
}
 800095e:	4630      	mov	r0, r6
 8000960:	bd70      	pop	{r4, r5, r6, pc}

08000962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000962:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	1e16      	subs	r6, r2, #0
 8000966:	dd07      	ble.n	8000978 <_write+0x16>
 8000968:	460c      	mov	r4, r1
 800096a:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800096c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000970:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	42a5      	cmp	r5, r4
 8000976:	d1f9      	bne.n	800096c <_write+0xa>
	}
	return len;
}
 8000978:	4630      	mov	r0, r6
 800097a:	bd70      	pop	{r4, r5, r6, pc}

0800097c <_close>:

int _close(int file)
{
	return -1;
}
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	4770      	bx	lr

08000982 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000988:	2000      	movs	r0, #0
 800098a:	4770      	bx	lr

0800098c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800098c:	2001      	movs	r0, #1
 800098e:	4770      	bx	lr

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000990:	2000      	movs	r0, #0
 8000992:	4770      	bx	lr

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000996:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <_sbrk+0x34>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	b152      	cbz	r2, 80009b2 <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <_sbrk+0x34>)
 800099e:	6810      	ldr	r0, [r2, #0]
 80009a0:	4403      	add	r3, r0
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <_sbrk+0x38>)
 80009a4:	490a      	ldr	r1, [pc, #40]	; (80009d0 <_sbrk+0x3c>)
 80009a6:	1a52      	subs	r2, r2, r1
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d806      	bhi.n	80009ba <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <_sbrk+0x34>)
 80009ae:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80009b0:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x34>)
 80009b4:	4907      	ldr	r1, [pc, #28]	; (80009d4 <_sbrk+0x40>)
 80009b6:	6011      	str	r1, [r2, #0]
 80009b8:	e7f0      	b.n	800099c <_sbrk+0x8>
    errno = ENOMEM;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x44>)
 80009bc:	220c      	movs	r2, #12
 80009be:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200005f8 	.word	0x200005f8
 80009cc:	20030000 	.word	0x20030000
 80009d0:	00000400 	.word	0x00000400
 80009d4:	2000aad8 	.word	0x2000aad8
 80009d8:	2000aac8 	.word	0x2000aac8

080009dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <SystemInit+0x10>)
 80009de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80009e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80009f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009f4:	4605      	mov	r5, r0
 80009f6:	460e      	mov	r6, r1

    /* get pointer on pbuf from es structure */
    ptr = es->p;

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80009f8:	2701      	movs	r7, #1
 80009fa:	e00f      	b.n	8000a1c <tcp_server_send+0x2c>
    if (wr_err == ERR_OK)
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80009fc:	f8b4 800a 	ldrh.w	r8, [r4, #10]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	60b0      	str	r0, [r6, #8]

      if(es->p != NULL)
 8000a04:	b108      	cbz	r0, 8000a0a <tcp_server_send+0x1a>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000a06:	f003 fb17 	bl	8004038 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f003 f9ae 	bl	8003d6c <pbuf_free>
      }
      while(freed == 0);
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0fa      	beq.n	8000a0a <tcp_server_send+0x1a>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000a14:	4641      	mov	r1, r8
 8000a16:	4628      	mov	r0, r5
 8000a18:	f003 fe12 	bl	8004640 <tcp_recved>
         (es->p != NULL) &&
 8000a1c:	68b4      	ldr	r4, [r6, #8]
  while ((wr_err == ERR_OK) &&
 8000a1e:	b174      	cbz	r4, 8000a3e <tcp_server_send+0x4e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000a20:	8962      	ldrh	r2, [r4, #10]
         (es->p != NULL) &&
 8000a22:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d309      	bcc.n	8000a3e <tcp_server_send+0x4e>
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	6861      	ldr	r1, [r4, #4]
 8000a2e:	4628      	mov	r0, r5
 8000a30:	f006 fbba 	bl	80071a8 <tcp_write>
    if (wr_err == ERR_OK)
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d0e1      	beq.n	80009fc <tcp_server_send+0xc>
   }
   else if(wr_err == ERR_MEM)
 8000a38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000a3c:	d001      	beq.n	8000a42 <tcp_server_send+0x52>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     es->p = ptr;
 8000a42:	60b4      	str	r4, [r6, #8]
 8000a44:	e7fb      	b.n	8000a3e <tcp_server_send+0x4e>

08000a46 <tcp_server_error>:
  if (es != NULL)
 8000a46:	b118      	cbz	r0, 8000a50 <tcp_server_error+0xa>
{
 8000a48:	b508      	push	{r3, lr}
    mem_free(es);
 8000a4a:	f002 fc03 	bl	8003254 <mem_free>
}
 8000a4e:	bd08      	pop	{r3, pc}
 8000a50:	4770      	bx	lr
	...

08000a54 <tcp_server_handle>:
}

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a56:	b09b      	sub	sp, #108	; 0x6c
 8000a58:	4607      	mov	r7, r0
 8000a5a:	460e      	mov	r6, r1
	struct tcp_server_struct *esTx = 0;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000a5c:	6843      	ldr	r3, [r0, #4]
 8000a5e:	9319      	str	r3, [sp, #100]	; 0x64
	uint16_t inPort = tpcb->remote_port;

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000a60:	a819      	add	r0, sp, #100	; 0x64
 8000a62:	f008 fdd9 	bl	8009618 <ip4addr_ntoa>

	esTx->state = es->state;
 8000a66:	7833      	ldrb	r3, [r6, #0]
 8000a68:	2500      	movs	r5, #0
 8000a6a:	702b      	strb	r3, [r5, #0]
	esTx->pcb = es->pcb;
 8000a6c:	6873      	ldr	r3, [r6, #4]
 8000a6e:	606b      	str	r3, [r5, #4]
	esTx->p = es->p;
 8000a70:	68b4      	ldr	r4, [r6, #8]
 8000a72:	60ac      	str	r4, [r5, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8000a74:	2264      	movs	r2, #100	; 0x64
 8000a76:	4629      	mov	r1, r5
 8000a78:	4668      	mov	r0, sp
 8000a7a:	f009 fb01 	bl	800a080 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8000a7e:	8922      	ldrh	r2, [r4, #8]
 8000a80:	6861      	ldr	r1, [r4, #4]
 8000a82:	4668      	mov	r0, sp
 8000a84:	f009 fb5a 	bl	800a13c <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 8000a88:	4668      	mov	r0, sp
 8000a8a:	f7ff fbb1 	bl	80001f0 <strlen>
 8000a8e:	4686      	mov	lr, r0
 8000a90:	eb0d 0c00 	add.w	ip, sp, r0
 8000a94:	4c16      	ldr	r4, [pc, #88]	; (8000af0 <tcp_server_handle+0x9c>)
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	f84d 000e 	str.w	r0, [sp, lr]
 8000a9c:	f8cc 1004 	str.w	r1, [ip, #4]
 8000aa0:	f8cc 2008 	str.w	r2, [ip, #8]
 8000aa4:	f8cc 300c 	str.w	r3, [ip, #12]
 8000aa8:	cc03      	ldmia	r4!, {r0, r1}
 8000aaa:	f8cc 0010 	str.w	r0, [ip, #16]
 8000aae:	f8cc 1014 	str.w	r1, [ip, #20]
 8000ab2:	7823      	ldrb	r3, [r4, #0]
 8000ab4:	f88c 3018 	strb.w	r3, [ip, #24]


	esTx->p->payload = (void *)buf;
 8000ab8:	68ab      	ldr	r3, [r5, #8]
 8000aba:	f8c3 d004 	str.w	sp, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8000abe:	68b4      	ldr	r4, [r6, #8]
 8000ac0:	4668      	mov	r0, sp
 8000ac2:	f7ff fb95 	bl	80001f0 <strlen>
 8000ac6:	68aa      	ldr	r2, [r5, #8]
 8000ac8:	8923      	ldrh	r3, [r4, #8]
 8000aca:	8961      	ldrh	r1, [r4, #10]
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	4403      	add	r3, r0
 8000ad0:	8113      	strh	r3, [r2, #8]
	esTx->p->len = strlen (buf);
 8000ad2:	4668      	mov	r0, sp
 8000ad4:	f7ff fb8c 	bl	80001f0 <strlen>
 8000ad8:	68ab      	ldr	r3, [r5, #8]
 8000ada:	8158      	strh	r0, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8000adc:	4629      	mov	r1, r5
 8000ade:	4638      	mov	r0, r7
 8000ae0:	f7ff ff86 	bl	80009f0 <tcp_server_send>

	pbuf_free(es->p);
 8000ae4:	68b0      	ldr	r0, [r6, #8]
 8000ae6:	f003 f941 	bl	8003d6c <pbuf_free>

}
 8000aea:	b01b      	add	sp, #108	; 0x6c
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800b188 	.word	0x0800b188

08000af4 <tcp_server_connection_close>:
{
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4604      	mov	r4, r0
 8000af8:	460d      	mov	r5, r1
  tcp_arg(tpcb, NULL);
 8000afa:	2100      	movs	r1, #0
 8000afc:	f003 fe2a 	bl	8004754 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000b00:	2100      	movs	r1, #0
 8000b02:	4620      	mov	r0, r4
 8000b04:	f003 fe44 	bl	8004790 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f003 fe26 	bl	800475c <tcp_recv>
  tcp_err(tpcb, NULL);
 8000b10:	2100      	movs	r1, #0
 8000b12:	4620      	mov	r0, r4
 8000b14:	f003 fe56 	bl	80047c4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f003 fe71 	bl	8004804 <tcp_poll>
  if (es != NULL)
 8000b22:	b115      	cbz	r5, 8000b2a <tcp_server_connection_close+0x36>
    mem_free(es);
 8000b24:	4628      	mov	r0, r5
 8000b26:	f002 fb95 	bl	8003254 <mem_free>
  tcp_close(tpcb);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f004 fa00 	bl	8004f30 <tcp_close>
}
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
	...

08000b34 <tcp_server_accept>:
{
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	460c      	mov	r4, r1
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f003 fdd4 	bl	80046e8 <tcp_setprio>
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000b40:	200c      	movs	r0, #12
 8000b42:	f002 fd03 	bl	800354c <mem_malloc>
  if (es != NULL)
 8000b46:	b1c0      	cbz	r0, 8000b7a <tcp_server_accept+0x46>
 8000b48:	4601      	mov	r1, r0
    es->state = ES_ACCEPTED;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	7003      	strb	r3, [r0, #0]
    es->pcb = newpcb;
 8000b4e:	6044      	str	r4, [r0, #4]
    es->retries = 0;
 8000b50:	2500      	movs	r5, #0
 8000b52:	7045      	strb	r5, [r0, #1]
    es->p = NULL;
 8000b54:	6085      	str	r5, [r0, #8]
    tcp_arg(newpcb, es);
 8000b56:	4620      	mov	r0, r4
 8000b58:	f003 fdfc 	bl	8004754 <tcp_arg>
    tcp_recv(newpcb, tcp_server_recv);
 8000b5c:	490a      	ldr	r1, [pc, #40]	; (8000b88 <tcp_server_accept+0x54>)
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f003 fdfc 	bl	800475c <tcp_recv>
    tcp_err(newpcb, tcp_server_error);
 8000b64:	4909      	ldr	r1, [pc, #36]	; (8000b8c <tcp_server_accept+0x58>)
 8000b66:	4620      	mov	r0, r4
 8000b68:	f003 fe2c 	bl	80047c4 <tcp_err>
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000b6c:	462a      	mov	r2, r5
 8000b6e:	4908      	ldr	r1, [pc, #32]	; (8000b90 <tcp_server_accept+0x5c>)
 8000b70:	4620      	mov	r0, r4
 8000b72:	f003 fe47 	bl	8004804 <tcp_poll>
    ret_err = ERR_OK;
 8000b76:	4628      	mov	r0, r5
}
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
    tcp_server_connection_close(newpcb, es);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff ffb9 	bl	8000af4 <tcp_server_connection_close>
    ret_err = ERR_MEM;
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	e7f7      	b.n	8000b78 <tcp_server_accept+0x44>
 8000b88:	08000c15 	.word	0x08000c15
 8000b8c:	08000a47 	.word	0x08000a47
 8000b90:	08000b95 	.word	0x08000b95

08000b94 <tcp_server_poll>:
{
 8000b94:	b538      	push	{r3, r4, r5, lr}
 8000b96:	460c      	mov	r4, r1
  if (es != NULL)
 8000b98:	b1b8      	cbz	r0, 8000bca <tcp_server_poll+0x36>
 8000b9a:	4605      	mov	r5, r0
    if (es->p != NULL)
 8000b9c:	6883      	ldr	r3, [r0, #8]
 8000b9e:	b14b      	cbz	r3, 8000bb4 <tcp_server_poll+0x20>
      tcp_sent(tpcb, tcp_server_sent);
 8000ba0:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <tcp_server_poll+0x44>)
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f003 fdf4 	bl	8004790 <tcp_sent>
      tcp_server_send(tpcb, es);
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff ff20 	bl	80009f0 <tcp_server_send>
    ret_err = ERR_OK;
 8000bb0:	2000      	movs	r0, #0
}
 8000bb2:	bd38      	pop	{r3, r4, r5, pc}
      if(es->state == ES_CLOSING)
 8000bb4:	7803      	ldrb	r3, [r0, #0]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d001      	beq.n	8000bbe <tcp_server_poll+0x2a>
    ret_err = ERR_OK;
 8000bba:	2000      	movs	r0, #0
 8000bbc:	e7f9      	b.n	8000bb2 <tcp_server_poll+0x1e>
        tcp_server_connection_close(tpcb, es);
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff ff97 	bl	8000af4 <tcp_server_connection_close>
    ret_err = ERR_OK;
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	e7f3      	b.n	8000bb2 <tcp_server_poll+0x1e>
    tcp_abort(tpcb);
 8000bca:	4608      	mov	r0, r1
 8000bcc:	f003 ffa2 	bl	8004b14 <tcp_abort>
    ret_err = ERR_ABRT;
 8000bd0:	f06f 000c 	mvn.w	r0, #12
 8000bd4:	e7ed      	b.n	8000bb2 <tcp_server_poll+0x1e>
 8000bd6:	bf00      	nop
 8000bd8:	08000bdd 	.word	0x08000bdd

08000bdc <tcp_server_sent>:
{
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	460d      	mov	r5, r1
  es->retries = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	7043      	strb	r3, [r0, #1]
  if(es->p != NULL)
 8000be6:	6883      	ldr	r3, [r0, #8]
 8000be8:	b14b      	cbz	r3, 8000bfe <tcp_server_sent+0x22>
    tcp_sent(tpcb, tcp_server_sent);
 8000bea:	4909      	ldr	r1, [pc, #36]	; (8000c10 <tcp_server_sent+0x34>)
 8000bec:	4628      	mov	r0, r5
 8000bee:	f003 fdcf 	bl	8004790 <tcp_sent>
    tcp_server_send(tpcb, es);
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	f7ff fefb 	bl	80009f0 <tcp_server_send>
}
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
    if(es->state == ES_CLOSING)
 8000bfe:	7803      	ldrb	r3, [r0, #0]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d1fa      	bne.n	8000bfa <tcp_server_sent+0x1e>
      tcp_server_connection_close(tpcb, es);
 8000c04:	4601      	mov	r1, r0
 8000c06:	4628      	mov	r0, r5
 8000c08:	f7ff ff74 	bl	8000af4 <tcp_server_connection_close>
 8000c0c:	e7f5      	b.n	8000bfa <tcp_server_sent+0x1e>
 8000c0e:	bf00      	nop
 8000c10:	08000bdd 	.word	0x08000bdd

08000c14 <tcp_server_recv>:
{
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	460f      	mov	r7, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	461c      	mov	r4, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	b188      	cbz	r0, 8000c44 <tcp_server_recv+0x30>
  if (p == NULL)
 8000c20:	b1bd      	cbz	r5, 8000c52 <tcp_server_recv+0x3e>
  else if(err != ERR_OK)
 8000c22:	bb54      	cbnz	r4, 8000c7a <tcp_server_recv+0x66>
  else if(es->state == ES_ACCEPTED)
 8000c24:	7833      	ldrb	r3, [r6, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d02e      	beq.n	8000c88 <tcp_server_recv+0x74>
  else if (es->state == ES_RECEIVED)
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d039      	beq.n	8000ca2 <tcp_server_recv+0x8e>
    tcp_recved(tpcb, p->tot_len);
 8000c2e:	8929      	ldrh	r1, [r5, #8]
 8000c30:	4638      	mov	r0, r7
 8000c32:	f003 fd05 	bl	8004640 <tcp_recved>
    es->p = NULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60b3      	str	r3, [r6, #8]
    pbuf_free(p);
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f003 f896 	bl	8003d6c <pbuf_free>
    ret_err = ERR_OK;
 8000c40:	4620      	mov	r0, r4
}
 8000c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <tcp_server_recv+0xac>)
 8000c46:	22c3      	movs	r2, #195	; 0xc3
 8000c48:	491e      	ldr	r1, [pc, #120]	; (8000cc4 <tcp_server_recv+0xb0>)
 8000c4a:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <tcp_server_recv+0xb4>)
 8000c4c:	f009 fa20 	bl	800a090 <iprintf>
 8000c50:	e7e6      	b.n	8000c20 <tcp_server_recv+0xc>
    es->state = ES_CLOSING;
 8000c52:	2303      	movs	r3, #3
 8000c54:	7033      	strb	r3, [r6, #0]
    if(es->p == NULL)
 8000c56:	68b3      	ldr	r3, [r6, #8]
 8000c58:	b14b      	cbz	r3, 8000c6e <tcp_server_recv+0x5a>
      tcp_sent(tpcb, tcp_server_sent);
 8000c5a:	491c      	ldr	r1, [pc, #112]	; (8000ccc <tcp_server_recv+0xb8>)
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	f003 fd97 	bl	8004790 <tcp_sent>
      tcp_server_send(tpcb, es);
 8000c62:	4631      	mov	r1, r6
 8000c64:	4638      	mov	r0, r7
 8000c66:	f7ff fec3 	bl	80009f0 <tcp_server_send>
    ret_err = ERR_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e7e9      	b.n	8000c42 <tcp_server_recv+0x2e>
       tcp_server_connection_close(tpcb, es);
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4638      	mov	r0, r7
 8000c72:	f7ff ff3f 	bl	8000af4 <tcp_server_connection_close>
    ret_err = ERR_OK;
 8000c76:	2000      	movs	r0, #0
 8000c78:	e7e3      	b.n	8000c42 <tcp_server_recv+0x2e>
      es->p = NULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60b3      	str	r3, [r6, #8]
      pbuf_free(p);
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f003 f874 	bl	8003d6c <pbuf_free>
    ret_err = err;
 8000c84:	4620      	mov	r0, r4
 8000c86:	e7dc      	b.n	8000c42 <tcp_server_recv+0x2e>
    es->state = ES_RECEIVED;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	7033      	strb	r3, [r6, #0]
    es->p = p;
 8000c8c:	60b5      	str	r5, [r6, #8]
    tcp_sent(tpcb, tcp_server_sent);
 8000c8e:	490f      	ldr	r1, [pc, #60]	; (8000ccc <tcp_server_recv+0xb8>)
 8000c90:	4638      	mov	r0, r7
 8000c92:	f003 fd7d 	bl	8004790 <tcp_sent>
    tcp_server_handle(tpcb, es);
 8000c96:	4631      	mov	r1, r6
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff fedb 	bl	8000a54 <tcp_server_handle>
    ret_err = ERR_OK;
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	e7cf      	b.n	8000c42 <tcp_server_recv+0x2e>
    if(es->p == NULL)
 8000ca2:	68b0      	ldr	r0, [r6, #8]
 8000ca4:	b120      	cbz	r0, 8000cb0 <tcp_server_recv+0x9c>
      pbuf_chain(ptr,p);
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f003 fa1c 	bl	80040e4 <pbuf_chain>
    ret_err = ERR_OK;
 8000cac:	4620      	mov	r0, r4
 8000cae:	e7c8      	b.n	8000c42 <tcp_server_recv+0x2e>
      es->p = p;
 8000cb0:	60b5      	str	r5, [r6, #8]
      tcp_server_handle(tpcb, es);
 8000cb2:	4631      	mov	r1, r6
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f7ff fecd 	bl	8000a54 <tcp_server_handle>
    ret_err = ERR_OK;
 8000cba:	4620      	mov	r0, r4
 8000cbc:	e7c1      	b.n	8000c42 <tcp_server_recv+0x2e>
 8000cbe:	bf00      	nop
 8000cc0:	0800b1a4 	.word	0x0800b1a4
 8000cc4:	0800b1c0 	.word	0x0800b1c0
 8000cc8:	0800b1cc 	.word	0x0800b1cc
 8000ccc:	08000bdd 	.word	0x08000bdd

08000cd0 <tcp_server_init>:
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	b082      	sub	sp, #8
	tpcb = tcp_new();
 8000cd4:	f004 f862 	bl	8004d9c <tcp_new>
 8000cd8:	4604      	mov	r4, r0
	IP_ADDR4(&myIPADDR, 169, 254, 101, 115);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <tcp_server_init+0x34>)
 8000cdc:	9301      	str	r3, [sp, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8000cde:	2207      	movs	r2, #7
 8000ce0:	a901      	add	r1, sp, #4
 8000ce2:	f003 fb9f 	bl	8004424 <tcp_bind>
	if (err == ERR_OK)
 8000ce6:	b940      	cbnz	r0, 8000cfa <tcp_server_init+0x2a>
		tpcb = tcp_listen(tpcb);
 8000ce8:	21ff      	movs	r1, #255	; 0xff
 8000cea:	4620      	mov	r0, r4
 8000cec:	f003 fc68 	bl	80045c0 <tcp_listen_with_backlog>
		tcp_accept(tpcb, tcp_server_accept);
 8000cf0:	4905      	ldr	r1, [pc, #20]	; (8000d08 <tcp_server_init+0x38>)
 8000cf2:	f003 fd81 	bl	80047f8 <tcp_accept>
}
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd10      	pop	{r4, pc}
		memp_free(MEMP_TCP_PCB, tpcb);
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f002 fd77 	bl	80037f0 <memp_free>
}
 8000d02:	e7f8      	b.n	8000cf6 <tcp_server_init+0x26>
 8000d04:	7365fea9 	.word	0x7365fea9
 8000d08:	08000b35 	.word	0x08000b35

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d36:	f7ff fe51 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f009 f95f 	bl	8009ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc85 	bl	800064c <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000d50:	0800d354 	.word	0x0800d354
  ldr r2, =_sbss
 8000d54:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000d58:	2000aad8 	.word	0x2000aad8

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>

08000d5e <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d5e:	b188      	cbz	r0, 8000d84 <LAN8742_RegisterBusIO+0x26>
 8000d60:	68ca      	ldr	r2, [r1, #12]
 8000d62:	b192      	cbz	r2, 8000d8a <LAN8742_RegisterBusIO+0x2c>
 8000d64:	688a      	ldr	r2, [r1, #8]
 8000d66:	b19a      	cbz	r2, 8000d90 <LAN8742_RegisterBusIO+0x32>
 8000d68:	690a      	ldr	r2, [r1, #16]
 8000d6a:	b1a2      	cbz	r2, 8000d96 <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d6c:	680a      	ldr	r2, [r1, #0]
 8000d6e:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d70:	684a      	ldr	r2, [r1, #4]
 8000d72:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d74:	68ca      	ldr	r2, [r1, #12]
 8000d76:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d78:	688a      	ldr	r2, [r1, #8]
 8000d7a:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d7c:	690a      	ldr	r2, [r1, #16]
 8000d7e:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000d80:	2000      	movs	r0, #0
 8000d82:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8e:	4770      	bx	lr
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	4770      	bx	lr
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d9a:	4770      	bx	lr

08000d9c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000da8:	6844      	ldr	r4, [r0, #4]
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d149      	bne.n	8000e42 <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000dae:	6883      	ldr	r3, [r0, #8]
 8000db0:	b103      	cbz	r3, 8000db4 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000db2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000db4:	2320      	movs	r3, #32
 8000db6:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000db8:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dba:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000dbc:	f06f 0804 	mvn.w	r8, #4
 8000dc0:	e003      	b.n	8000dca <LAN8742_Init+0x2e>
 8000dc2:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dc4:	3401      	adds	r4, #1
 8000dc6:	2c20      	cmp	r4, #32
 8000dc8:	d033      	beq.n	8000e32 <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dca:	696b      	ldr	r3, [r5, #20]
 8000dcc:	aa01      	add	r2, sp, #4
 8000dce:	4631      	mov	r1, r6
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	4798      	blx	r3
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	dbf4      	blt.n	8000dc2 <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000dd8:	9b01      	ldr	r3, [sp, #4]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d1f0      	bne.n	8000dc4 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000de2:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000de4:	692b      	ldr	r3, [r5, #16]
 8000de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dea:	2100      	movs	r1, #0
 8000dec:	4620      	mov	r0, r4
 8000dee:	4798      	blx	r3
 8000df0:	2800      	cmp	r0, #0
 8000df2:	db36      	blt.n	8000e62 <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000df4:	696b      	ldr	r3, [r5, #20]
 8000df6:	aa01      	add	r2, sp, #4
 8000df8:	2100      	movs	r1, #0
 8000dfa:	6828      	ldr	r0, [r5, #0]
 8000dfc:	4798      	blx	r3
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	db32      	blt.n	8000e68 <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000e02:	69ab      	ldr	r3, [r5, #24]
 8000e04:	4798      	blx	r3
 8000e06:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e08:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e0a:	9b01      	ldr	r3, [sp, #4]
 8000e0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000e10:	d017      	beq.n	8000e42 <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e12:	69ab      	ldr	r3, [r5, #24]
 8000e14:	4798      	blx	r3
 8000e16:	1b00      	subs	r0, r0, r4
 8000e18:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000e1c:	d827      	bhi.n	8000e6e <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e1e:	696b      	ldr	r3, [r5, #20]
 8000e20:	aa01      	add	r2, sp, #4
 8000e22:	4631      	mov	r1, r6
 8000e24:	6828      	ldr	r0, [r5, #0]
 8000e26:	4798      	blx	r3
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	daee      	bge.n	8000e0a <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e2c:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e30:	e013      	b.n	8000e5a <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e32:	682c      	ldr	r4, [r5, #0]
 8000e34:	2c1f      	cmp	r4, #31
 8000e36:	d902      	bls.n	8000e3e <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e38:	f06f 0702 	mvn.w	r7, #2
 8000e3c:	e00d      	b.n	8000e5a <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000e3e:	b967      	cbnz	r7, 8000e5a <LAN8742_Init+0xbe>
 8000e40:	e7d0      	b.n	8000de4 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000e42:	69ab      	ldr	r3, [r5, #24]
 8000e44:	4798      	blx	r3
 8000e46:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e48:	69ab      	ldr	r3, [r5, #24]
 8000e4a:	4798      	blx	r3
 8000e4c:	1b03      	subs	r3, r0, r4
 8000e4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e52:	d9f9      	bls.n	8000e48 <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	606b      	str	r3, [r5, #4]
 8000e58:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e62:	f06f 0703 	mvn.w	r7, #3
 8000e66:	e7f8      	b.n	8000e5a <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000e68:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000e6c:	e7f5      	b.n	8000e5a <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e6e:	f06f 0701 	mvn.w	r7, #1
 8000e72:	e7f2      	b.n	8000e5a <LAN8742_Init+0xbe>

08000e74 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e74:	b510      	push	{r4, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e7e:	6943      	ldr	r3, [r0, #20]
 8000e80:	aa01      	add	r2, sp, #4
 8000e82:	2101      	movs	r1, #1
 8000e84:	6800      	ldr	r0, [r0, #0]
 8000e86:	4798      	blx	r3
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	db39      	blt.n	8000f00 <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e8c:	6963      	ldr	r3, [r4, #20]
 8000e8e:	aa01      	add	r2, sp, #4
 8000e90:	2101      	movs	r1, #1
 8000e92:	6820      	ldr	r0, [r4, #0]
 8000e94:	4798      	blx	r3
 8000e96:	2800      	cmp	r0, #0
 8000e98:	db35      	blt.n	8000f06 <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e9a:	9b01      	ldr	r3, [sp, #4]
 8000e9c:	f013 0f04 	tst.w	r3, #4
 8000ea0:	d034      	beq.n	8000f0c <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ea2:	6963      	ldr	r3, [r4, #20]
 8000ea4:	aa01      	add	r2, sp, #4
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6820      	ldr	r0, [r4, #0]
 8000eaa:	4798      	blx	r3
 8000eac:	2800      	cmp	r0, #0
 8000eae:	db30      	blt.n	8000f12 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000eb6:	d10d      	bne.n	8000ed4 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000eb8:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000ebc:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000ec0:	d02a      	beq.n	8000f18 <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ec2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000ec6:	d129      	bne.n	8000f1c <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ec8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ecc:	bf14      	ite	ne
 8000ece:	2004      	movne	r0, #4
 8000ed0:	2005      	moveq	r0, #5
 8000ed2:	e01c      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ed4:	6963      	ldr	r3, [r4, #20]
 8000ed6:	aa01      	add	r2, sp, #4
 8000ed8:	211f      	movs	r1, #31
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	4798      	blx	r3
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	db1e      	blt.n	8000f20 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ee2:	9b01      	ldr	r3, [sp, #4]
 8000ee4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ee8:	d01d      	beq.n	8000f26 <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eea:	f003 031c 	and.w	r3, r3, #28
 8000eee:	2b18      	cmp	r3, #24
 8000ef0:	d01b      	beq.n	8000f2a <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d01b      	beq.n	8000f2e <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ef6:	2b14      	cmp	r3, #20
 8000ef8:	bf0c      	ite	eq
 8000efa:	2004      	moveq	r0, #4
 8000efc:	2005      	movne	r0, #5
 8000efe:	e006      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000f00:	f06f 0004 	mvn.w	r0, #4
 8000f04:	e003      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000f06:	f06f 0004 	mvn.w	r0, #4
 8000f0a:	e000      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000f0c:	2001      	movs	r0, #1
    }				
  }
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000f12:	f06f 0004 	mvn.w	r0, #4
 8000f16:	e7fa      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f18:	2002      	movs	r0, #2
 8000f1a:	e7f8      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	e7f6      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000f20:	f06f 0004 	mvn.w	r0, #4
 8000f24:	e7f3      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f26:	2006      	movs	r0, #6
 8000f28:	e7f1      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	e7ef      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e7ed      	b.n	8000f0e <LAN8742_GetLinkState+0x9a>
	...

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b510      	push	{r4, lr}
 8000f36:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_InitTick+0x40>)
 8000f3a:	7818      	ldrb	r0, [r3, #0]
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_InitTick+0x44>)
 8000f46:	6810      	ldr	r0, [r2, #0]
 8000f48:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f4c:	f000 f8ae 	bl	80010ac <HAL_SYSTICK_Config>
 8000f50:	b968      	cbnz	r0, 8000f6e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	2c0f      	cmp	r4, #15
 8000f54:	d901      	bls.n	8000f5a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f56:	2001      	movs	r0, #1
 8000f58:	e00a      	b.n	8000f70 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f62:	f000 f85f 	bl	8001024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_InitTick+0x48>)
 8000f68:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
}
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	bf00      	nop
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_Init>:
{
 8000f80:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_Init+0x30>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f92:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f9a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f82f 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ffc6 	bl	8000f34 <HAL_InitTick>
  HAL_MspInit();
 8000fa8:	f7ff fc12 	bl	80007d0 <HAL_MspInit>
}
 8000fac:	2000      	movs	r0, #0
 8000fae:	bd08      	pop	{r3, pc}
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_IncTick+0x10>)
 8000fb6:	6811      	ldr	r1, [r2, #0]
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_IncTick+0x14>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200005fc 	.word	0x200005fc
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fcc:	4b01      	ldr	r3, [pc, #4]	; (8000fd4 <HAL_GetTick+0x8>)
 8000fce:	6818      	ldr	r0, [r3, #0]
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	200005fc 	.word	0x200005fc

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fff6 	bl	8000fcc <HAL_GetTick>
 8000fe0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000fe6:	d002      	beq.n	8000fee <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_Delay+0x24>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	f7ff ffed 	bl	8000fcc <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	42a0      	cmp	r0, r4
 8000ff6:	d3fa      	bcc.n	8000fee <HAL_Delay+0x16>
  {
  }
}
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001002:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	0203      	lsls	r3, r0, #8
 8001006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800100e:	0412      	lsls	r2, r2, #16
 8001010:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800101c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001024:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_NVIC_SetPriority+0x64>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102e:	f1c3 0c07 	rsb	ip, r3, #7
 8001032:	f1bc 0f04 	cmp.w	ip, #4
 8001036:	bf28      	it	cs
 8001038:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103c:	f103 0e04 	add.w	lr, r3, #4
 8001040:	f1be 0f06 	cmp.w	lr, #6
 8001044:	bf8c      	ite	hi
 8001046:	3b03      	subhi	r3, #3
 8001048:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104a:	f04f 3eff 	mov.w	lr, #4294967295
 800104e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001052:	ea21 010c 	bic.w	r1, r1, ip
 8001056:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	fa0e f303 	lsl.w	r3, lr, r3
 800105c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001062:	2800      	cmp	r0, #0
 8001064:	db09      	blt.n	800107a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	0109      	lsls	r1, r1, #4
 8001068:	b2c9      	uxtb	r1, r1
 800106a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800106e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001072:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001076:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	f000 000f 	and.w	r0, r0, #15
 800107e:	0109      	lsls	r1, r1, #4
 8001080:	b2c9      	uxtb	r1, r1
 8001082:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_NVIC_SetPriority+0x68>)
 8001084:	5419      	strb	r1, [r3, r0]
 8001086:	e7f6      	b.n	8001076 <HAL_NVIC_SetPriority+0x52>
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000ed14 	.word	0xe000ed14

08001090 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001090:	2800      	cmp	r0, #0
 8001092:	db08      	blt.n	80010a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001094:	0942      	lsrs	r2, r0, #5
 8001096:	f000 001f 	and.w	r0, r0, #31
 800109a:	2301      	movs	r3, #1
 800109c:	fa03 f000 	lsl.w	r0, r3, r0
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_NVIC_EnableIRQ+0x18>)
 80010a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	3801      	subs	r0, #1
 80010ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010b2:	d20b      	bcs.n	80010cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <HAL_SYSTICK_Config+0x24>)
 80010bc:	21f0      	movs	r1, #240	; 0xf0
 80010be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c2:	2000      	movs	r0, #0
 80010c4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	2207      	movs	r2, #7
 80010c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80010d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010d8:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 80010de:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80010e0:	f107 0312 	add.w	r3, r7, #18
 80010e4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80010e8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 80010ea:	2d00      	cmp	r5, #0
 80010ec:	d035      	beq.n	800115a <ETH_UpdateDescriptor+0x86>
 80010ee:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80010f0:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80010f4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001160 <ETH_UpdateDescriptor+0x8c>
 80010f8:	e01a      	b.n	8001130 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 80010fa:	a801      	add	r0, sp, #4
 80010fc:	f002 f828 	bl	8003150 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001100:	9b01      	ldr	r3, [sp, #4]
 8001102:	b1f3      	cbz	r3, 8001142 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001104:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001106:	60a3      	str	r3, [r4, #8]
 8001108:	e015      	b.n	8001136 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800110a:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800110e:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800111a:	1c7b      	adds	r3, r7, #1
 800111c:	2b03      	cmp	r3, #3
 800111e:	bf8c      	ite	hi
 8001120:	3f03      	subhi	r7, #3
 8001122:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001124:	f107 0312 	add.w	r3, r7, #18
 8001128:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 800112c:	3d01      	subs	r5, #1
 800112e:	d009      	beq.n	8001144 <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0e1      	beq.n	80010fa <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 8001136:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e6      	bne.n	800110a <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800113c:	f8c4 8004 	str.w	r8, [r4, #4]
 8001140:	e7e5      	b.n	800110e <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 8001142:	b905      	cbnz	r5, 8001146 <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001144:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001146:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8001148:	42ab      	cmp	r3, r5
 800114a:	d006      	beq.n	800115a <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800114c:	6833      	ldr	r3, [r6, #0]
 800114e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001156:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001158:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 800115a:	b003      	add	sp, #12
 800115c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001160:	800045f8 	.word	0x800045f8

08001164 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001168:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800116a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800116e:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	2c00      	cmp	r4, #0
 8001176:	f2c0 80ad 	blt.w	80012d4 <ETH_Prepare_Tx_Descriptors+0x170>
 800117a:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800117c:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8001180:	2c00      	cmp	r4, #0
 8001182:	f040 80a9 	bne.w	80012d8 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001186:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001188:	6825      	ldr	r5, [r4, #0]
 800118a:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800118c:	685e      	ldr	r6, [r3, #4]
 800118e:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 8001192:	f026 061f 	bic.w	r6, r6, #31
 8001196:	6865      	ldr	r5, [r4, #4]
 8001198:	4335      	orrs	r5, r6
 800119a:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800119c:	680d      	ldr	r5, [r1, #0]
 800119e:	f015 0f01 	tst.w	r5, #1
 80011a2:	d005      	beq.n	80011b0 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80011a4:	681e      	ldr	r6, [r3, #0]
 80011a6:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 80011aa:	694d      	ldr	r5, [r1, #20]
 80011ac:	4335      	orrs	r5, r6
 80011ae:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80011b0:	680d      	ldr	r5, [r1, #0]
 80011b2:	f015 0f20 	tst.w	r5, #32
 80011b6:	d005      	beq.n	80011c4 <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80011b8:	681e      	ldr	r6, [r3, #0]
 80011ba:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80011be:	690d      	ldr	r5, [r1, #16]
 80011c0:	4335      	orrs	r5, r6
 80011c2:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80011c4:	6809      	ldr	r1, [r1, #0]
 80011c6:	f011 0f04 	tst.w	r1, #4
 80011ca:	d003      	beq.n	80011d4 <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80011d2:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011da:	6019      	str	r1, [r3, #0]
 80011dc:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80011e6:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80011e8:	68a1      	ldr	r1, [r4, #8]
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d053      	beq.n	8001296 <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80011ee:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 80011f0:	2601      	movs	r6, #1
 80011f2:	e02c      	b.n	800124e <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 80011fa:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80011fc:	1c6b      	adds	r3, r5, #1
 80011fe:	2b03      	cmp	r3, #3
 8001200:	bf8c      	ite	hi
 8001202:	3d03      	subhi	r5, #3
 8001204:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001206:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 800120a:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800120e:	6819      	ldr	r1, [r3, #0]
 8001210:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001214:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	2900      	cmp	r1, #0
 800121a:	db24      	blt.n	8001266 <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800121c:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001220:	bb09      	cbnz	r1, 8001266 <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001222:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001224:	6821      	ldr	r1, [r4, #0]
 8001226:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800122e:	f021 011f 	bic.w	r1, r1, #31
 8001232:	6862      	ldr	r2, [r4, #4]
 8001234:	4311      	orrs	r1, r2
 8001236:	6059      	str	r1, [r3, #4]
 8001238:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001242:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 8001244:	f106 0e01 	add.w	lr, r6, #1
 8001248:	68a1      	ldr	r1, [r4, #8]
 800124a:	b331      	cbz	r1, 800129a <ETH_Prepare_Tx_Descriptors+0x136>
 800124c:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 8001254:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001256:	f1b8 0f00 	cmp.w	r8, #0
 800125a:	d0cb      	beq.n	80011f4 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001262:	6019      	str	r1, [r3, #0]
 8001264:	e7ca      	b.n	80011fc <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001266:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800126a:	2e00      	cmp	r6, #0
 800126c:	d037      	beq.n	80012de <ETH_Prepare_Tx_Descriptors+0x17a>
 800126e:	2100      	movs	r1, #0
 8001270:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800127a:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800127c:	1c7b      	adds	r3, r7, #1
 800127e:	2b03      	cmp	r3, #3
 8001280:	bf8c      	ite	hi
 8001282:	3f03      	subhi	r7, #3
 8001284:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001286:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 800128a:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800128c:	3101      	adds	r1, #1
 800128e:	428e      	cmp	r6, r1
 8001290:	d1ee      	bne.n	8001270 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 8001292:	2002      	movs	r0, #2
 8001294:	e021      	b.n	80012da <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001296:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 8001298:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 800129a:	f1b8 0f00 	cmp.w	r8, #0
 800129e:	d014      	beq.n	80012ca <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012ae:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80012b0:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 80012b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80012b8:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80012ba:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80012bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012be:	3301      	adds	r3, #1
 80012c0:	441e      	add	r6, r3
 80012c2:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80012c4:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e007      	b.n	80012da <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e7e9      	b.n	80012a8 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 80012d4:	2002      	movs	r0, #2
 80012d6:	e000      	b.n	80012da <ETH_Prepare_Tx_Descriptors+0x176>
 80012d8:	2002      	movs	r0, #2
}
 80012da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 80012de:	2002      	movs	r0, #2
 80012e0:	e7fb      	b.n	80012da <ETH_Prepare_Tx_Descriptors+0x176>
	...

080012e4 <ETH_SetMACConfig>:
{
 80012e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e8:	4605      	mov	r5, r0
 80012ea:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 80012ec:	6801      	ldr	r1, [r0, #0]
 80012ee:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012f0:	4e3b      	ldr	r6, [pc, #236]	; (80013e0 <ETH_SetMACConfig+0xfc>)
 80012f2:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012f4:	7c23      	ldrb	r3, [r4, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf0c      	ite	eq
 80012fa:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 80012fe:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001302:	7c63      	ldrb	r3, [r4, #17]
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf0c      	ite	eq
 8001308:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 800130c:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001310:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001314:	68a3      	ldr	r3, [r4, #8]
 8001316:	6962      	ldr	r2, [r4, #20]
 8001318:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800131a:	7fa2      	ldrb	r2, [r4, #30]
 800131c:	2a00      	cmp	r2, #0
 800131e:	bf0c      	ite	eq
 8001320:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001324:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001326:	f894 901c 	ldrb.w	r9, [r4, #28]
 800132a:	69a2      	ldr	r2, [r4, #24]
 800132c:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800132e:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001330:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001334:	2a00      	cmp	r2, #0
 8001336:	bf0c      	ite	eq
 8001338:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 800133c:	f04f 0a00 	movne.w	sl, #0
 8001340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001342:	4313      	orrs	r3, r2
 8001344:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001348:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 800134c:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001350:	7be7      	ldrb	r7, [r4, #15]
 8001352:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001356:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800135a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800135e:	4333      	orrs	r3, r6
 8001360:	ea43 030e 	orr.w	r3, r3, lr
 8001364:	ea43 030c 	orr.w	r3, r3, ip
 8001368:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136a:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800136e:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe2f 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 800137e:	6828      	ldr	r0, [r5, #0]
 8001380:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001382:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8001386:	0409      	lsls	r1, r1, #16
 8001388:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800138a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf0c      	ite	eq
 8001394:	2380      	moveq	r3, #128	; 0x80
 8001396:	2300      	movne	r3, #0
 8001398:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800139a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800139e:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013a0:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 80013a4:	2901      	cmp	r1, #1
 80013a6:	bf0c      	ite	eq
 80013a8:	2108      	moveq	r1, #8
 80013aa:	2100      	movne	r1, #0
 80013ac:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013ae:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	bf0c      	ite	eq
 80013b6:	2304      	moveq	r3, #4
 80013b8:	2300      	movne	r3, #0
 80013ba:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013bc:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 80013c0:	2901      	cmp	r1, #1
 80013c2:	bf0c      	ite	eq
 80013c4:	2102      	moveq	r1, #2
 80013c6:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013c8:	4313      	orrs	r3, r2
 80013ca:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013cc:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fe00 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	619c      	str	r4, [r3, #24]
}
 80013dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e0:	ff20810f 	.word	0xff20810f

080013e4 <ETH_SetDMAConfig>:
{
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	4605      	mov	r5, r0
 80013e8:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013ea:	6802      	ldr	r2, [r0, #0]
 80013ec:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80013f0:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013f2:	482c      	ldr	r0, [pc, #176]	; (80014a4 <ETH_SetDMAConfig+0xc0>)
 80013f4:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013f6:	7b0b      	ldrb	r3, [r1, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001400:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001402:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001406:	7f4b      	ldrb	r3, [r1, #29]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001410:	2100      	movne	r1, #0
 8001412:	6963      	ldr	r3, [r4, #20]
 8001414:	6a27      	ldr	r7, [r4, #32]
 8001416:	433b      	orrs	r3, r7
 8001418:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800141c:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001420:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001424:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001428:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800142c:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001430:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001434:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001438:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800143c:	4303      	orrs	r3, r0
 800143e:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001440:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001446:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800144e:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff fdc1 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145c:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800145e:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001460:	68a3      	ldr	r3, [r4, #8]
 8001462:	69a1      	ldr	r1, [r4, #24]
 8001464:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001466:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800146a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800146e:	6921      	ldr	r1, [r4, #16]
 8001470:	430b      	orrs	r3, r1
 8001472:	6821      	ldr	r1, [r4, #0]
 8001474:	430b      	orrs	r3, r1
 8001476:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001478:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800147c:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800147e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001482:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001492:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fd9f 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	601c      	str	r4, [r3, #0]
}
 80014a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a4:	f8de3f23 	.word	0xf8de3f23

080014a8 <ETH_FlushTransmitFIFO>:
{
 80014a8:	b510      	push	{r4, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014be:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fd84 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	9a01      	ldr	r2, [sp, #4]
 80014d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	b002      	add	sp, #8
 80014dc:	bd10      	pop	{r4, pc}
	...

080014e0 <HAL_ETH_Init>:
  if (heth == NULL)
 80014e0:	2800      	cmp	r0, #0
 80014e2:	f000 8109 	beq.w	80016f8 <HAL_ETH_Init+0x218>
{
 80014e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e8:	b0a7      	sub	sp, #156	; 0x9c
 80014ea:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d034      	beq.n	800155e <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <HAL_ETH_Init+0x21c>)
 80014fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800150c:	4b7c      	ldr	r3, [pc, #496]	; (8001700 <HAL_ETH_Init+0x220>)
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001514:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	68a9      	ldr	r1, [r5, #8]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800151e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800152e:	f7ff fd4d 	bl	8000fcc <HAL_GetTick>
 8001532:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153a:	681c      	ldr	r4, [r3, #0]
 800153c:	f014 0401 	ands.w	r4, r4, #1
 8001540:	d013      	beq.n	800156a <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001542:	f7ff fd43 	bl	8000fcc <HAL_GetTick>
 8001546:	1b80      	subs	r0, r0, r6
 8001548:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800154c:	d9f2      	bls.n	8001534 <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800154e:	2304      	movs	r3, #4
 8001550:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001554:	23e0      	movs	r3, #224	; 0xe0
 8001556:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e0ca      	b.n	80016f4 <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 800155e:	2323      	movs	r3, #35	; 0x23
 8001560:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001564:	f001 fc70 	bl	8002e48 <HAL_ETH_MspInit>
 8001568:	e7c4      	b.n	80014f4 <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 800156a:	2701      	movs	r7, #1
 800156c:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001570:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001574:	2600      	movs	r6, #0
 8001576:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001578:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800157c:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001580:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001584:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001588:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800158c:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001590:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001592:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001596:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001598:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800159c:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800159e:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015a2:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015aa:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b0:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015b2:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015b6:	a90d      	add	r1, sp, #52	; 0x34
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7ff fe93 	bl	80012e4 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015be:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015c2:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015c6:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015ca:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015ce:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015d0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015d4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015d8:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015da:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015de:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e6:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ec:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015f4:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015f8:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015fa:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015fc:	a902      	add	r1, sp, #8
 80015fe:	4628      	mov	r0, r5
 8001600:	f7ff fef0 	bl	80013e4 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001604:	f105 0c18 	add.w	ip, r5, #24
 8001608:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800160a:	4630      	mov	r0, r6
 800160c:	e00a      	b.n	8001624 <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800160e:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001612:	68ee      	ldr	r6, [r5, #12]
 8001614:	4476      	add	r6, lr
 8001616:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001618:	58d1      	ldr	r1, [r2, r3]
 800161a:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800161e:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001620:	3328      	adds	r3, #40	; 0x28
 8001622:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001624:	68ea      	ldr	r2, [r5, #12]
 8001626:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001628:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800162a:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800162c:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800162e:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001630:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001634:	58d6      	ldr	r6, [r2, r3]
 8001636:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800163a:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800163c:	1e7e      	subs	r6, r7, #1
 800163e:	2e02      	cmp	r6, #2
 8001640:	d9e5      	bls.n	800160e <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001642:	68ee      	ldr	r6, [r5, #12]
 8001644:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001646:	58d1      	ldr	r1, [r2, r3]
 8001648:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800164c:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800164e:	2f03      	cmp	r7, #3
 8001650:	d9e6      	bls.n	8001620 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	68ea      	ldr	r2, [r5, #12]
 800165a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165e:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001660:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001664:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001666:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001668:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800166c:	f244 57f8 	movw	r7, #17912	; 0x45f8
 8001670:	e006      	b.n	8001680 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001672:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8001676:	692a      	ldr	r2, [r5, #16]
 8001678:	4472      	add	r2, lr
 800167a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800167c:	3428      	adds	r4, #40	; 0x28
 800167e:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 8001680:	692a      	ldr	r2, [r5, #16]
 8001682:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001684:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001686:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001688:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800168a:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800168c:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800168e:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001690:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001694:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800169c:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800169e:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016a2:	1e42      	subs	r2, r0, #1
 80016a4:	2a02      	cmp	r2, #2
 80016a6:	d9e4      	bls.n	8001672 <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016a8:	692a      	ldr	r2, [r5, #16]
 80016aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016ac:	2803      	cmp	r0, #3
 80016ae:	d9e5      	bls.n	800167c <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80016b0:	2000      	movs	r0, #0
 80016b2:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80016b4:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80016b6:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80016b8:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80016ba:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	692a      	ldr	r2, [r5, #16]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016c6:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016c8:	7951      	ldrb	r1, [r2, #5]
 80016ca:	7913      	ldrb	r3, [r2, #4]
 80016cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <HAL_ETH_Init+0x224>)
 80016d2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016d4:	78d4      	ldrb	r4, [r2, #3]
 80016d6:	7893      	ldrb	r3, [r2, #2]
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80016de:	7814      	ldrb	r4, [r2, #0]
 80016e0:	4323      	orrs	r3, r4
 80016e2:	7852      	ldrb	r2, [r2, #1]
 80016e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016e8:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016ea:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ee:	2310      	movs	r3, #16
 80016f0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80016f4:	b027      	add	sp, #156	; 0x9c
 80016f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	4770      	bx	lr
 80016fc:	40023800 	.word	0x40023800
 8001700:	40013800 	.word	0x40013800
 8001704:	40028000 	.word	0x40028000

08001708 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001708:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800170c:	2b10      	cmp	r3, #16
 800170e:	d001      	beq.n	8001714 <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
}
 8001712:	4770      	bx	lr
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001718:	2523      	movs	r5, #35	; 0x23
 800171a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800171e:	2304      	movs	r3, #4
 8001720:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001722:	f7ff fcd7 	bl	80010d4 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	6813      	ldr	r3, [r2, #0]
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff fc4f 	bl	8000fd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fc43 	bl	8000fd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fea6 	bl	80014a8 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001768:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f042 0202 	orr.w	r2, r2, #2
 8001776:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001778:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 800177c:	2000      	movs	r0, #0
}
 800177e:	bd70      	pop	{r4, r5, r6, pc}

08001780 <HAL_ETH_Stop>:
{
 8001780:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001782:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001786:	2b23      	cmp	r3, #35	; 0x23
 8001788:	d001      	beq.n	800178e <HAL_ETH_Stop+0xe>
    return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
}
 800178c:	bd38      	pop	{r3, r4, r5, pc}
 800178e:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001790:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001794:	6803      	ldr	r3, [r0, #0]
 8001796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017a0:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a8:	699a      	ldr	r2, [r3, #24]
 80017aa:	f022 0202 	bic.w	r2, r2, #2
 80017ae:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017b0:	6802      	ldr	r2, [r0, #0]
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fc0a 	bl	8000fd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff fe6d 	bl	80014a8 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017ce:	6822      	ldr	r2, [r4, #0]
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f023 0308 	bic.w	r3, r3, #8
 80017d6:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fbfb 	bl	8000fd8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	601d      	str	r5, [r3, #0]
    heth->gState = HAL_ETH_STATE_READY;
 80017e6:	2310      	movs	r3, #16
 80017e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e7cd      	b.n	800178c <HAL_ETH_Stop+0xc>

080017f0 <HAL_ETH_Transmit>:
{
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80017f4:	b131      	cbz	r1, 8001804 <HAL_ETH_Transmit+0x14>
 80017f6:	4615      	mov	r5, r2
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80017fc:	2b23      	cmp	r3, #35	; 0x23
 80017fe:	d009      	beq.n	8001814 <HAL_ETH_Transmit+0x24>
    return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
}
 8001802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001804:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e7f6      	b.n	8001802 <HAL_ETH_Transmit+0x12>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001814:	2200      	movs	r2, #0
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fca4 	bl	8001164 <ETH_Prepare_Tx_Descriptors>
 800181c:	2800      	cmp	r0, #0
 800181e:	d135      	bne.n	800188c <HAL_ETH_Transmit+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001820:	f3bf 8f4f 	dsb	sy
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001826:	1d9a      	adds	r2, r3, #6
 8001828:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	2a03      	cmp	r2, #3
 8001830:	bf92      	itee	ls
 8001832:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001834:	3b03      	subhi	r3, #3
 8001836:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800183c:	3206      	adds	r2, #6
 800183e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	605a      	str	r2, [r3, #4]
    tickstart = HAL_GetTick();
 8001848:	f7ff fbc0 	bl	8000fcc <HAL_GetTick>
 800184c:	4607      	mov	r7, r0
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800184e:	6833      	ldr	r3, [r6, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da30      	bge.n	80018b6 <HAL_ETH_Transmit+0xc6>
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800185a:	6952      	ldr	r2, [r2, #20]
 800185c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001860:	d11c      	bne.n	800189c <HAL_ETH_Transmit+0xac>
      if (Timeout != HAL_MAX_DELAY)
 8001862:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001866:	d0f2      	beq.n	800184e <HAL_ETH_Transmit+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fbb0 	bl	8000fcc <HAL_GetTick>
 800186c:	1bc0      	subs	r0, r0, r7
 800186e:	42a8      	cmp	r0, r5
 8001870:	d801      	bhi.n	8001876 <HAL_ETH_Transmit+0x86>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d1eb      	bne.n	800184e <HAL_ETH_Transmit+0x5e>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001876:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001882:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001886:	6033      	str	r3, [r6, #0]
          return HAL_ERROR;
 8001888:	2001      	movs	r0, #1
 800188a:	e7ba      	b.n	8001802 <HAL_ETH_Transmit+0x12>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800188c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	e7b2      	b.n	8001802 <HAL_ETH_Transmit+0x12>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800189c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80018a0:	f042 0208 	orr.w	r2, r2, #8
 80018a4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 80018b2:	2001      	movs	r0, #1
 80018b4:	e7a5      	b.n	8001802 <HAL_ETH_Transmit+0x12>
    return HAL_OK;
 80018b6:	2000      	movs	r0, #0
 80018b8:	e7a3      	b.n	8001802 <HAL_ETH_Transmit+0x12>

080018ba <HAL_ETH_ReadData>:
{
 80018ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80018c2:	9103      	str	r1, [sp, #12]
 80018c4:	b1e1      	cbz	r1, 8001900 <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018c6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80018ca:	2b23      	cmp	r3, #35	; 0x23
 80018cc:	d17e      	bne.n	80019cc <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80018ce:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d0:	f107 0312 	add.w	r3, r7, #18
 80018d4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80018da:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	f2c0 8083 	blt.w	80019ec <HAL_ETH_ReadData+0x132>
 80018e6:	f1bb 0f00 	cmp.w	fp, #0
 80018ea:	d066      	beq.n	80019ba <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 80018ec:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018f0:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80018fa:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 80018fc:	46c1      	mov	r9, r8
 80018fe:	e037      	b.n	8001970 <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001900:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e05e      	b.n	80019ce <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001916:	bf1c      	itt	ne
 8001918:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800191c:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001926:	d134      	bne.n	8001992 <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 8001928:	696e      	ldr	r6, [r5, #20]
 800192a:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800192c:	68a2      	ldr	r2, [r4, #8]
 800192e:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001930:	b2b3      	uxth	r3, r6
 8001932:	9901      	ldr	r1, [sp, #4]
 8001934:	9802      	ldr	r0, [sp, #8]
 8001936:	f001 fc31 	bl	800319c <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800193a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800193c:	3301      	adds	r3, #1
 800193e:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001940:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001942:	4433      	add	r3, r6
 8001944:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001946:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 800194a:	1c7b      	adds	r3, r7, #1
 800194c:	2b03      	cmp	r3, #3
 800194e:	bf8c      	ite	hi
 8001950:	3f03      	subhi	r7, #3
 8001952:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001954:	f107 0312 	add.w	r3, r7, #18
 8001958:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 800195c:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db1f      	blt.n	80019a6 <HAL_ETH_ReadData+0xec>
 8001966:	45c3      	cmp	fp, r8
 8001968:	d01c      	beq.n	80019a4 <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 800196a:	f1ba 0f00 	cmp.w	sl, #0
 800196e:	d131      	bne.n	80019d4 <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001976:	d003      	beq.n	8001980 <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001978:	69a3      	ldr	r3, [r4, #24]
 800197a:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800197c:	69e3      	ldr	r3, [r4, #28]
 800197e:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001986:	d1c3      	bne.n	8001910 <HAL_ETH_ReadData+0x56>
 8001988:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1c0      	bne.n	8001910 <HAL_ETH_ReadData+0x56>
 800198e:	46ca      	mov	sl, r9
 8001990:	e7db      	b.n	800194a <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001992:	6826      	ldr	r6, [r4, #0]
 8001994:	f3c6 460d 	ubfx	r6, r6, #16, #14
 8001998:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 800199e:	f04f 0a01 	mov.w	sl, #1
 80019a2:	e7c3      	b.n	800192c <HAL_ETH_ReadData+0x72>
    desccnt++;
 80019a4:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019a6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019a8:	4443      	add	r3, r8
 80019aa:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019ac:	b93b      	cbnz	r3, 80019be <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019ae:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 80019b2:	f1ba 0f00 	cmp.w	sl, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_ETH_ReadData+0x114>
 80019b8:	e012      	b.n	80019e0 <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 80019ba:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff fb88 	bl	80010d4 <ETH_UpdateDescriptor>
 80019c4:	e7f3      	b.n	80019ae <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 80019c6:	f04f 0a00 	mov.w	sl, #0
 80019ca:	e7f8      	b.n	80019be <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	b005      	add	sp, #20
 80019d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019d6:	4443      	add	r3, r8
 80019d8:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019de:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 80019e0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80019e2:	9a03      	ldr	r2, [sp, #12]
 80019e4:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 80019e6:	2000      	movs	r0, #0
 80019e8:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 80019ea:	e7f0      	b.n	80019ce <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ea      	bne.n	80019c6 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
 80019f2:	e7ec      	b.n	80019ce <HAL_ETH_ReadData+0x114>

080019f4 <HAL_ETH_TxCpltCallback>:
}
 80019f4:	4770      	bx	lr

080019f6 <HAL_ETH_RxCpltCallback>:
}
 80019f6:	4770      	bx	lr

080019f8 <HAL_ETH_ErrorCallback>:
}
 80019f8:	4770      	bx	lr

080019fa <HAL_ETH_PMTCallback>:
}
 80019fa:	4770      	bx	lr

080019fc <HAL_ETH_WakeUpCallback>:
}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_ETH_IRQHandler>:
{
 8001a00:	b510      	push	{r4, lr}
 8001a02:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a0a:	6952      	ldr	r2, [r2, #20]
 8001a0c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a10:	d005      	beq.n	8001a1e <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a12:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a16:	69d2      	ldr	r2, [r2, #28]
 8001a18:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a1c:	d147      	bne.n	8001aae <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a24:	6952      	ldr	r2, [r2, #20]
 8001a26:	f012 0f01 	tst.w	r2, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a2c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a30:	69d2      	ldr	r2, [r2, #28]
 8001a32:	f012 0f01 	tst.w	r2, #1
 8001a36:	d141      	bne.n	8001abc <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a3e:	6952      	ldr	r2, [r2, #20]
 8001a40:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a44:	d028      	beq.n	8001a98 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a46:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a4a:	69d2      	ldr	r2, [r2, #28]
 8001a4c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a50:	d022      	beq.n	8001a98 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a52:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001a56:	f042 0208 	orr.w	r2, r2, #8
 8001a5a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a5e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a62:	6952      	ldr	r2, [r2, #20]
 8001a64:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001a68:	d031      	beq.n	8001ace <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a74:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001a78:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001a7c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a80:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001a8a:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a8c:	23e0      	movs	r3, #224	; 0xe0
 8001a8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff ffb0 	bl	80019f8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	f012 0f08 	tst.w	r2, #8
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <HAL_ETH_IRQHandler+0x10c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001aaa:	d126      	bne.n	8001afa <HAL_ETH_IRQHandler+0xfa>
}
 8001aac:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_ETH_IRQHandler+0x110>)
 8001ab4:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001ab6:	f7ff ff9e 	bl	80019f6 <HAL_ETH_RxCpltCallback>
 8001aba:	e7b0      	b.n	8001a1e <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001ac4:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ff94 	bl	80019f4 <HAL_ETH_TxCpltCallback>
 8001acc:	e7b4      	b.n	8001a38 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	f248 6180 	movw	r1, #34432	; 0x8680
 8001ad8:	400a      	ands	r2, r1
 8001ada:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ade:	6159      	str	r1, [r3, #20]
 8001ae0:	e7d7      	b.n	8001a92 <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001ae8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff ff84 	bl	80019fa <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001af8:	e7d3      	b.n	8001aa2 <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_ETH_IRQHandler+0x10c>)
 8001afc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b00:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ff7a 	bl	80019fc <HAL_ETH_WakeUpCallback>
}
 8001b08:	e7d0      	b.n	8001aac <HAL_ETH_IRQHandler+0xac>
 8001b0a:	bf00      	nop
 8001b0c:	40013c00 	.word	0x40013c00
 8001b10:	00010040 	.word	0x00010040

08001b14 <HAL_ETH_ReadPHYRegister>:
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
 8001b16:	4604      	mov	r4, r0
 8001b18:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b1a:	6805      	ldr	r5, [r0, #0]
 8001b1c:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b1e:	0192      	lsls	r2, r2, #6
 8001b20:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b24:	f000 021c 	and.w	r2, r0, #28
 8001b28:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b2a:	02cb      	lsls	r3, r1, #11
 8001b2c:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b2e:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b30:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b34:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001b36:	f7ff fa49 	bl	8000fcc <HAL_GetTick>
 8001b3a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b3c:	f7ff fa46 	bl	8000fcc <HAL_GetTick>
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b46:	d209      	bcs.n	8001b5c <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4c:	f011 0f01 	tst.w	r1, #1
 8001b50:	d1f4      	bne.n	8001b3c <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b52:	6953      	ldr	r3, [r2, #20]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b58:	2000      	movs	r0, #0
}
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	e7fc      	b.n	8001b5a <HAL_ETH_ReadPHYRegister+0x46>

08001b60 <HAL_ETH_WritePHYRegister>:
{
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b64:	6805      	ldr	r5, [r0, #0]
 8001b66:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b68:	0192      	lsls	r2, r2, #6
 8001b6a:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b6e:	f000 001c 	and.w	r0, r0, #28
 8001b72:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b74:	02ca      	lsls	r2, r1, #11
 8001b76:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b78:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b7a:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001b86:	f7ff fa21 	bl	8000fcc <HAL_GetTick>
 8001b8a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b8c:	f7ff fa1e 	bl	8000fcc <HAL_GetTick>
 8001b90:	1b40      	subs	r0, r0, r5
 8001b92:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b96:	d206      	bcs.n	8001ba6 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b9c:	f013 0f01 	tst.w	r3, #1
 8001ba0:	d1f4      	bne.n	8001b8c <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
}
 8001ba8:	bd38      	pop	{r3, r4, r5, pc}

08001baa <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d06f      	beq.n	8001c8e <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bae:	6802      	ldr	r2, [r0, #0]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001bb6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bba:	6802      	ldr	r2, [r0, #0]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001bc2:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001bcc:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001bd0:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd4:	6802      	ldr	r2, [r0, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001bd8:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bdc:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bde:	6802      	ldr	r2, [r0, #0]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001be6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001bea:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001bf4:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bfe:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c00:	6802      	ldr	r2, [r0, #0]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c08:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001c12:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001c16:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c18:	6802      	ldr	r2, [r0, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c20:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c24:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c26:	6802      	ldr	r2, [r0, #0]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c2e:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c30:	6802      	ldr	r2, [r0, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c38:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c3a:	6802      	ldr	r2, [r0, #0]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c42:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c44:	6802      	ldr	r2, [r0, #0]
 8001c46:	6992      	ldr	r2, [r2, #24]
 8001c48:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c4c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c50:	6802      	ldr	r2, [r0, #0]
 8001c52:	6992      	ldr	r2, [r2, #24]
 8001c54:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c58:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c5c:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	6992      	ldr	r2, [r2, #24]
 8001c64:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c68:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c6a:	6802      	ldr	r2, [r0, #0]
 8001c6c:	6992      	ldr	r2, [r2, #24]
 8001c6e:	0c12      	lsrs	r2, r2, #16
 8001c70:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c72:	6802      	ldr	r2, [r0, #0]
 8001c74:	6992      	ldr	r2, [r2, #24]
 8001c76:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001c7a:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c7e:	6802      	ldr	r2, [r0, #0]
 8001c80:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001c82:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c86:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	4770      	bx	lr
    return HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
}
 8001c90:	4770      	bx	lr

08001c92 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001c92:	b151      	cbz	r1, 8001caa <HAL_ETH_SetMACConfig+0x18>
{
 8001c94:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001c96:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d001      	beq.n	8001ca2 <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001ca2:	f7ff fb1f 	bl	80012e4 <ETH_SetMACConfig>
    return HAL_OK;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e7fa      	b.n	8001ca0 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
}
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_ETH_SetMDIOClockRange>:
{
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cb4:	6803      	ldr	r3, [r0, #0]
 8001cb6:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cb8:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001cbc:	f000 fcfc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001cc2:	4403      	add	r3, r0
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d204      	bcs.n	8001cd4 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cca:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cce:	682b      	ldr	r3, [r5, #0]
 8001cd0:	611c      	str	r4, [r3, #16]
}
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001cd6:	4403      	add	r3, r0
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cde:	f044 040c 	orr.w	r4, r4, #12
 8001ce2:	e7f4      	b.n	8001cce <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001ce6:	4403      	add	r3, r0
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d3ef      	bcc.n	8001cce <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001cf0:	4403      	add	r3, r0
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001cf4:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cf6:	bf94      	ite	ls
 8001cf8:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cfc:	f044 0410 	orrhi.w	r4, r4, #16
 8001d00:	e7e5      	b.n	8001cce <HAL_ETH_SetMDIOClockRange+0x1e>
 8001d02:	bf00      	nop
 8001d04:	feced300 	.word	0xfeced300
 8001d08:	00e4e1c0 	.word	0x00e4e1c0
 8001d0c:	fde9f140 	.word	0xfde9f140
 8001d10:	017d783f 	.word	0x017d783f
 8001d14:	fc6c7900 	.word	0xfc6c7900
 8001d18:	02625a00 	.word	0x02625a00
 8001d1c:	fa0a1f00 	.word	0xfa0a1f00
 8001d20:	02faf07f 	.word	0x02faf07f

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	4d82      	ldr	r5, [pc, #520]	; (8001f38 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	4c82      	ldr	r4, [pc, #520]	; (8001f3c <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d32:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001f44 <HAL_GPIO_Init+0x220>
 8001d36:	e04d      	b.n	8001dd4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d38:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3a:	f04f 0903 	mov.w	r9, #3
 8001d3e:	fa09 f902 	lsl.w	r9, r9, r2
 8001d42:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d46:	68cf      	ldr	r7, [r1, #12]
 8001d48:	4097      	lsls	r7, r2
 8001d4a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001d4e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d50:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d52:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d56:	684f      	ldr	r7, [r1, #4]
 8001d58:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001d5c:	409f      	lsls	r7, r3
 8001d5e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d62:	6047      	str	r7, [r0, #4]
 8001d64:	e046      	b.n	8001df4 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	f04f 0e00 	mov.w	lr, #0
 8001d6a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d6e:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d72:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001d76:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7c:	684e      	ldr	r6, [r1, #4]
 8001d7e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d82:	bf0c      	ite	eq
 8001d84:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d88:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001d8c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001d8e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	684e      	ldr	r6, [r1, #4]
 8001d92:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001d96:	bf0c      	ite	eq
 8001d98:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d9c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001da0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001da2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	684e      	ldr	r6, [r1, #4]
 8001da6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001daa:	bf0c      	ite	eq
 8001dac:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001db0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001db4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	684e      	ldr	r6, [r1, #4]
 8001dba:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	bf0c      	ite	eq
 8001dc0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dc4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001dc8:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	3301      	adds	r3, #1
 8001dcc:	3202      	adds	r2, #2
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	f000 80af 	beq.w	8001f32 <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001dd4:	f04f 0e01 	mov.w	lr, #1
 8001dd8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ddc:	680f      	ldr	r7, [r1, #0]
 8001dde:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001de2:	ea3e 0607 	bics.w	r6, lr, r7
 8001de6:	d1f0      	bne.n	8001dca <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de8:	684f      	ldr	r7, [r1, #4]
 8001dea:	f007 0703 	and.w	r7, r7, #3
 8001dee:	3f01      	subs	r7, #1
 8001df0:	2f01      	cmp	r7, #1
 8001df2:	d9a1      	bls.n	8001d38 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df4:	684f      	ldr	r7, [r1, #4]
 8001df6:	f007 0703 	and.w	r7, r7, #3
 8001dfa:	2f03      	cmp	r7, #3
 8001dfc:	d027      	beq.n	8001e4e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001dfe:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e00:	f04f 0e03 	mov.w	lr, #3
 8001e04:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e08:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0c:	688f      	ldr	r7, [r1, #8]
 8001e0e:	4097      	lsls	r7, r2
 8001e10:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001e14:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e16:	684f      	ldr	r7, [r1, #4]
 8001e18:	f007 0703 	and.w	r7, r7, #3
 8001e1c:	2f02      	cmp	r7, #2
 8001e1e:	d116      	bne.n	8001e4e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e24:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001e28:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2c:	f003 0907 	and.w	r9, r3, #7
 8001e30:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e34:	f04f 0a0f 	mov.w	sl, #15
 8001e38:	fa0a fa09 	lsl.w	sl, sl, r9
 8001e3c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	690f      	ldr	r7, [r1, #16]
 8001e42:	fa07 f709 	lsl.w	r7, r7, r9
 8001e46:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e4a:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001e4e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e50:	f04f 0e03 	mov.w	lr, #3
 8001e54:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e58:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	684f      	ldr	r7, [r1, #4]
 8001e5e:	f007 0703 	and.w	r7, r7, #3
 8001e62:	4097      	lsls	r7, r2
 8001e64:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001e68:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6a:	684f      	ldr	r7, [r1, #4]
 8001e6c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001e70:	d0ab      	beq.n	8001dca <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2700      	movs	r7, #0
 8001e74:	9701      	str	r7, [sp, #4]
 8001e76:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e78:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001e7c:	646f      	str	r7, [r5, #68]	; 0x44
 8001e7e:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e80:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001e84:	9701      	str	r7, [sp, #4]
 8001e86:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e88:	f023 0703 	bic.w	r7, r3, #3
 8001e8c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001e90:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001e94:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e98:	f003 0e03 	and.w	lr, r3, #3
 8001e9c:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001ea0:	f04f 0e0f 	mov.w	lr, #15
 8001ea4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ea8:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eac:	4e24      	ldr	r6, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x21c>)
 8001eae:	42b0      	cmp	r0, r6
 8001eb0:	f43f af59 	beq.w	8001d66 <HAL_GPIO_Init+0x42>
 8001eb4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eb8:	42b0      	cmp	r0, r6
 8001eba:	d022      	beq.n	8001f02 <HAL_GPIO_Init+0x1de>
 8001ebc:	4540      	cmp	r0, r8
 8001ebe:	d023      	beq.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001ec0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001ec4:	42b0      	cmp	r0, r6
 8001ec6:	d022      	beq.n	8001f0e <HAL_GPIO_Init+0x1ea>
 8001ec8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ecc:	42b0      	cmp	r0, r6
 8001ece:	d021      	beq.n	8001f14 <HAL_GPIO_Init+0x1f0>
 8001ed0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ed4:	42b0      	cmp	r0, r6
 8001ed6:	d020      	beq.n	8001f1a <HAL_GPIO_Init+0x1f6>
 8001ed8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001edc:	42b0      	cmp	r0, r6
 8001ede:	d01f      	beq.n	8001f20 <HAL_GPIO_Init+0x1fc>
 8001ee0:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001f48 <HAL_GPIO_Init+0x224>
 8001ee4:	4570      	cmp	r0, lr
 8001ee6:	d01e      	beq.n	8001f26 <HAL_GPIO_Init+0x202>
 8001ee8:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001eec:	4570      	cmp	r0, lr
 8001eee:	d01d      	beq.n	8001f2c <HAL_GPIO_Init+0x208>
 8001ef0:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001ef4:	4570      	cmp	r0, lr
 8001ef6:	bf0c      	ite	eq
 8001ef8:	f04f 0e09 	moveq.w	lr, #9
 8001efc:	f04f 0e0a 	movne.w	lr, #10
 8001f00:	e733      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f02:	f04f 0e01 	mov.w	lr, #1
 8001f06:	e730      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f08:	f04f 0e02 	mov.w	lr, #2
 8001f0c:	e72d      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f0e:	f04f 0e03 	mov.w	lr, #3
 8001f12:	e72a      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f14:	f04f 0e04 	mov.w	lr, #4
 8001f18:	e727      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f1a:	f04f 0e05 	mov.w	lr, #5
 8001f1e:	e724      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f20:	f04f 0e06 	mov.w	lr, #6
 8001f24:	e721      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f26:	f04f 0e07 	mov.w	lr, #7
 8001f2a:	e71e      	b.n	8001d6a <HAL_GPIO_Init+0x46>
 8001f2c:	f04f 0e08 	mov.w	lr, #8
 8001f30:	e71b      	b.n	8001d6a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001f32:	b003      	add	sp, #12
 8001f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013c00 	.word	0x40013c00
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40021c00 	.word	0x40021c00

08001f4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	b10a      	cbz	r2, 8001f52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	6181      	str	r1, [r0, #24]
 8001f50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	0409      	lsls	r1, r1, #16
 8001f54:	6181      	str	r1, [r0, #24]
  }
}
 8001f56:	4770      	bx	lr

08001f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	f000 8090 	beq.w	8002082 <HAL_PCD_Init+0x12a>
 8001f62:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f64:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f66:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001f6a:	b33b      	cbz	r3, 8001fbc <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f74:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001f78:	bf04      	itt	eq
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7e:	6828      	ldr	r0, [r5, #0]
 8001f80:	f000 fcdf 	bl	8002942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	462c      	mov	r4, r5
 8001f86:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f8a:	46ec      	mov	ip, sp
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fa0:	1d2b      	adds	r3, r5, #4
 8001fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	f000 fc87 	bl	80028b8 <USB_CoreInit>
 8001faa:	4604      	mov	r4, r0
 8001fac:	b158      	cbz	r0, 8001fc6 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fb4:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	b00a      	add	sp, #40	; 0x28
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fbc:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001fc0:	f7fe fc5a 	bl	8000878 <HAL_PCD_MspInit>
 8001fc4:	e7d2      	b.n	8001f6c <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6828      	ldr	r0, [r5, #0]
 8001fca:	f000 fcc0 	bl	800294e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	6868      	ldr	r0, [r5, #4]
 8001fd0:	b398      	cbz	r0, 800203a <HAL_PCD_Init+0xe2>
 8001fd2:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001fd4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd8:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001fda:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fde:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001fe2:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001fe6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fea:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fee:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff2:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff4:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001ffa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001ffe:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002000:	3301      	adds	r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4283      	cmp	r3, r0
 8002006:	d3e8      	bcc.n	8001fda <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8002008:	2200      	movs	r2, #0
 800200a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800200e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002012:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002016:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 800201e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002022:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002026:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800202a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800202e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002032:	3401      	adds	r4, #1
 8002034:	b2e4      	uxtb	r4, r4
 8002036:	4284      	cmp	r4, r0
 8002038:	d3e7      	bcc.n	800200a <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203a:	462c      	mov	r4, r5
 800203c:	f854 6b10 	ldr.w	r6, [r4], #16
 8002040:	46ec      	mov	ip, sp
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800204e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002052:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002056:	1d2b      	adds	r3, r5, #4
 8002058:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205a:	4630      	mov	r0, r6
 800205c:	f000 fcfe 	bl	8002a5c <USB_DevInit>
 8002060:	4604      	mov	r4, r0
 8002062:	b120      	cbz	r0, 800206e <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002064:	2302      	movs	r3, #2
 8002066:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 800206a:	2401      	movs	r4, #1
 800206c:	e7a3      	b.n	8001fb6 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002074:	2301      	movs	r3, #1
 8002076:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800207a:	6828      	ldr	r0, [r5, #0]
 800207c:	f000 fdba 	bl	8002bf4 <USB_DevDisconnect>
  return HAL_OK;
 8002080:	e799      	b.n	8001fb6 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8002082:	2401      	movs	r4, #1
 8002084:	e797      	b.n	8001fb6 <HAL_PCD_Init+0x5e>
	...

08002088 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	2800      	cmp	r0, #0
 800208a:	f000 81e1 	beq.w	8002450 <HAL_RCC_OscConfig+0x3c8>
{
 800208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	6803      	ldr	r3, [r0, #0]
 8002098:	f013 0f01 	tst.w	r3, #1
 800209c:	d03b      	beq.n	8002116 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	4b9f      	ldr	r3, [pc, #636]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d02c      	beq.n	8002104 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4b9c      	ldr	r3, [pc, #624]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d021      	beq.n	80020fa <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d04f      	beq.n	800215e <HAL_RCC_OscConfig+0xd6>
 80020be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c2:	d052      	beq.n	800216a <HAL_RCC_OscConfig+0xe2>
 80020c4:	4b95      	ldr	r3, [pc, #596]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d6:	6863      	ldr	r3, [r4, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d050      	beq.n	800217e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff76 	bl	8000fcc <HAL_GetTick>
 80020e0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4e8e      	ldr	r6, [pc, #568]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80020e4:	6833      	ldr	r3, [r6, #0]
 80020e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020ea:	d114      	bne.n	8002116 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe ff6e 	bl	8000fcc <HAL_GetTick>
 80020f0:	1b40      	subs	r0, r0, r5
 80020f2:	2864      	cmp	r0, #100	; 0x64
 80020f4:	d9f6      	bls.n	80020e4 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80020f6:	2003      	movs	r0, #3
 80020f8:	e1b1      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002102:	d0d8      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800210c:	d003      	beq.n	8002116 <HAL_RCC_OscConfig+0x8e>
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 819f 	beq.w	8002454 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	f013 0f02 	tst.w	r3, #2
 800211c:	d054      	beq.n	80021c8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211e:	4b7f      	ldr	r3, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f013 0f0c 	tst.w	r3, #12
 8002126:	d03e      	beq.n	80021a6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002128:	4b7c      	ldr	r3, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002130:	2b08      	cmp	r3, #8
 8002132:	d033      	beq.n	800219c <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002134:	68e3      	ldr	r3, [r4, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d068      	beq.n	800220c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213a:	4b79      	ldr	r3, [pc, #484]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe ff44 	bl	8000fcc <HAL_GetTick>
 8002144:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4e75      	ldr	r6, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002148:	6833      	ldr	r3, [r6, #0]
 800214a:	f013 0f02 	tst.w	r3, #2
 800214e:	d154      	bne.n	80021fa <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7fe ff3c 	bl	8000fcc <HAL_GetTick>
 8002154:	1b40      	subs	r0, r0, r5
 8002156:	2802      	cmp	r0, #2
 8002158:	d9f6      	bls.n	8002148 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800215a:	2003      	movs	r0, #3
 800215c:	e17f      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	4a6f      	ldr	r2, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e7b5      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e>
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e7ab      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800217e:	f7fe ff25 	bl	8000fcc <HAL_GetTick>
 8002182:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002184:	4e65      	ldr	r6, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002186:	6833      	ldr	r3, [r6, #0]
 8002188:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800218c:	d0c3      	beq.n	8002116 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218e:	f7fe ff1d 	bl	8000fcc <HAL_GetTick>
 8002192:	1b40      	subs	r0, r0, r5
 8002194:	2864      	cmp	r0, #100	; 0x64
 8002196:	d9f6      	bls.n	8002186 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8002198:	2003      	movs	r0, #3
 800219a:	e160      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219c:	4b5f      	ldr	r3, [pc, #380]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021a4:	d1c6      	bne.n	8002134 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f013 0f02 	tst.w	r3, #2
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_OscConfig+0x130>
 80021b0:	68e3      	ldr	r3, [r4, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	f040 8150 	bne.w	8002458 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	6921      	ldr	r1, [r4, #16]
 80021be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021c6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	f013 0f08 	tst.w	r3, #8
 80021ce:	d042      	beq.n	8002256 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d0:	6963      	ldr	r3, [r4, #20]
 80021d2:	b36b      	cbz	r3, 8002230 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe fef6 	bl	8000fcc <HAL_GetTick>
 80021e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	4e4e      	ldr	r6, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80021e4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021e6:	f013 0f02 	tst.w	r3, #2
 80021ea:	d134      	bne.n	8002256 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe feee 	bl	8000fcc <HAL_GetTick>
 80021f0:	1b40      	subs	r0, r0, r5
 80021f2:	2802      	cmp	r0, #2
 80021f4:	d9f6      	bls.n	80021e4 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
 80021f8:	e131      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fa:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	6921      	ldr	r1, [r4, #16]
 8002200:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002204:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e7dd      	b.n	80021c8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800220c:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002212:	f7fe fedb 	bl	8000fcc <HAL_GetTick>
 8002216:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002218:	4e40      	ldr	r6, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800221a:	6833      	ldr	r3, [r6, #0]
 800221c:	f013 0f02 	tst.w	r3, #2
 8002220:	d0d2      	beq.n	80021c8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe fed3 	bl	8000fcc <HAL_GetTick>
 8002226:	1b40      	subs	r0, r0, r5
 8002228:	2802      	cmp	r0, #2
 800222a:	d9f6      	bls.n	800221a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e116      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x298>)
 8002232:	2200      	movs	r2, #0
 8002234:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7fe fec8 	bl	8000fcc <HAL_GetTick>
 800223c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	4e37      	ldr	r6, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002240:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002242:	f013 0f02 	tst.w	r3, #2
 8002246:	d006      	beq.n	8002256 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe fec0 	bl	8000fcc <HAL_GetTick>
 800224c:	1b40      	subs	r0, r0, r5
 800224e:	2802      	cmp	r0, #2
 8002250:	d9f6      	bls.n	8002240 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8002252:	2003      	movs	r0, #3
 8002254:	e103      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f013 0f04 	tst.w	r3, #4
 800225c:	d076      	beq.n	800234c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b2f      	ldr	r3, [pc, #188]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002266:	d133      	bne.n	80022d0 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800226e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002280:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_RCC_OscConfig+0x29c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f413 7f80 	tst.w	r3, #256	; 0x100
 800228a:	d023      	beq.n	80022d4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d034      	beq.n	80022fc <HAL_RCC_OscConfig+0x274>
 8002292:	2b05      	cmp	r3, #5
 8002294:	d038      	beq.n	8002308 <HAL_RCC_OscConfig+0x280>
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x294>)
 8002298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	671a      	str	r2, [r3, #112]	; 0x70
 80022a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022a2:	f022 0204 	bic.w	r2, r2, #4
 80022a6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a8:	68a3      	ldr	r3, [r4, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03c      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7fe fe8d 	bl	8000fcc <HAL_GetTick>
 80022b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4f19      	ldr	r7, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022bc:	f013 0f02 	tst.w	r3, #2
 80022c0:	d143      	bne.n	800234a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe fe83 	bl	8000fcc <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	4540      	cmp	r0, r8
 80022ca:	d9f6      	bls.n	80022ba <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80022cc:	2003      	movs	r0, #3
 80022ce:	e0c6      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80022d0:	2500      	movs	r5, #0
 80022d2:	e7d6      	b.n	8002282 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_RCC_OscConfig+0x29c>)
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022de:	f7fe fe75 	bl	8000fcc <HAL_GetTick>
 80022e2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4f0f      	ldr	r7, [pc, #60]	; (8002324 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022ec:	d1ce      	bne.n	800228c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe fe6d 	bl	8000fcc <HAL_GetTick>
 80022f2:	1b80      	subs	r0, r0, r6
 80022f4:	2802      	cmp	r0, #2
 80022f6:	d9f6      	bls.n	80022e6 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80022f8:	2003      	movs	r0, #3
 80022fa:	e0b0      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_RCC_OscConfig+0x294>)
 80022fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	e7cf      	b.n	80022a8 <HAL_RCC_OscConfig+0x220>
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x294>)
 800230a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800230c:	f042 0204 	orr.w	r2, r2, #4
 8002310:	671a      	str	r2, [r3, #112]	; 0x70
 8002312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	671a      	str	r2, [r3, #112]	; 0x70
 800231a:	e7c5      	b.n	80022a8 <HAL_RCC_OscConfig+0x220>
 800231c:	40023800 	.word	0x40023800
 8002320:	42470000 	.word	0x42470000
 8002324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe fe50 	bl	8000fcc <HAL_GetTick>
 800232c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4f52      	ldr	r7, [pc, #328]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002336:	f013 0f02 	tst.w	r3, #2
 800233a:	d006      	beq.n	800234a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fe46 	bl	8000fcc <HAL_GetTick>
 8002340:	1b80      	subs	r0, r0, r6
 8002342:	4540      	cmp	r0, r8
 8002344:	d9f6      	bls.n	8002334 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e089      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234a:	b9ed      	cbnz	r5, 8002388 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	69a3      	ldr	r3, [r4, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8084 	beq.w	800245c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002354:	4a48      	ldr	r2, [pc, #288]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 8002356:	6892      	ldr	r2, [r2, #8]
 8002358:	f002 020c 	and.w	r2, r2, #12
 800235c:	2a08      	cmp	r2, #8
 800235e:	d051      	beq.n	8002404 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	2b02      	cmp	r3, #2
 8002362:	d017      	beq.n	8002394 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b45      	ldr	r3, [pc, #276]	; (800247c <HAL_RCC_OscConfig+0x3f4>)
 8002366:	2200      	movs	r2, #0
 8002368:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fe2f 	bl	8000fcc <HAL_GetTick>
 800236e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002370:	4d41      	ldr	r5, [pc, #260]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 8002372:	682b      	ldr	r3, [r5, #0]
 8002374:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002378:	d042      	beq.n	8002400 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fe27 	bl	8000fcc <HAL_GetTick>
 800237e:	1b00      	subs	r0, r0, r4
 8002380:	2802      	cmp	r0, #2
 8002382:	d9f6      	bls.n	8002372 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002384:	2003      	movs	r0, #3
 8002386:	e06a      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 800238a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	e7db      	b.n	800234c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x3f4>)
 8002396:	2200      	movs	r2, #0
 8002398:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800239a:	f7fe fe17 	bl	8000fcc <HAL_GetTick>
 800239e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a0:	4e35      	ldr	r6, [pc, #212]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023a2:	6833      	ldr	r3, [r6, #0]
 80023a4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023a8:	d006      	beq.n	80023b8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fe0f 	bl	8000fcc <HAL_GetTick>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	2802      	cmp	r0, #2
 80023b2:	d9f6      	bls.n	80023a2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80023b4:	2003      	movs	r0, #3
 80023b6:	e052      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	69e3      	ldr	r3, [r4, #28]
 80023ba:	6a22      	ldr	r2, [r4, #32]
 80023bc:	4313      	orrs	r3, r2
 80023be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023c0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023cc:	0852      	lsrs	r2, r2, #1
 80023ce:	3a01      	subs	r2, #1
 80023d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023d6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x3f4>)
 80023da:	2201      	movs	r2, #1
 80023dc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023de:	f7fe fdf5 	bl	8000fcc <HAL_GetTick>
 80023e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4d24      	ldr	r5, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fded 	bl	8000fcc <HAL_GetTick>
 80023f2:	1b00      	subs	r0, r0, r4
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d9f6      	bls.n	80023e6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80023f8:	2003      	movs	r0, #3
 80023fa:	e030      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2000      	movs	r0, #0
 80023fe:	e02e      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
 8002400:	2000      	movs	r0, #0
 8002402:	e02c      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	2b01      	cmp	r3, #1
 8002406:	d02d      	beq.n	8002464 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x3f0>)
 800240a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002410:	69e2      	ldr	r2, [r4, #28]
 8002412:	4291      	cmp	r1, r2
 8002414:	d128      	bne.n	8002468 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	6a21      	ldr	r1, [r4, #32]
 800241c:	428a      	cmp	r2, r1
 800241e:	d125      	bne.n	800246c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002420:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002422:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002426:	401a      	ands	r2, r3
 8002428:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800242c:	d120      	bne.n	8002470 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002432:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002434:	0852      	lsrs	r2, r2, #1
 8002436:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002438:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800243c:	d11a      	bne.n	8002474 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800243e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002440:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002448:	bf14      	ite	ne
 800244a:	2001      	movne	r0, #1
 800244c:	2000      	moveq	r0, #0
 800244e:	e006      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
}
 8002452:	4770      	bx	lr
        return HAL_ERROR;
 8002454:	2001      	movs	r0, #1
 8002456:	e002      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 800245c:	2000      	movs	r0, #0
}
 800245e:	b002      	add	sp, #8
 8002460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
 8002466:	e7fa      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e7f8      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
 800246c:	2001      	movs	r0, #1
 800246e:	e7f6      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
 8002470:	2001      	movs	r0, #1
 8002472:	e7f4      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
 8002474:	2001      	movs	r0, #1
 8002476:	e7f2      	b.n	800245e <HAL_RCC_OscConfig+0x3d6>
 8002478:	40023800 	.word	0x40023800
 800247c:	42470000 	.word	0x42470000

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d057      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0xbe>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d157      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024a0:	d02a      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024aa:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024ae:	ebb1 000c 	subs.w	r0, r1, ip
 80024b2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024b6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024be:	0181      	lsls	r1, r0, #6
 80024c0:	1a09      	subs	r1, r1, r0
 80024c2:	eb63 030e 	sbc.w	r3, r3, lr
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024cc:	00c9      	lsls	r1, r1, #3
 80024ce:	eb11 0c0c 	adds.w	ip, r1, ip
 80024d2:	f143 0300 	adc.w	r3, r3, #0
 80024d6:	0259      	lsls	r1, r3, #9
 80024d8:	2300      	movs	r3, #0
 80024da:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80024de:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80024e2:	f7fd fedd 	bl	80002a0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80024f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024f6:	e025      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002500:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002504:	ebb1 000c 	subs.w	r0, r1, ip
 8002508:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800250c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002514:	0181      	lsls	r1, r0, #6
 8002516:	1a09      	subs	r1, r1, r0
 8002518:	eb63 030e 	sbc.w	r3, r3, lr
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002522:	00c9      	lsls	r1, r1, #3
 8002524:	eb11 0c0c 	adds.w	ip, r1, ip
 8002528:	f143 0300 	adc.w	r3, r3, #0
 800252c:	0299      	lsls	r1, r3, #10
 800252e:	2300      	movs	r3, #0
 8002530:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002534:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002538:	f7fd feb2 	bl	80002a0 <__aeabi_uldivmod>
 800253c:	e7d3      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4803      	ldr	r0, [pc, #12]	; (800254c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002540:	e000      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002544:	bd08      	pop	{r3, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	007a1200 	.word	0x007a1200
 8002550:	00f42400 	.word	0x00f42400

08002554 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002554:	2800      	cmp	r0, #0
 8002556:	f000 809d 	beq.w	8002694 <HAL_RCC_ClockConfig+0x140>
{
 800255a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255e:	460d      	mov	r5, r1
 8002560:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002562:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	428b      	cmp	r3, r1
 800256c:	d208      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	b2cb      	uxtb	r3, r1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 8002572:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	428b      	cmp	r3, r1
 800257c:	f040 808c 	bne.w	8002698 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f013 0f02 	tst.w	r3, #2
 8002586:	d017      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	f013 0f04 	tst.w	r3, #4
 800258c:	d004      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258e:	4a46      	ldr	r2, [pc, #280]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 8002590:	6893      	ldr	r3, [r2, #8]
 8002592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002596:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f013 0f08 	tst.w	r3, #8
 800259e:	d004      	beq.n	80025aa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4a41      	ldr	r2, [pc, #260]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 80025a2:	6893      	ldr	r3, [r2, #8]
 80025a4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025aa:	4a3f      	ldr	r2, [pc, #252]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 80025ac:	6893      	ldr	r3, [r2, #8]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b2:	68a1      	ldr	r1, [r4, #8]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	f013 0f01 	tst.w	r3, #1
 80025be:	d032      	beq.n	8002626 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	6862      	ldr	r2, [r4, #4]
 80025c2:	2a01      	cmp	r2, #1
 80025c4:	d021      	beq.n	800260a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	1e93      	subs	r3, r2, #2
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d925      	bls.n	8002618 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f013 0f02 	tst.w	r3, #2
 80025d4:	d062      	beq.n	800269c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4934      	ldr	r1, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 80025d8:	688b      	ldr	r3, [r1, #8]
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025e2:	f7fe fcf3 	bl	8000fcc <HAL_GetTick>
 80025e6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e8:	4f2f      	ldr	r7, [pc, #188]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	6862      	ldr	r2, [r4, #4]
 80025f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025fa:	d014      	beq.n	8002626 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fce6 	bl	8000fcc <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	4540      	cmp	r0, r8
 8002604:	d9f3      	bls.n	80025ee <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002606:	2003      	movs	r0, #3
 8002608:	e042      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002612:	d1e0      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
 8002616:	e03b      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002620:	d1d9      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
 8002624:	e034      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	42ab      	cmp	r3, r5
 8002630:	d907      	bls.n	8002642 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	b2ea      	uxtb	r2, r5
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_ClockConfig+0x150>)
 8002636:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	42ab      	cmp	r3, r5
 8002640:	d12e      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f013 0f04 	tst.w	r3, #4
 8002648:	d006      	beq.n	8002658 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 800264c:	6893      	ldr	r3, [r2, #8]
 800264e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002652:	68e1      	ldr	r1, [r4, #12]
 8002654:	430b      	orrs	r3, r1
 8002656:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	f013 0f08 	tst.w	r3, #8
 800265e:	d007      	beq.n	8002670 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 8002662:	6893      	ldr	r3, [r2, #8]
 8002664:	6921      	ldr	r1, [r4, #16]
 8002666:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800266a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800266e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002670:	f7ff ff06 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_ClockConfig+0x154>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x158>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	40d8      	lsrs	r0, r3
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_ClockConfig+0x15c>)
 8002684:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x160>)
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f7fe fc53 	bl	8000f34 <HAL_InitTick>
  return HAL_OK;
 800268e:	2000      	movs	r0, #0
}
 8002690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
}
 8002696:	4770      	bx	lr
      return HAL_ERROR;
 8002698:	2001      	movs	r0, #1
 800269a:	e7f9      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800269c:	2001      	movs	r0, #1
 800269e:	e7f7      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80026a0:	2001      	movs	r0, #1
 80026a2:	e7f5      	b.n	8002690 <HAL_RCC_ClockConfig+0x13c>
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	0800b170 	.word	0x0800b170
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026cc:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026d2:	6810      	ldr	r0, [r2, #0]
}
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	4770      	bx	lr
 80026d8:	40023800 	.word	0x40023800
 80026dc:	0800b180 	.word	0x0800b180
 80026e0:	20000000 	.word	0x20000000

080026e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026ec:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80026ee:	5cd3      	ldrb	r3, [r2, r3]
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026f2:	6810      	ldr	r0, [r2, #0]
}
 80026f4:	40d8      	lsrs	r0, r3
 80026f6:	4770      	bx	lr
 80026f8:	40023800 	.word	0x40023800
 80026fc:	0800b180 	.word	0x0800b180
 8002700:	20000000 	.word	0x20000000

08002704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002708:	6802      	ldr	r2, [r0, #0]
 800270a:	6913      	ldr	r3, [r2, #16]
 800270c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002710:	68c1      	ldr	r1, [r0, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002716:	6801      	ldr	r1, [r0, #0]
 8002718:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271a:	6883      	ldr	r3, [r0, #8]
 800271c:	6900      	ldr	r0, [r0, #16]
 800271e:	4303      	orrs	r3, r0
 8002720:	6960      	ldr	r0, [r4, #20]
 8002722:	4303      	orrs	r3, r0
 8002724:	69e0      	ldr	r0, [r4, #28]
 8002726:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002728:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800272c:	f022 020c 	bic.w	r2, r2, #12
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	6953      	ldr	r3, [r2, #20]
 8002738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273c:	69a1      	ldr	r1, [r4, #24]
 800273e:	430b      	orrs	r3, r1
 8002740:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002742:	6823      	ldr	r3, [r4, #0]
 8002744:	4a2e      	ldr	r2, [pc, #184]	; (8002800 <UART_SetConfig+0xfc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d006      	beq.n	8002758 <UART_SetConfig+0x54>
 800274a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800274e:	4293      	cmp	r3, r2
 8002750:	d002      	beq.n	8002758 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002752:	f7ff ffb7 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8002756:	e001      	b.n	800275c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002758:	f7ff ffc4 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800275c:	69e3      	ldr	r3, [r4, #28]
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d024      	beq.n	80027ae <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002764:	2100      	movs	r1, #0
 8002766:	1803      	adds	r3, r0, r0
 8002768:	4149      	adcs	r1, r1
 800276a:	181b      	adds	r3, r3, r0
 800276c:	f141 0100 	adc.w	r1, r1, #0
 8002770:	00c9      	lsls	r1, r1, #3
 8002772:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1818      	adds	r0, r3, r0
 800277a:	6863      	ldr	r3, [r4, #4]
 800277c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002780:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002784:	f141 0100 	adc.w	r1, r1, #0
 8002788:	f7fd fd8a 	bl	80002a0 <__aeabi_uldivmod>
 800278c:	6821      	ldr	r1, [r4, #0]
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <UART_SetConfig+0x100>)
 8002790:	fba2 4300 	umull	r4, r3, r2, r0
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2464      	movs	r4, #100	; 0x64
 8002798:	fb04 0013 	mls	r0, r4, r3, r0
 800279c:	0100      	lsls	r0, r0, #4
 800279e:	3032      	adds	r0, #50	; 0x32
 80027a0:	fba2 2000 	umull	r2, r0, r2, r0
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80027aa:	6088      	str	r0, [r1, #8]
  }
}
 80027ac:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ae:	2300      	movs	r3, #0
 80027b0:	1802      	adds	r2, r0, r0
 80027b2:	eb43 0103 	adc.w	r1, r3, r3
 80027b6:	1812      	adds	r2, r2, r0
 80027b8:	f141 0100 	adc.w	r1, r1, #0
 80027bc:	00c9      	lsls	r1, r1, #3
 80027be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027c2:	00d2      	lsls	r2, r2, #3
 80027c4:	1810      	adds	r0, r2, r0
 80027c6:	f141 0100 	adc.w	r1, r1, #0
 80027ca:	6862      	ldr	r2, [r4, #4]
 80027cc:	1892      	adds	r2, r2, r2
 80027ce:	415b      	adcs	r3, r3
 80027d0:	f7fd fd66 	bl	80002a0 <__aeabi_uldivmod>
 80027d4:	4d0b      	ldr	r5, [pc, #44]	; (8002804 <UART_SetConfig+0x100>)
 80027d6:	fba5 3200 	umull	r3, r2, r5, r0
 80027da:	0951      	lsrs	r1, r2, #5
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	fb03 0311 	mls	r3, r3, r1, r0
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	3332      	adds	r3, #50	; 0x32
 80027e6:	fba5 2303 	umull	r2, r3, r5, r3
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80027f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fa:	4413      	add	r3, r2
 80027fc:	6083      	str	r3, [r0, #8]
 80027fe:	e7d5      	b.n	80027ac <UART_SetConfig+0xa8>
 8002800:	40011000 	.word	0x40011000
 8002804:	51eb851f 	.word	0x51eb851f

08002808 <HAL_UART_Init>:
  if (huart == NULL)
 8002808:	b358      	cbz	r0, 8002862 <HAL_UART_Init+0x5a>
{
 800280a:	b510      	push	{r4, lr}
 800280c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800280e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002812:	b30b      	cbz	r3, 8002858 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	2324      	movs	r3, #36	; 0x24
 8002816:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800281a:	6822      	ldr	r2, [r4, #0]
 800281c:	68d3      	ldr	r3, [r2, #12]
 800281e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002822:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff6d 	bl	8002704 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282a:	6822      	ldr	r2, [r4, #0]
 800282c:	6913      	ldr	r3, [r2, #16]
 800282e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002832:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	6953      	ldr	r3, [r2, #20]
 8002838:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800283c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800283e:	6822      	ldr	r2, [r4, #0]
 8002840:	68d3      	ldr	r3, [r2, #12]
 8002842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002846:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	2000      	movs	r0, #0
 800284a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800284c:	2320      	movs	r3, #32
 800284e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002852:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002856:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002858:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800285c:	f7fd ffd4 	bl	8000808 <HAL_UART_MspInit>
 8002860:	e7d8      	b.n	8002814 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002862:	2001      	movs	r0, #1
}
 8002864:	4770      	bx	lr
	...

08002868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002868:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 800286e:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <USB_CoreReset+0x4c>)
    count++;
 8002870:	9b01      	ldr	r3, [sp, #4]
 8002872:	3301      	adds	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002876:	9b01      	ldr	r3, [sp, #4]
 8002878:	4293      	cmp	r3, r2
 800287a:	d815      	bhi.n	80028a8 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800287c:	6903      	ldr	r3, [r0, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	daf6      	bge.n	8002870 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002886:	6903      	ldr	r3, [r0, #16]
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <USB_CoreReset+0x4c>)
    count++;
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	3301      	adds	r3, #1
 8002894:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002896:	9b01      	ldr	r3, [sp, #4]
 8002898:	4293      	cmp	r3, r2
 800289a:	d808      	bhi.n	80028ae <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800289c:	6903      	ldr	r3, [r0, #16]
 800289e:	f013 0f01 	tst.w	r3, #1
 80028a2:	d1f5      	bne.n	8002890 <USB_CoreReset+0x28>

  return HAL_OK;
 80028a4:	2000      	movs	r0, #0
 80028a6:	e000      	b.n	80028aa <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 80028a8:	2003      	movs	r0, #3
}
 80028aa:	b002      	add	sp, #8
 80028ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028ae:	2003      	movs	r0, #3
 80028b0:	e7fb      	b.n	80028aa <USB_CoreReset+0x42>
 80028b2:	bf00      	nop
 80028b4:	00030d40 	.word	0x00030d40

080028b8 <USB_CoreInit>:
{
 80028b8:	b084      	sub	sp, #16
 80028ba:	b510      	push	{r4, lr}
 80028bc:	4604      	mov	r4, r0
 80028be:	a803      	add	r0, sp, #12
 80028c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80028c4:	9b08      	ldr	r3, [sp, #32]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d11f      	bne.n	800290a <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028d2:	68e3      	ldr	r3, [r4, #12]
 80028d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80028d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028dc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028de:	68e3      	ldr	r3, [r4, #12]
 80028e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80028e4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80028e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d009      	beq.n	8002900 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff ffbb 	bl	8002868 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80028f2:	9b06      	ldr	r3, [sp, #24]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d01b      	beq.n	8002930 <USB_CoreInit+0x78>
}
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	b004      	add	sp, #16
 80028fe:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002900:	68e3      	ldr	r3, [r4, #12]
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002906:	60e3      	str	r3, [r4, #12]
 8002908:	e7f0      	b.n	80028ec <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800290a:	68e3      	ldr	r3, [r4, #12]
 800290c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002910:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff ffa8 	bl	8002868 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800291a:	b923      	cbnz	r3, 8002926 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800291c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	63a3      	str	r3, [r4, #56]	; 0x38
 8002924:	e7e5      	b.n	80028f2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292c:	63a3      	str	r3, [r4, #56]	; 0x38
 800292e:	e7e0      	b.n	80028f2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002930:	68a3      	ldr	r3, [r4, #8]
 8002932:	f043 0306 	orr.w	r3, r3, #6
 8002936:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002938:	68a3      	ldr	r3, [r4, #8]
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	60a3      	str	r3, [r4, #8]
 8002940:	e7da      	b.n	80028f8 <USB_CoreInit+0x40>

08002942 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002942:	6883      	ldr	r3, [r0, #8]
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6083      	str	r3, [r0, #8]
}
 800294a:	2000      	movs	r0, #0
 800294c:	4770      	bx	lr

0800294e <USB_SetCurrentMode>:
{
 800294e:	b570      	push	{r4, r5, r6, lr}
 8002950:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002952:	68c3      	ldr	r3, [r0, #12]
 8002954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002958:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800295a:	2901      	cmp	r1, #1
 800295c:	d015      	beq.n	800298a <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 800295e:	bb29      	cbnz	r1, 80029ac <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002960:	68c3      	ldr	r3, [r0, #12]
 8002962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002966:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002968:	2400      	movs	r4, #0
      HAL_Delay(1U);
 800296a:	2601      	movs	r6, #1
 800296c:	4630      	mov	r0, r6
 800296e:	f7fe fb33 	bl	8000fd8 <HAL_Delay>
      ms++;
 8002972:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002974:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002976:	f013 0f01 	tst.w	r3, #1
 800297a:	d001      	beq.n	8002980 <USB_SetCurrentMode+0x32>
 800297c:	2c32      	cmp	r4, #50	; 0x32
 800297e:	d1f5      	bne.n	800296c <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002980:	2c32      	cmp	r4, #50	; 0x32
 8002982:	bf14      	ite	ne
 8002984:	2000      	movne	r0, #0
 8002986:	2001      	moveq	r0, #1
}
 8002988:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800298a:	68c3      	ldr	r3, [r0, #12]
 800298c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002990:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002992:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002994:	2601      	movs	r6, #1
 8002996:	4630      	mov	r0, r6
 8002998:	f7fe fb1e 	bl	8000fd8 <HAL_Delay>
      ms++;
 800299c:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 800299e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80029a0:	f013 0f01 	tst.w	r3, #1
 80029a4:	d1ec      	bne.n	8002980 <USB_SetCurrentMode+0x32>
 80029a6:	2c32      	cmp	r4, #50	; 0x32
 80029a8:	d1f5      	bne.n	8002996 <USB_SetCurrentMode+0x48>
 80029aa:	e7e9      	b.n	8002980 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 80029ac:	2001      	movs	r0, #1
 80029ae:	e7eb      	b.n	8002988 <USB_SetCurrentMode+0x3a>

080029b0 <USB_FlushTxFifo>:
{
 80029b0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80029b6:	4a11      	ldr	r2, [pc, #68]	; (80029fc <USB_FlushTxFifo+0x4c>)
    count++;
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	3301      	adds	r3, #1
 80029bc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80029be:	9b01      	ldr	r3, [sp, #4]
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d815      	bhi.n	80029f0 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80029c4:	6903      	ldr	r3, [r0, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	daf6      	bge.n	80029b8 <USB_FlushTxFifo+0x8>
  count = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80029ce:	0189      	lsls	r1, r1, #6
 80029d0:	f041 0120 	orr.w	r1, r1, #32
 80029d4:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <USB_FlushTxFifo+0x4c>)
    count++;
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	3301      	adds	r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80029de:	9b01      	ldr	r3, [sp, #4]
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d808      	bhi.n	80029f6 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80029e4:	6903      	ldr	r3, [r0, #16]
 80029e6:	f013 0f20 	tst.w	r3, #32
 80029ea:	d1f5      	bne.n	80029d8 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80029ec:	2000      	movs	r0, #0
 80029ee:	e000      	b.n	80029f2 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 80029f0:	2003      	movs	r0, #3
}
 80029f2:	b002      	add	sp, #8
 80029f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
 80029f8:	e7fb      	b.n	80029f2 <USB_FlushTxFifo+0x42>
 80029fa:	bf00      	nop
 80029fc:	00030d40 	.word	0x00030d40

08002a00 <USB_FlushRxFifo>:
{
 8002a00:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <USB_FlushRxFifo+0x48>)
    count++;
 8002a08:	9b01      	ldr	r3, [sp, #4]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d813      	bhi.n	8002a3c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a14:	6903      	ldr	r3, [r0, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	daf6      	bge.n	8002a08 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <USB_FlushRxFifo+0x48>)
    count++;
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	3301      	adds	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d808      	bhi.n	8002a42 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a30:	6903      	ldr	r3, [r0, #16]
 8002a32:	f013 0f10 	tst.w	r3, #16
 8002a36:	d1f5      	bne.n	8002a24 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e000      	b.n	8002a3e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
}
 8002a3e:	b002      	add	sp, #8
 8002a40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
 8002a44:	e7fb      	b.n	8002a3e <USB_FlushRxFifo+0x3e>
 8002a46:	bf00      	nop
 8002a48:	00030d40 	.word	0x00030d40

08002a4c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002a4c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002a50:	4319      	orrs	r1, r3
 8002a52:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002a56:	2000      	movs	r0, #0
 8002a58:	4770      	bx	lr
	...

08002a5c <USB_DevInit>:
{
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a62:	4604      	mov	r4, r0
 8002a64:	a809      	add	r0, sp, #36	; 0x24
 8002a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002a6a:	460d      	mov	r5, r1
 8002a6c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002a6e:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002a70:	4619      	mov	r1, r3
 8002a72:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002a76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002a7a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	2b0f      	cmp	r3, #15
 8002a80:	d1f7      	bne.n	8002a72 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002a82:	bb26      	cbnz	r6, 8002ace <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a84:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a96:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a9e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002aae:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002ab2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002ab6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d114      	bne.n	8002aea <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ac2:	b96b      	cbnz	r3, 8002ae0 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7ff ffc0 	bl	8002a4c <USB_SetDevSpeed>
 8002acc:	e011      	b.n	8002af2 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ace:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ad0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ad4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002adc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ade:	e7e3      	b.n	8002aa8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff ffb2 	bl	8002a4c <USB_SetDevSpeed>
 8002ae8:	e003      	b.n	8002af2 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002aea:	2103      	movs	r1, #3
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff ffad 	bl	8002a4c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002af2:	2110      	movs	r1, #16
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff5b 	bl	80029b0 <USB_FlushTxFifo>
 8002afa:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff ff7f 	bl	8002a00 <USB_FlushRxFifo>
 8002b02:	ea48 0800 	orr.w	r8, r8, r0
 8002b06:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8002b0a:	bf14      	ite	ne
 8002b0c:	f04f 0e01 	movne.w	lr, #1
 8002b10:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b18:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d03f      	beq.n	8002ba0 <USB_DevInit+0x144>
 8002b20:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8002b24:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b26:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b28:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b2c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b30:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002b34:	e00a      	b.n	8002b4c <USB_DevInit+0xf0>
      if (i == 0U)
 8002b36:	b182      	cbz	r2, 8002b5a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b38:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b3c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b40:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b44:	3201      	adds	r2, #1
 8002b46:	3320      	adds	r3, #32
 8002b48:	4295      	cmp	r5, r2
 8002b4a:	d009      	beq.n	8002b60 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	dbf0      	blt.n	8002b36 <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b54:	f8c3 c000 	str.w	ip, [r3]
 8002b58:	e7f0      	b.n	8002b3c <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b5a:	f8c3 a000 	str.w	sl, [r3]
 8002b5e:	e7ed      	b.n	8002b3c <USB_DevInit+0xe0>
 8002b60:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b64:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b66:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b68:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b6c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b70:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002b74:	e00a      	b.n	8002b8c <USB_DevInit+0x130>
      if (i == 0U)
 8002b76:	b182      	cbz	r2, 8002b9a <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b78:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b7c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b80:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b84:	3201      	adds	r2, #1
 8002b86:	3320      	adds	r3, #32
 8002b88:	4295      	cmp	r5, r2
 8002b8a:	d009      	beq.n	8002ba0 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	2800      	cmp	r0, #0
 8002b92:	dbf0      	blt.n	8002b76 <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b94:	f8c3 c000 	str.w	ip, [r3]
 8002b98:	e7f0      	b.n	8002b7c <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b9a:	f8c3 a000 	str.w	sl, [r3]
 8002b9e:	e7ed      	b.n	8002b7c <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba6:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bac:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002bb0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002bb4:	b91b      	cbnz	r3, 8002bbe <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bb6:	69a3      	ldr	r3, [r4, #24]
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002bbe:	69a2      	ldr	r2, [r4, #24]
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <USB_DevInit+0x194>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002bc8:	b11b      	cbz	r3, 8002bd2 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002bca:	69a3      	ldr	r3, [r4, #24]
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002bd2:	2e01      	cmp	r6, #1
 8002bd4:	d004      	beq.n	8002be0 <USB_DevInit+0x184>
}
 8002bd6:	4670      	mov	r0, lr
 8002bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	b004      	add	sp, #16
 8002bde:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002be0:	69a3      	ldr	r3, [r4, #24]
 8002be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	61a3      	str	r3, [r4, #24]
 8002bec:	e7f3      	b.n	8002bd6 <USB_DevInit+0x17a>
 8002bee:	bf00      	nop
 8002bf0:	803c3800 	.word	0x803c3800

08002bf4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002bf4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002bf8:	f023 0303 	bic.w	r3, r3, #3
 8002bfc:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c00:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	4770      	bx	lr

08002c10 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002c10:	4770      	bx	lr
	...

08002c14 <MX_LWIP_Init>:
{
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 8002c18:	4e2d      	ldr	r6, [pc, #180]	; (8002cd0 <MX_LWIP_Init+0xbc>)
 8002c1a:	21a9      	movs	r1, #169	; 0xa9
 8002c1c:	7031      	strb	r1, [r6, #0]
  IP_ADDRESS[1] = 254;
 8002c1e:	22fe      	movs	r2, #254	; 0xfe
 8002c20:	7072      	strb	r2, [r6, #1]
  IP_ADDRESS[2] = 101;
 8002c22:	2365      	movs	r3, #101	; 0x65
 8002c24:	70b3      	strb	r3, [r6, #2]
  IP_ADDRESS[3] = 115;
 8002c26:	2073      	movs	r0, #115	; 0x73
 8002c28:	70f0      	strb	r0, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8002c2a:	4d2a      	ldr	r5, [pc, #168]	; (8002cd4 <MX_LWIP_Init+0xc0>)
 8002c2c:	20ff      	movs	r0, #255	; 0xff
 8002c2e:	7028      	strb	r0, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8002c30:	7068      	strb	r0, [r5, #1]
  NETMASK_ADDRESS[2] = 0;
 8002c32:	2700      	movs	r7, #0
 8002c34:	70af      	strb	r7, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 8002c36:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 8002c38:	4c27      	ldr	r4, [pc, #156]	; (8002cd8 <MX_LWIP_Init+0xc4>)
 8002c3a:	7021      	strb	r1, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8002c3c:	7062      	strb	r2, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 8002c3e:	70a3      	strb	r3, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002c40:	2301      	movs	r3, #1
 8002c42:	70e3      	strb	r3, [r4, #3]
  lwip_init();
 8002c44:	f000 fad6 	bl	80031f4 <lwip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002c48:	7833      	ldrb	r3, [r6, #0]
 8002c4a:	7872      	ldrb	r2, [r6, #1]
 8002c4c:	f896 c003 	ldrb.w	ip, [r6, #3]
 8002c50:	78b0      	ldrb	r0, [r6, #2]
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <MX_LWIP_Init+0xc8>)
 8002c54:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8002c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c60:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002c62:	782b      	ldrb	r3, [r5, #0]
 8002c64:	7868      	ldrb	r0, [r5, #1]
 8002c66:	78ee      	ldrb	r6, [r5, #3]
 8002c68:	78ad      	ldrb	r5, [r5, #2]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <MX_LWIP_Init+0xcc>)
 8002c6c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002c70:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002c74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c78:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002c7a:	7820      	ldrb	r0, [r4, #0]
 8002c7c:	7865      	ldrb	r5, [r4, #1]
 8002c7e:	78e6      	ldrb	r6, [r4, #3]
 8002c80:	78a4      	ldrb	r4, [r4, #2]
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MX_LWIP_Init+0xd0>)
 8002c84:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8002c88:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002c8c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002c90:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002c92:	4c15      	ldr	r4, [pc, #84]	; (8002ce8 <MX_LWIP_Init+0xd4>)
 8002c94:	4815      	ldr	r0, [pc, #84]	; (8002cec <MX_LWIP_Init+0xd8>)
 8002c96:	9002      	str	r0, [sp, #8]
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <MX_LWIP_Init+0xdc>)
 8002c9a:	9001      	str	r0, [sp, #4]
 8002c9c:	9700      	str	r7, [sp, #0]
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f000 fe52 	bl	8003948 <netif_add>
  netif_set_default(&gnetif);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 fee7 	bl	8003a78 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8002caa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8002cae:	f013 0f04 	tst.w	r3, #4
 8002cb2:	d008      	beq.n	8002cc6 <MX_LWIP_Init+0xb2>
    netif_set_up(&gnetif);
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f000 fee5 	bl	8003a84 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002cba:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <MX_LWIP_Init+0xe0>)
 8002cbc:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <MX_LWIP_Init+0xd4>)
 8002cbe:	f000 ff61 	bl	8003b84 <netif_set_link_callback>
}
 8002cc2:	b005      	add	sp, #20
 8002cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8002cc6:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <MX_LWIP_Init+0xd4>)
 8002cc8:	f000 fefa 	bl	8003ac0 <netif_set_down>
 8002ccc:	e7f5      	b.n	8002cba <MX_LWIP_Init+0xa6>
 8002cce:	bf00      	nop
 8002cd0:	20000604 	.word	0x20000604
 8002cd4:	20000608 	.word	0x20000608
 8002cd8:	20000600 	.word	0x20000600
 8002cdc:	20000644 	.word	0x20000644
 8002ce0:	20000648 	.word	0x20000648
 8002ce4:	20000640 	.word	0x20000640
 8002ce8:	2000060c 	.word	0x2000060c
 8002cec:	08009ee5 	.word	0x08009ee5
 8002cf0:	08003021 	.word	0x08003021
 8002cf4:	08002c11 	.word	0x08002c11

08002cf8 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	4770      	bx	lr

08002cfc <low_level_output>:
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	460d      	mov	r5, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8002d02:	2230      	movs	r2, #48	; 0x30
 8002d04:	2100      	movs	r1, #0
 8002d06:	4668      	mov	r0, sp
 8002d08:	f007 f9ba 	bl	800a080 <memset>
  for(q = p; q != NULL; q = q->next)
 8002d0c:	b32d      	cbz	r5, 8002d5a <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 8002d0e:	686b      	ldr	r3, [r5, #4]
 8002d10:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 8002d12:	896b      	ldrh	r3, [r5, #10]
 8002d14:	9301      	str	r3, [sp, #4]
    if(i>0)
 8002d16:	ac03      	add	r4, sp, #12
  for(q = p; q != NULL; q = q->next)
 8002d18:	4629      	mov	r1, r5
    Txbuffer[i].len = q->len;
 8002d1a:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	e002      	b.n	8002d26 <low_level_output+0x2a>
 8002d20:	340c      	adds	r4, #12
 8002d22:	3301      	adds	r3, #1
{
 8002d24:	4611      	mov	r1, r2
    if(q->next == NULL)
 8002d26:	680a      	ldr	r2, [r1, #0]
 8002d28:	b192      	cbz	r2, 8002d50 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d021      	beq.n	8002d72 <low_level_output+0x76>
    Txbuffer[i].buffer = q->payload;
 8002d2e:	6851      	ldr	r1, [r2, #4]
 8002d30:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8002d34:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8002d38:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 8002d3c:	f840 1c30 	str.w	r1, [r0, #-48]
    Txbuffer[i].len = q->len;
 8002d40:	8951      	ldrh	r1, [r2, #10]
 8002d42:	f840 1c2c 	str.w	r1, [r0, #-44]
    if(i>0)
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ea      	beq.n	8002d20 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 8002d4a:	f844 4c04 	str.w	r4, [r4, #-4]
 8002d4e:	e7e7      	b.n	8002d20 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 8002d50:	f844 6c04 	str.w	r6, [r4, #-4]
  for(q = p; q != NULL; q = q->next)
 8002d54:	680a      	ldr	r2, [r1, #0]
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d1e7      	bne.n	8002d2a <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <low_level_output+0x80>)
 8002d5c:	892b      	ldrh	r3, [r5, #8]
 8002d5e:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 8002d60:	f8c1 d008 	str.w	sp, [r1, #8]
  TxConfig.pData = p;
 8002d64:	634d      	str	r5, [r1, #52]	; 0x34
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8002d66:	2214      	movs	r2, #20
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <low_level_output+0x84>)
 8002d6a:	f7fe fd41 	bl	80017f0 <HAL_ETH_Transmit>
  return errval;
 8002d6e:	2000      	movs	r0, #0
 8002d70:	e001      	b.n	8002d76 <low_level_output+0x7a>
      return ERR_IF;
 8002d72:	f06f 000b 	mvn.w	r0, #11
}
 8002d76:	b00c      	add	sp, #48	; 0x30
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200007b0 	.word	0x200007b0
 8002d80:	200007e8 	.word	0x200007e8

08002d84 <pbuf_free_custom>:
{
 8002d84:	b508      	push	{r3, lr}
 8002d86:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <pbuf_free_custom+0x1c>)
 8002d8a:	f000 fd1b 	bl	80037c4 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <pbuf_free_custom+0x20>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d000      	beq.n	8002d98 <pbuf_free_custom+0x14>
}
 8002d96:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <pbuf_free_custom+0x20>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
}
 8002d9e:	e7fa      	b.n	8002d96 <pbuf_free_custom+0x12>
 8002da0:	0800b220 	.word	0x0800b220
 8002da4:	200007ac 	.word	0x200007ac

08002da8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8002da8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8002daa:	f7fe f90f 	bl	8000fcc <HAL_GetTick>
}
 8002dae:	bd08      	pop	{r3, pc}

08002db0 <ETH_PHY_IO_Init>:
{
 8002db0:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8002db2:	4802      	ldr	r0, [pc, #8]	; (8002dbc <ETH_PHY_IO_Init+0xc>)
 8002db4:	f7fe ff7c 	bl	8001cb0 <HAL_ETH_SetMDIOClockRange>
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	bd08      	pop	{r3, pc}
 8002dbc:	200007e8 	.word	0x200007e8

08002dc0 <ETH_PHY_IO_ReadReg>:
{
 8002dc0:	b508      	push	{r3, lr}
 8002dc2:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <ETH_PHY_IO_ReadReg+0x18>)
 8002dca:	f7fe fea3 	bl	8001b14 <HAL_ETH_ReadPHYRegister>
 8002dce:	3800      	subs	r0, #0
 8002dd0:	bf18      	it	ne
 8002dd2:	2001      	movne	r0, #1
}
 8002dd4:	4240      	negs	r0, r0
 8002dd6:	bd08      	pop	{r3, pc}
 8002dd8:	200007e8 	.word	0x200007e8

08002ddc <ETH_PHY_IO_WriteReg>:
{
 8002ddc:	b508      	push	{r3, lr}
 8002dde:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8002de0:	460a      	mov	r2, r1
 8002de2:	4601      	mov	r1, r0
 8002de4:	4803      	ldr	r0, [pc, #12]	; (8002df4 <ETH_PHY_IO_WriteReg+0x18>)
 8002de6:	f7fe febb 	bl	8001b60 <HAL_ETH_WritePHYRegister>
 8002dea:	3800      	subs	r0, #0
 8002dec:	bf18      	it	ne
 8002dee:	2001      	movne	r0, #1
}
 8002df0:	4240      	negs	r0, r0
 8002df2:	bd08      	pop	{r3, pc}
 8002df4:	200007e8 	.word	0x200007e8

08002df8 <ethernetif_input>:
{
 8002df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	4605      	mov	r5, r0
  struct pbuf *p = NULL;
 8002e00:	2700      	movs	r7, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8002e02:	4e0d      	ldr	r6, [pc, #52]	; (8002e38 <ethernetif_input+0x40>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 8002e04:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002e3c <ethernetif_input+0x44>
 8002e08:	e00a      	b.n	8002e20 <ethernetif_input+0x28>
 8002e0a:	a901      	add	r1, sp, #4
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	f7fe fd54 	bl	80018ba <HAL_ETH_ReadData>
  return p;
 8002e12:	9c01      	ldr	r4, [sp, #4]
    if (p != NULL)
 8002e14:	b144      	cbz	r4, 8002e28 <ethernetif_input+0x30>
      if (netif->input( p, netif) != ERR_OK )
 8002e16:	692b      	ldr	r3, [r5, #16]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4798      	blx	r3
 8002e1e:	b930      	cbnz	r0, 8002e2e <ethernetif_input+0x36>
  struct pbuf *p = NULL;
 8002e20:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8002e22:	7833      	ldrb	r3, [r6, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <ethernetif_input+0x12>
}
 8002e28:	b002      	add	sp, #8
 8002e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pbuf_free(p);
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f000 ff9c 	bl	8003d6c <pbuf_free>
  } while(p!=NULL);
 8002e34:	e7f4      	b.n	8002e20 <ethernetif_input+0x28>
 8002e36:	bf00      	nop
 8002e38:	200007ac 	.word	0x200007ac
 8002e3c:	200007e8 	.word	0x200007e8

08002e40 <sys_now>:
{
 8002e40:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8002e42:	f7fe f8c3 	bl	8000fcc <HAL_GetTick>
}
 8002e46:	bd08      	pop	{r3, pc}

08002e48 <HAL_ETH_MspInit>:
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9307      	str	r3, [sp, #28]
 8002e50:	9308      	str	r3, [sp, #32]
 8002e52:	9309      	str	r3, [sp, #36]	; 0x24
 8002e54:	930a      	str	r3, [sp, #40]	; 0x28
 8002e56:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8002e58:	6802      	ldr	r2, [r0, #0]
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_ETH_MspInit+0x118>)
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_ETH_MspInit+0x1c>
}
 8002e60:	b00d      	add	sp, #52	; 0x34
 8002e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e64:	2400      	movs	r4, #0
 8002e66:	9400      	str	r4, [sp, #0]
 8002e68:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8002e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
 8002e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e76:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	9a00      	ldr	r2, [sp, #0]
 8002e7e:	9401      	str	r4, [sp, #4]
 8002e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
 8002e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002e8e:	9201      	str	r2, [sp, #4]
 8002e90:	9a01      	ldr	r2, [sp, #4]
 8002e92:	9402      	str	r4, [sp, #8]
 8002e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	9403      	str	r4, [sp, #12]
 8002ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eaa:	f042 0204 	orr.w	r2, r2, #4
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb2:	f002 0204 	and.w	r2, r2, #4
 8002eb6:	9203      	str	r2, [sp, #12]
 8002eb8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	9404      	str	r4, [sp, #16]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	f002 0201 	and.w	r2, r2, #1
 8002eca:	9204      	str	r2, [sp, #16]
 8002ecc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	9405      	str	r4, [sp, #20]
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed2:	f042 0202 	orr.w	r2, r2, #2
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eda:	f002 0202 	and.w	r2, r2, #2
 8002ede:	9205      	str	r2, [sp, #20]
 8002ee0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee2:	9406      	str	r4, [sp, #24]
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	9306      	str	r3, [sp, #24]
 8002ef4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ef6:	2332      	movs	r3, #50	; 0x32
 8002ef8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2702      	movs	r7, #2
 8002efc:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2603      	movs	r6, #3
 8002f00:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f02:	250b      	movs	r5, #11
 8002f04:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f06:	a907      	add	r1, sp, #28
 8002f08:	4816      	ldr	r0, [pc, #88]	; (8002f64 <HAL_ETH_MspInit+0x11c>)
 8002f0a:	f7fe ff0b 	bl	8001d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f0e:	2386      	movs	r3, #134	; 0x86
 8002f10:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f18:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	a907      	add	r1, sp, #28
 8002f1c:	4812      	ldr	r0, [pc, #72]	; (8002f68 <HAL_ETH_MspInit+0x120>)
 8002f1e:	f7fe ff01 	bl	8001d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f26:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f2e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002f30:	a907      	add	r1, sp, #28
 8002f32:	480e      	ldr	r0, [pc, #56]	; (8002f6c <HAL_ETH_MspInit+0x124>)
 8002f34:	f7fe fef6 	bl	8001d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f3c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f44:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f46:	a907      	add	r1, sp, #28
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_ETH_MspInit+0x128>)
 8002f4a:	f7fe feeb 	bl	8001d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8002f4e:	4622      	mov	r2, r4
 8002f50:	4621      	mov	r1, r4
 8002f52:	203d      	movs	r0, #61	; 0x3d
 8002f54:	f7fe f866 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8002f58:	203d      	movs	r0, #61	; 0x3d
 8002f5a:	f7fe f899 	bl	8001090 <HAL_NVIC_EnableIRQ>
}
 8002f5e:	e77f      	b.n	8002e60 <HAL_ETH_MspInit+0x18>
 8002f60:	40028000 	.word	0x40028000
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40020400 	.word	0x40020400
 8002f70:	40021800 	.word	0x40021800

08002f74 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f76:	b09b      	sub	sp, #108	; 0x6c
 8002f78:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8002f7a:	2264      	movs	r2, #100	; 0x64
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	a801      	add	r0, sp, #4
 8002f80:	f007 f87e 	bl	800a080 <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8002f84:	4824      	ldr	r0, [pc, #144]	; (8003018 <ethernet_link_check_state+0xa4>)
 8002f86:	f7fd ff75 	bl	8000e74 <LAN8742_GetLinkState>

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8002f8a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8002f8e:	f013 0f04 	tst.w	r3, #4
 8002f92:	d010      	beq.n	8002fb6 <ethernet_link_check_state+0x42>
 8002f94:	2801      	cmp	r0, #1
 8002f96:	dd04      	ble.n	8002fa2 <ethernet_link_check_state+0x2e>
  {
    HAL_ETH_Stop(&heth);
    netif_set_down(netif);
    netif_set_link_down(netif);
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8002f98:	f013 0f04 	tst.w	r3, #4
 8002f9c:	d010      	beq.n	8002fc0 <ethernet_link_check_state+0x4c>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8002f9e:	b01b      	add	sp, #108	; 0x6c
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ETH_Stop(&heth);
 8002fa2:	481e      	ldr	r0, [pc, #120]	; (800301c <ethernet_link_check_state+0xa8>)
 8002fa4:	f7fe fbec 	bl	8001780 <HAL_ETH_Stop>
    netif_set_down(netif);
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f000 fd89 	bl	8003ac0 <netif_set_down>
    netif_set_link_down(netif);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f000 fdca 	bl	8003b48 <netif_set_link_down>
 8002fb4:	e7f3      	b.n	8002f9e <ethernet_link_check_state+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8002fb6:	f013 0f04 	tst.w	r3, #4
 8002fba:	d1f0      	bne.n	8002f9e <ethernet_link_check_state+0x2a>
 8002fbc:	2801      	cmp	r0, #1
 8002fbe:	ddee      	ble.n	8002f9e <ethernet_link_check_state+0x2a>
    switch (PHYLinkState)
 8002fc0:	1e83      	subs	r3, r0, #2
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d8eb      	bhi.n	8002f9e <ethernet_link_check_state+0x2a>
 8002fc6:	e8df f003 	tbb	[pc, r3]
 8002fca:	021d      	.short	0x021d
 8002fcc:	1a22      	.short	0x1a22
 8002fce:	2500      	movs	r5, #0
 8002fd0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8002fd4:	4e11      	ldr	r6, [pc, #68]	; (800301c <ethernet_link_check_state+0xa8>)
 8002fd6:	a901      	add	r1, sp, #4
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f7fe fde6 	bl	8001baa <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8002fde:	9507      	str	r5, [sp, #28]
      MACConf.Speed = speed;
 8002fe0:	9706      	str	r7, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8002fe2:	a901      	add	r1, sp, #4
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f7fe fe54 	bl	8001c92 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8002fea:	4630      	mov	r0, r6
 8002fec:	f7fe fb8c 	bl	8001708 <HAL_ETH_Start>
      netif_set_up(netif);
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f000 fd47 	bl	8003a84 <netif_set_up>
      netif_set_link_up(netif);
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 fd82 	bl	8003b00 <netif_set_link_up>
 8002ffc:	e7cf      	b.n	8002f9e <ethernet_link_check_state+0x2a>
      duplex = ETH_HALFDUPLEX_MODE;
 8002ffe:	2500      	movs	r5, #0
      speed = ETH_SPEED_10M;
 8003000:	462f      	mov	r7, r5
      break;
 8003002:	e7e7      	b.n	8002fd4 <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 8003004:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_100M;
 8003008:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 800300c:	e7e2      	b.n	8002fd4 <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 800300e:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_10M;
 8003012:	2700      	movs	r7, #0
 8003014:	e7de      	b.n	8002fd4 <ethernet_link_check_state+0x60>
 8003016:	bf00      	nop
 8003018:	2000078c 	.word	0x2000078c
 800301c:	200007e8 	.word	0x200007e8

08003020 <ethernetif_init>:
{
 8003020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003024:	b082      	sub	sp, #8
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003026:	4604      	mov	r4, r0
 8003028:	2800      	cmp	r0, #0
 800302a:	d06c      	beq.n	8003106 <ethernetif_init+0xe6>
  netif->name[0] = IFNAME0;
 800302c:	2373      	movs	r3, #115	; 0x73
 800302e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003032:	2374      	movs	r3, #116	; 0x74
 8003034:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 8003038:	4b38      	ldr	r3, [pc, #224]	; (800311c <ethernetif_init+0xfc>)
 800303a:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <ethernetif_init+0x100>)
 800303e:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 8003040:	4d38      	ldr	r5, [pc, #224]	; (8003124 <ethernetif_init+0x104>)
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <ethernetif_init+0x108>)
 8003044:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8003046:	2600      	movs	r6, #0
 8003048:	f88d 6000 	strb.w	r6, [sp]
  MACAddr[1] = 0x80;
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 8003052:	23e1      	movs	r3, #225	; 0xe1
 8003054:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 8003058:	f88d 6003 	strb.w	r6, [sp, #3]
  MACAddr[4] = 0x00;
 800305c:	f88d 6004 	strb.w	r6, [sp, #4]
  MACAddr[5] = 0x00;
 8003060:	f88d 6005 	strb.w	r6, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003064:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003068:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800306c:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <ethernetif_init+0x10c>)
 8003070:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003072:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <ethernetif_init+0x110>)
 8003074:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8003076:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800307a:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800307c:	4628      	mov	r0, r5
 800307e:	f7fe fa2f 	bl	80014e0 <HAL_ETH_Init>
 8003082:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003084:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800314c <ethernetif_init+0x12c>
 8003088:	2234      	movs	r2, #52	; 0x34
 800308a:	4631      	mov	r1, r6
 800308c:	f108 0004 	add.w	r0, r8, #4
 8003090:	f006 fff6 	bl	800a080 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003094:	2321      	movs	r3, #33	; 0x21
 8003096:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800309a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800309e:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 80030a2:	4824      	ldr	r0, [pc, #144]	; (8003134 <ethernetif_init+0x114>)
 80030a4:	f000 fb3a 	bl	800371c <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030a8:	2306      	movs	r3, #6
 80030aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80030ae:	686b      	ldr	r3, [r5, #4]
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80030b6:	785a      	ldrb	r2, [r3, #1]
 80030b8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80030bc:	789a      	ldrb	r2, [r3, #2]
 80030be:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80030c2:	78da      	ldrb	r2, [r3, #3]
 80030c4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80030c8:	791a      	ldrb	r2, [r3, #4]
 80030ca:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80030ce:	795b      	ldrb	r3, [r3, #5]
 80030d0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80030d4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80030d8:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80030da:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80030de:	f043 030a 	orr.w	r3, r3, #10
 80030e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80030e6:	4d14      	ldr	r5, [pc, #80]	; (8003138 <ethernetif_init+0x118>)
 80030e8:	4914      	ldr	r1, [pc, #80]	; (800313c <ethernetif_init+0x11c>)
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7fd fe37 	bl	8000d5e <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 80030f0:	4628      	mov	r0, r5
 80030f2:	f7fd fe53 	bl	8000d9c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 80030f6:	b977      	cbnz	r7, 8003116 <ethernetif_init+0xf6>
  ethernet_link_check_state(netif);
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff3b 	bl	8002f74 <ethernet_link_check_state>
}
 80030fe:	2000      	movs	r0, #0
 8003100:	b002      	add	sp, #8
 8003102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <ethernetif_init+0x120>)
 8003108:	f240 126b 	movw	r2, #363	; 0x16b
 800310c:	490d      	ldr	r1, [pc, #52]	; (8003144 <ethernetif_init+0x124>)
 800310e:	480e      	ldr	r0, [pc, #56]	; (8003148 <ethernetif_init+0x128>)
 8003110:	f006 ffbe 	bl	800a090 <iprintf>
 8003114:	e78a      	b.n	800302c <ethernetif_init+0xc>
    Error_Handler();
 8003116:	f7fd fb59 	bl	80007cc <Error_Handler>
 800311a:	e7f0      	b.n	80030fe <ethernetif_init+0xde>
 800311c:	08008e41 	.word	0x08008e41
 8003120:	08002cfd 	.word	0x08002cfd
 8003124:	200007e8 	.word	0x200007e8
 8003128:	40028000 	.word	0x40028000
 800312c:	200006ec 	.word	0x200006ec
 8003130:	2000064c 	.word	0x2000064c
 8003134:	0800b220 	.word	0x0800b220
 8003138:	2000078c 	.word	0x2000078c
 800313c:	2000000c 	.word	0x2000000c
 8003140:	0800b1f4 	.word	0x0800b1f4
 8003144:	0800b210 	.word	0x0800b210
 8003148:	0800b1cc 	.word	0x0800b1cc
 800314c:	200007b0 	.word	0x200007b0

08003150 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003150:	b510      	push	{r4, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003156:	480e      	ldr	r0, [pc, #56]	; (8003190 <HAL_ETH_RxAllocateCallback+0x40>)
 8003158:	f000 fb04 	bl	8003764 <memp_malloc_pool>
  if (p)
 800315c:	b188      	cbz	r0, 8003182 <HAL_ETH_RxAllocateCallback+0x32>
 800315e:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003160:	f100 0220 	add.w	r2, r0, #32
 8003164:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_ETH_RxAllocateCallback+0x44>)
 8003168:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800316a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	9200      	str	r2, [sp, #0]
 8003174:	2241      	movs	r2, #65	; 0x41
 8003176:	2100      	movs	r1, #0
 8003178:	4608      	mov	r0, r1
 800317a:	f000 fd95 	bl	8003ca8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800317e:	b002      	add	sp, #8
 8003180:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_ETH_RxAllocateCallback+0x48>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	6023      	str	r3, [r4, #0]
}
 800318c:	e7f7      	b.n	800317e <HAL_ETH_RxAllocateCallback+0x2e>
 800318e:	bf00      	nop
 8003190:	0800b220 	.word	0x0800b220
 8003194:	08002d85 	.word	0x08002d85
 8003198:	200007ac 	.word	0x200007ac

0800319c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800319c:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800319e:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 80031a2:	2500      	movs	r5, #0
 80031a4:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 80031a8:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 80031ac:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 80031b0:	6802      	ldr	r2, [r0, #0]
 80031b2:	b162      	cbz	r2, 80031ce <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 80031b8:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80031ba:	6802      	ldr	r2, [r0, #0]
 80031bc:	b12a      	cbz	r2, 80031ca <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80031be:	8911      	ldrh	r1, [r2, #8]
 80031c0:	4419      	add	r1, r3
 80031c2:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	2a00      	cmp	r2, #0
 80031c8:	d1f9      	bne.n	80031be <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80031ca:	bc30      	pop	{r4, r5}
 80031cc:	4770      	bx	lr
    *ppStart = p;
 80031ce:	6004      	str	r4, [r0, #0]
 80031d0:	e7f2      	b.n	80031b8 <HAL_ETH_RxLinkCallback+0x1c>

080031d2 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80031d2:	0a03      	lsrs	r3, r0, #8
 80031d4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80031d8:	b280      	uxth	r0, r0
 80031da:	4770      	bx	lr

080031dc <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80031dc:	0e03      	lsrs	r3, r0, #24
 80031de:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80031e2:	0202      	lsls	r2, r0, #8
 80031e4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80031e8:	4313      	orrs	r3, r2
 80031ea:	0a00      	lsrs	r0, r0, #8
 80031ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 80031f0:	4318      	orrs	r0, r3
 80031f2:	4770      	bx	lr

080031f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80031f4:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80031f6:	f000 f80b 	bl	8003210 <mem_init>
  memp_init();
 80031fa:	f000 faa5 	bl	8003748 <memp_init>
  pbuf_init();
  netif_init();
 80031fe:	f000 fb71 	bl	80038e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003202:	f005 f995 	bl	8008530 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003206:	f001 f8e9 	bl	80043dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800320a:	f005 f94d 	bl	80084a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800320e:	bd08      	pop	{r3, pc}

08003210 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <mem_init+0x34>)
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <mem_init+0x38>)
 8003218:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800321a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800321e:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8003220:	2200      	movs	r2, #0
 8003222:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003224:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8003226:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <mem_init+0x3c>)
 800322a:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 800322c:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8003230:	2001      	movs	r0, #1
 8003232:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 8003236:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 800323a:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <mem_init+0x40>)
 8003240:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003242:	4770      	bx	lr
 8003244:	20005247 	.word	0x20005247
 8003248:	2000523c 	.word	0x2000523c
 800324c:	20005240 	.word	0x20005240
 8003250:	20005238 	.word	0x20005238

08003254 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003254:	2800      	cmp	r0, #0
 8003256:	f000 80ad 	beq.w	80033b4 <mem_free+0x160>
{
 800325a:	b538      	push	{r3, r4, r5, lr}
 800325c:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800325e:	f010 0f03 	tst.w	r0, #3
 8003262:	d169      	bne.n	8003338 <mem_free+0xe4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003264:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003268:	4b53      	ldr	r3, [pc, #332]	; (80033b8 <mem_free+0x164>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	42ab      	cmp	r3, r5
 800326e:	d86b      	bhi.n	8003348 <mem_free+0xf4>
 8003270:	4a52      	ldr	r2, [pc, #328]	; (80033bc <mem_free+0x168>)
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f100 010c 	add.w	r1, r0, #12
 8003278:	428a      	cmp	r2, r1
 800327a:	d365      	bcc.n	8003348 <mem_free+0xf4>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800327c:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 8003280:	2900      	cmp	r1, #0
 8003282:	d069      	beq.n	8003358 <mem_free+0x104>
  nmem = ptr_to_mem(mem->next);
 8003284:	f830 1c08 	ldrh.w	r1, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003288:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 800328c:	f200 808a 	bhi.w	80033a4 <mem_free+0x150>
  pmem = ptr_to_mem(mem->prev);
 8003290:	f830 cc06 	ldrh.w	ip, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003294:	f5bc 5f20 	cmp.w	ip, #10240	; 0x2800
 8003298:	f200 8084 	bhi.w	80033a4 <mem_free+0x150>
  return (mem_size_t)((u8_t *)mem - ram);
 800329c:	1ae8      	subs	r0, r5, r3
 800329e:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80032a0:	4584      	cmp	ip, r0
 80032a2:	d003      	beq.n	80032ac <mem_free+0x58>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80032a4:	f833 c00c 	ldrh.w	ip, [r3, ip]
 80032a8:	4584      	cmp	ip, r0
 80032aa:	d17b      	bne.n	80033a4 <mem_free+0x150>
  return (struct mem *)(void *)&ram[ptr];
 80032ac:	440b      	add	r3, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d002      	beq.n	80032b8 <mem_free+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80032b2:	885b      	ldrh	r3, [r3, #2]
 80032b4:	4283      	cmp	r3, r0
 80032b6:	d175      	bne.n	80033a4 <mem_free+0x150>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <mem_free+0x16c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	42ab      	cmp	r3, r5
 80032c4:	d901      	bls.n	80032ca <mem_free+0x76>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <mem_free+0x16c>)
 80032c8:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80032ca:	42aa      	cmp	r2, r5
 80032cc:	d94c      	bls.n	8003368 <mem_free+0x114>
  return (struct mem *)(void *)&ram[ptr];
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <mem_free+0x164>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80032d6:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80032d8:	4295      	cmp	r5, r2
 80032da:	d015      	beq.n	8003308 <mem_free+0xb4>
 80032dc:	7910      	ldrb	r0, [r2, #4]
 80032de:	b998      	cbnz	r0, 8003308 <mem_free+0xb4>
 80032e0:	4836      	ldr	r0, [pc, #216]	; (80033bc <mem_free+0x168>)
 80032e2:	6800      	ldr	r0, [r0, #0]
 80032e4:	4290      	cmp	r0, r2
 80032e6:	d00f      	beq.n	8003308 <mem_free+0xb4>
    if (lfree == nmem) {
 80032e8:	4835      	ldr	r0, [pc, #212]	; (80033c0 <mem_free+0x16c>)
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	4290      	cmp	r0, r2
      lfree = mem;
 80032ee:	bf04      	itt	eq
 80032f0:	4a33      	ldreq	r2, [pc, #204]	; (80033c0 <mem_free+0x16c>)
 80032f2:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 80032f4:	5a5a      	ldrh	r2, [r3, r1]
 80032f6:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80032fa:	5a5a      	ldrh	r2, [r3, r1]
 80032fc:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003300:	d002      	beq.n	8003308 <mem_free+0xb4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003302:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8003304:	1ae9      	subs	r1, r5, r3
 8003306:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8003308:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800330c:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800330e:	4295      	cmp	r5, r2
 8003310:	d021      	beq.n	8003356 <mem_free+0x102>
 8003312:	7910      	ldrb	r0, [r2, #4]
 8003314:	b9f8      	cbnz	r0, 8003356 <mem_free+0x102>
    if (lfree == mem) {
 8003316:	482a      	ldr	r0, [pc, #168]	; (80033c0 <mem_free+0x16c>)
 8003318:	6800      	ldr	r0, [r0, #0]
 800331a:	4285      	cmp	r5, r0
      lfree = pmem;
 800331c:	bf04      	itt	eq
 800331e:	4828      	ldreq	r0, [pc, #160]	; (80033c0 <mem_free+0x16c>)
 8003320:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 8003322:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8003326:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003328:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800332c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003330:	d011      	beq.n	8003356 <mem_free+0x102>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003332:	4413      	add	r3, r2
 8003334:	8059      	strh	r1, [r3, #2]
  plug_holes(mem);
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8003336:	e00e      	b.n	8003356 <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <mem_free+0x170>)
 800333a:	f240 2273 	movw	r2, #627	; 0x273
 800333e:	4922      	ldr	r1, [pc, #136]	; (80033c8 <mem_free+0x174>)
 8003340:	4822      	ldr	r0, [pc, #136]	; (80033cc <mem_free+0x178>)
 8003342:	f006 fea5 	bl	800a090 <iprintf>
    return;
 8003346:	e006      	b.n	8003356 <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <mem_free+0x170>)
 800334a:	f240 227f 	movw	r2, #639	; 0x27f
 800334e:	4920      	ldr	r1, [pc, #128]	; (80033d0 <mem_free+0x17c>)
 8003350:	481e      	ldr	r0, [pc, #120]	; (80033cc <mem_free+0x178>)
 8003352:	f006 fe9d 	bl	800a090 <iprintf>
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <mem_free+0x170>)
 800335a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800335e:	491d      	ldr	r1, [pc, #116]	; (80033d4 <mem_free+0x180>)
 8003360:	481a      	ldr	r0, [pc, #104]	; (80033cc <mem_free+0x178>)
 8003362:	f006 fe95 	bl	800a090 <iprintf>
    return;
 8003366:	e7f6      	b.n	8003356 <mem_free+0x102>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <mem_free+0x170>)
 800336a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800336e:	491a      	ldr	r1, [pc, #104]	; (80033d8 <mem_free+0x184>)
 8003370:	4816      	ldr	r0, [pc, #88]	; (80033cc <mem_free+0x178>)
 8003372:	f006 fe8d 	bl	800a090 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003376:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800337a:	b133      	cbz	r3, 800338a <mem_free+0x136>
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <mem_free+0x170>)
 800337e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003382:	4916      	ldr	r1, [pc, #88]	; (80033dc <mem_free+0x188>)
 8003384:	4811      	ldr	r0, [pc, #68]	; (80033cc <mem_free+0x178>)
 8003386:	f006 fe83 	bl	800a090 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800338a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800338e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003392:	d99c      	bls.n	80032ce <mem_free+0x7a>
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <mem_free+0x170>)
 8003396:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800339a:	4911      	ldr	r1, [pc, #68]	; (80033e0 <mem_free+0x18c>)
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <mem_free+0x178>)
 800339e:	f006 fe77 	bl	800a090 <iprintf>
 80033a2:	e794      	b.n	80032ce <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <mem_free+0x170>)
 80033a6:	f240 2295 	movw	r2, #661	; 0x295
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <mem_free+0x190>)
 80033ac:	4807      	ldr	r0, [pc, #28]	; (80033cc <mem_free+0x178>)
 80033ae:	f006 fe6f 	bl	800a090 <iprintf>
    return;
 80033b2:	e7d0      	b.n	8003356 <mem_free+0x102>
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	2000523c 	.word	0x2000523c
 80033bc:	20005240 	.word	0x20005240
 80033c0:	20005238 	.word	0x20005238
 80033c4:	0800b22c 	.word	0x0800b22c
 80033c8:	0800b25c 	.word	0x0800b25c
 80033cc:	0800b1cc 	.word	0x0800b1cc
 80033d0:	0800b280 	.word	0x0800b280
 80033d4:	0800b29c 	.word	0x0800b29c
 80033d8:	0800b2c4 	.word	0x0800b2c4
 80033dc:	0800b2e0 	.word	0x0800b2e0
 80033e0:	0800b2fc 	.word	0x0800b2fc
 80033e4:	0800b328 	.word	0x0800b328

080033e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80033e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ec:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80033ee:	1ccc      	adds	r4, r1, #3
 80033f0:	f024 0403 	bic.w	r4, r4, #3
 80033f4:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80033f6:	2c0b      	cmp	r4, #11
 80033f8:	d904      	bls.n	8003404 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80033fa:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 80033fe:	d902      	bls.n	8003406 <mem_trim+0x1e>
    return NULL;
 8003400:	2500      	movs	r5, #0
 8003402:	e016      	b.n	8003432 <mem_trim+0x4a>
    newsize = MIN_SIZE_ALIGNED;
 8003404:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003406:	42a1      	cmp	r1, r4
 8003408:	f200 808e 	bhi.w	8003528 <mem_trim+0x140>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800340c:	4b47      	ldr	r3, [pc, #284]	; (800352c <mem_trim+0x144>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	42ab      	cmp	r3, r5
 8003412:	d803      	bhi.n	800341c <mem_trim+0x34>
 8003414:	4a46      	ldr	r2, [pc, #280]	; (8003530 <mem_trim+0x148>)
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	42aa      	cmp	r2, r5
 800341a:	d811      	bhi.n	8003440 <mem_trim+0x58>
 800341c:	4b45      	ldr	r3, [pc, #276]	; (8003534 <mem_trim+0x14c>)
 800341e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003422:	4945      	ldr	r1, [pc, #276]	; (8003538 <mem_trim+0x150>)
 8003424:	4845      	ldr	r0, [pc, #276]	; (800353c <mem_trim+0x154>)
 8003426:	f006 fe33 	bl	800a090 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800342a:	4b40      	ldr	r3, [pc, #256]	; (800352c <mem_trim+0x144>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	42ab      	cmp	r3, r5
 8003430:	d902      	bls.n	8003438 <mem_trim+0x50>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8003432:	4628      	mov	r0, r5
 8003434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003438:	4a3d      	ldr	r2, [pc, #244]	; (8003530 <mem_trim+0x148>)
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	42aa      	cmp	r2, r5
 800343e:	d9f8      	bls.n	8003432 <mem_trim+0x4a>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003440:	f1a5 0608 	sub.w	r6, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8003444:	1af3      	subs	r3, r6, r3
 8003446:	b29e      	uxth	r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003448:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 800344c:	f1a7 0308 	sub.w	r3, r7, #8
 8003450:	1b9b      	subs	r3, r3, r6
 8003452:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003454:	42a3      	cmp	r3, r4
 8003456:	d326      	bcc.n	80034a6 <mem_trim+0xbe>
  if (newsize == size) {
 8003458:	42a3      	cmp	r3, r4
 800345a:	d0ea      	beq.n	8003432 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 800345c:	4a33      	ldr	r2, [pc, #204]	; (800352c <mem_trim+0x144>)
 800345e:	f8d2 9000 	ldr.w	r9, [r2]
 8003462:	eb09 0807 	add.w	r8, r9, r7
  if (mem2->used == 0) {
 8003466:	f898 2004 	ldrb.w	r2, [r8, #4]
 800346a:	2a00      	cmp	r2, #0
 800346c:	d132      	bne.n	80034d4 <mem_trim+0xec>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800346e:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8003472:	d021      	beq.n	80034b8 <mem_trim+0xd0>
    next = mem2->next;
 8003474:	f839 0007 	ldrh.w	r0, [r9, r7]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003478:	3408      	adds	r4, #8
 800347a:	4434      	add	r4, r6
 800347c:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <mem_trim+0x158>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4543      	cmp	r3, r8
 8003484:	d020      	beq.n	80034c8 <mem_trim+0xe0>
  return (struct mem *)(void *)&ram[ptr];
 8003486:	4b29      	ldr	r3, [pc, #164]	; (800352c <mem_trim+0x144>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 800348c:	2100      	movs	r1, #0
 800348e:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8003490:	5318      	strh	r0, [r3, r4]
    mem2->prev = ptr;
 8003492:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8003494:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003498:	5b1a      	ldrh	r2, [r3, r4]
 800349a:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800349e:	d0c8      	beq.n	8003432 <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80034a0:	4413      	add	r3, r2
 80034a2:	805c      	strh	r4, [r3, #2]
 80034a4:	e7c5      	b.n	8003432 <mem_trim+0x4a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80034a6:	4b23      	ldr	r3, [pc, #140]	; (8003534 <mem_trim+0x14c>)
 80034a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80034ac:	4925      	ldr	r1, [pc, #148]	; (8003544 <mem_trim+0x15c>)
 80034ae:	4823      	ldr	r0, [pc, #140]	; (800353c <mem_trim+0x154>)
 80034b0:	f006 fdee 	bl	800a090 <iprintf>
    return NULL;
 80034b4:	2500      	movs	r5, #0
 80034b6:	e7bc      	b.n	8003432 <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <mem_trim+0x14c>)
 80034ba:	f240 22f5 	movw	r2, #757	; 0x2f5
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <mem_trim+0x160>)
 80034c0:	481e      	ldr	r0, [pc, #120]	; (800353c <mem_trim+0x154>)
 80034c2:	f006 fde5 	bl	800a090 <iprintf>
 80034c6:	e7d5      	b.n	8003474 <mem_trim+0x8c>
  return (struct mem *)(void *)&ram[ptr];
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <mem_trim+0x144>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 80034ce:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <mem_trim+0x158>)
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e7d8      	b.n	8003486 <mem_trim+0x9e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80034d4:	f104 0214 	add.w	r2, r4, #20
 80034d8:	429a      	cmp	r2, r3
 80034da:	d8aa      	bhi.n	8003432 <mem_trim+0x4a>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80034dc:	3408      	adds	r4, #8
 80034de:	4434      	add	r4, r6
 80034e0:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80034e2:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 80034e6:	d017      	beq.n	8003518 <mem_trim+0x130>
  return (struct mem *)(void *)&ram[ptr];
 80034e8:	4b10      	ldr	r3, [pc, #64]	; (800352c <mem_trim+0x144>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80034ee:	4914      	ldr	r1, [pc, #80]	; (8003540 <mem_trim+0x158>)
 80034f0:	6809      	ldr	r1, [r1, #0]
 80034f2:	4291      	cmp	r1, r2
      lfree = mem2;
 80034f4:	bf84      	itt	hi
 80034f6:	4912      	ldrhi	r1, [pc, #72]	; (8003540 <mem_trim+0x158>)
 80034f8:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 80034fa:	2100      	movs	r1, #0
 80034fc:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 80034fe:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8003502:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8003504:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8003506:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800350a:	5b1a      	ldrh	r2, [r3, r4]
 800350c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003510:	d08f      	beq.n	8003432 <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003512:	4413      	add	r3, r2
 8003514:	805c      	strh	r4, [r3, #2]
 8003516:	e78c      	b.n	8003432 <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <mem_trim+0x14c>)
 800351a:	f240 3216 	movw	r2, #790	; 0x316
 800351e:	490a      	ldr	r1, [pc, #40]	; (8003548 <mem_trim+0x160>)
 8003520:	4806      	ldr	r0, [pc, #24]	; (800353c <mem_trim+0x154>)
 8003522:	f006 fdb5 	bl	800a090 <iprintf>
 8003526:	e7df      	b.n	80034e8 <mem_trim+0x100>
    return NULL;
 8003528:	2500      	movs	r5, #0
 800352a:	e782      	b.n	8003432 <mem_trim+0x4a>
 800352c:	2000523c 	.word	0x2000523c
 8003530:	20005240 	.word	0x20005240
 8003534:	0800b22c 	.word	0x0800b22c
 8003538:	0800b35c 	.word	0x0800b35c
 800353c:	0800b1cc 	.word	0x0800b1cc
 8003540:	20005238 	.word	0x20005238
 8003544:	0800b374 	.word	0x0800b374
 8003548:	0800b394 	.word	0x0800b394

0800354c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800354c:	2800      	cmp	r0, #0
 800354e:	f000 8093 	beq.w	8003678 <mem_malloc+0x12c>
{
 8003552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003554:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003556:	3003      	adds	r0, #3
 8003558:	f020 0003 	bic.w	r0, r0, #3
 800355c:	b280      	uxth	r0, r0
  if (size < MIN_SIZE_ALIGNED) {
 800355e:	280b      	cmp	r0, #11
 8003560:	d904      	bls.n	800356c <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003562:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8003566:	d902      	bls.n	800356e <mem_malloc+0x22>
    return NULL;
 8003568:	2000      	movs	r0, #0
 800356a:	e084      	b.n	8003676 <mem_malloc+0x12a>
    size = MIN_SIZE_ALIGNED;
 800356c:	200c      	movs	r0, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800356e:	4283      	cmp	r3, r0
 8003570:	f200 8084 	bhi.w	800367c <mem_malloc+0x130>
  return (mem_size_t)((u8_t *)mem - ram);
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <mem_malloc+0x144>)
 8003576:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003578:	4b46      	ldr	r3, [pc, #280]	; (8003694 <mem_malloc+0x148>)
  return (mem_size_t)((u8_t *)mem - ram);
 800357a:	681c      	ldr	r4, [r3, #0]
 800357c:	1a64      	subs	r4, r4, r1
 800357e:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003580:	4623      	mov	r3, r4
 8003582:	4606      	mov	r6, r0
 8003584:	f5c0 5c20 	rsb	ip, r0, #10240	; 0x2800
 8003588:	4564      	cmp	r4, ip
 800358a:	d279      	bcs.n	8003680 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800358c:	f06f 0707 	mvn.w	r7, #7
 8003590:	e036      	b.n	8003600 <mem_malloc+0xb4>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003592:	4b41      	ldr	r3, [pc, #260]	; (8003698 <mem_malloc+0x14c>)
 8003594:	f240 3287 	movw	r2, #903	; 0x387
 8003598:	4940      	ldr	r1, [pc, #256]	; (800369c <mem_malloc+0x150>)
 800359a:	4841      	ldr	r0, [pc, #260]	; (80036a0 <mem_malloc+0x154>)
 800359c:	f006 fd78 	bl	800a090 <iprintf>
 80035a0:	e042      	b.n	8003628 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <mem_malloc+0x148>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	42ab      	cmp	r3, r5
 80035ac:	d053      	beq.n	8003656 <mem_malloc+0x10a>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80035ae:	3608      	adds	r6, #8
 80035b0:	442e      	add	r6, r5
 80035b2:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <mem_malloc+0x158>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	42b3      	cmp	r3, r6
 80035b8:	d305      	bcc.n	80035c6 <mem_malloc+0x7a>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80035ba:	f015 0f03 	tst.w	r5, #3
 80035be:	d10a      	bne.n	80035d6 <mem_malloc+0x8a>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80035c0:	f105 0008 	add.w	r0, r5, #8
 80035c4:	e057      	b.n	8003676 <mem_malloc+0x12a>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <mem_malloc+0x14c>)
 80035c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80035cc:	4936      	ldr	r1, [pc, #216]	; (80036a8 <mem_malloc+0x15c>)
 80035ce:	4834      	ldr	r0, [pc, #208]	; (80036a0 <mem_malloc+0x154>)
 80035d0:	f006 fd5e 	bl	800a090 <iprintf>
 80035d4:	e7f1      	b.n	80035ba <mem_malloc+0x6e>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80035d6:	4e30      	ldr	r6, [pc, #192]	; (8003698 <mem_malloc+0x14c>)
 80035d8:	4c31      	ldr	r4, [pc, #196]	; (80036a0 <mem_malloc+0x154>)
 80035da:	4633      	mov	r3, r6
 80035dc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80035e0:	4932      	ldr	r1, [pc, #200]	; (80036ac <mem_malloc+0x160>)
 80035e2:	4620      	mov	r0, r4
 80035e4:	f006 fd54 	bl	800a090 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80035e8:	4633      	mov	r3, r6
 80035ea:	f240 32bd 	movw	r2, #957	; 0x3bd
 80035ee:	4930      	ldr	r1, [pc, #192]	; (80036b0 <mem_malloc+0x164>)
 80035f0:	4620      	mov	r0, r4
 80035f2:	f006 fd4d 	bl	800a090 <iprintf>
 80035f6:	e7e3      	b.n	80035c0 <mem_malloc+0x74>
         ptr = ptr_to_mem(ptr)->next) {
 80035f8:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80035fa:	4623      	mov	r3, r4
 80035fc:	4564      	cmp	r4, ip
 80035fe:	d239      	bcs.n	8003674 <mem_malloc+0x128>
  return (struct mem *)(void *)&ram[ptr];
 8003600:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8003602:	792a      	ldrb	r2, [r5, #4]
 8003604:	2a00      	cmp	r2, #0
 8003606:	d1f7      	bne.n	80035f8 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003608:	5aca      	ldrh	r2, [r1, r3]
 800360a:	1afb      	subs	r3, r7, r3
 800360c:	4413      	add	r3, r2
      if ((!mem->used) &&
 800360e:	42b3      	cmp	r3, r6
 8003610:	d3f2      	bcc.n	80035f8 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003612:	f106 0214 	add.w	r2, r6, #20
 8003616:	4293      	cmp	r3, r2
 8003618:	d3c3      	bcc.n	80035a2 <mem_malloc+0x56>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800361a:	f100 0708 	add.w	r7, r0, #8
 800361e:	4427      	add	r7, r4
 8003620:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003622:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8003626:	d0b4      	beq.n	8003592 <mem_malloc+0x46>
  return (struct mem *)(void *)&ram[ptr];
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <mem_malloc+0x144>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 800362e:	2100      	movs	r1, #0
 8003630:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8003632:	8829      	ldrh	r1, [r5, #0]
 8003634:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8003636:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8003638:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 800363a:	2201      	movs	r2, #1
 800363c:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800363e:	5bda      	ldrh	r2, [r3, r7]
 8003640:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003644:	d0af      	beq.n	80035a6 <mem_malloc+0x5a>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003646:	4413      	add	r3, r2
 8003648:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <mem_malloc+0x148>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	42ab      	cmp	r3, r5
 8003650:	d1ad      	bne.n	80035ae <mem_malloc+0x62>
          while (cur->used && cur != ram_end) {
 8003652:	792b      	ldrb	r3, [r5, #4]
 8003654:	b1cb      	cbz	r3, 800368a <mem_malloc+0x13e>
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <mem_malloc+0x158>)
 8003658:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <mem_malloc+0x144>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8003660:	4299      	cmp	r1, r3
 8003662:	d00f      	beq.n	8003684 <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8003668:	791a      	ldrb	r2, [r3, #4]
 800366a:	2a00      	cmp	r2, #0
 800366c:	d1f8      	bne.n	8003660 <mem_malloc+0x114>
          lfree = cur;
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <mem_malloc+0x148>)
 8003670:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003672:	e79c      	b.n	80035ae <mem_malloc+0x62>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003674:	2000      	movs	r0, #0
}
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8003678:	2000      	movs	r0, #0
}
 800367a:	4770      	bx	lr
    return NULL;
 800367c:	2000      	movs	r0, #0
 800367e:	e7fa      	b.n	8003676 <mem_malloc+0x12a>
  return NULL;
 8003680:	2000      	movs	r0, #0
 8003682:	e7f8      	b.n	8003676 <mem_malloc+0x12a>
          lfree = cur;
 8003684:	4a03      	ldr	r2, [pc, #12]	; (8003694 <mem_malloc+0x148>)
 8003686:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003688:	e791      	b.n	80035ae <mem_malloc+0x62>
  return (struct mem *)(void *)&ram[ptr];
 800368a:	462b      	mov	r3, r5
 800368c:	e7ef      	b.n	800366e <mem_malloc+0x122>
 800368e:	bf00      	nop
 8003690:	2000523c 	.word	0x2000523c
 8003694:	20005238 	.word	0x20005238
 8003698:	0800b22c 	.word	0x0800b22c
 800369c:	0800b394 	.word	0x0800b394
 80036a0:	0800b1cc 	.word	0x0800b1cc
 80036a4:	20005240 	.word	0x20005240
 80036a8:	0800b3a8 	.word	0x0800b3a8
 80036ac:	0800b3d8 	.word	0x0800b3d8
 80036b0:	0800b408 	.word	0x0800b408

080036b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80036b4:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80036b6:	6883      	ldr	r3, [r0, #8]
 80036b8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80036ba:	b124      	cbz	r4, 80036c6 <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80036c0:	f014 0f03 	tst.w	r4, #3
 80036c4:	d101      	bne.n	80036ca <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80036c6:	4620      	mov	r0, r4
 80036c8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <do_memp_malloc_pool+0x28>)
 80036cc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <do_memp_malloc_pool+0x2c>)
 80036d2:	4804      	ldr	r0, [pc, #16]	; (80036e4 <do_memp_malloc_pool+0x30>)
 80036d4:	f006 fcdc 	bl	800a090 <iprintf>
 80036d8:	e7f5      	b.n	80036c6 <do_memp_malloc_pool+0x12>
 80036da:	bf00      	nop
 80036dc:	0800b42c 	.word	0x0800b42c
 80036e0:	0800b45c 	.word	0x0800b45c
 80036e4:	0800b1cc 	.word	0x0800b1cc

080036e8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4605      	mov	r5, r0
 80036ec:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80036ee:	f011 0f03 	tst.w	r1, #3
 80036f2:	d105      	bne.n	8003700 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80036f4:	68ab      	ldr	r3, [r5, #8]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80036fa:	68ab      	ldr	r3, [r5, #8]
 80036fc:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <do_memp_free_pool+0x28>)
 8003702:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003706:	4903      	ldr	r1, [pc, #12]	; (8003714 <do_memp_free_pool+0x2c>)
 8003708:	4803      	ldr	r0, [pc, #12]	; (8003718 <do_memp_free_pool+0x30>)
 800370a:	f006 fcc1 	bl	800a090 <iprintf>
 800370e:	e7f1      	b.n	80036f4 <do_memp_free_pool+0xc>
 8003710:	0800b42c 	.word	0x0800b42c
 8003714:	0800b480 	.word	0x0800b480
 8003718:	0800b1cc 	.word	0x0800b1cc

0800371c <memp_init_pool>:
  *desc->tab = NULL;
 800371c:	6883      	ldr	r3, [r0, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003722:	6843      	ldr	r3, [r0, #4]
 8003724:	3303      	adds	r3, #3
 8003726:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800372a:	8842      	ldrh	r2, [r0, #2]
 800372c:	b15a      	cbz	r2, 8003746 <memp_init_pool+0x2a>
 800372e:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8003730:	6881      	ldr	r1, [r0, #8]
 8003732:	6809      	ldr	r1, [r1, #0]
 8003734:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8003736:	6881      	ldr	r1, [r0, #8]
 8003738:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800373a:	8801      	ldrh	r1, [r0, #0]
 800373c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800373e:	3201      	adds	r2, #1
 8003740:	8841      	ldrh	r1, [r0, #2]
 8003742:	4291      	cmp	r1, r2
 8003744:	dcf4      	bgt.n	8003730 <memp_init_pool+0x14>
}
 8003746:	4770      	bx	lr

08003748 <memp_init>:
{
 8003748:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800374a:	4d05      	ldr	r5, [pc, #20]	; (8003760 <memp_init+0x18>)
 800374c:	1f2c      	subs	r4, r5, #4
 800374e:	3520      	adds	r5, #32
    memp_init_pool(memp_pools[i]);
 8003750:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003754:	f7ff ffe2 	bl	800371c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003758:	42ac      	cmp	r4, r5
 800375a:	d1f9      	bne.n	8003750 <memp_init+0x8>
}
 800375c:	bd38      	pop	{r3, r4, r5, pc}
 800375e:	bf00      	nop
 8003760:	0800b55c 	.word	0x0800b55c

08003764 <memp_malloc_pool>:
{
 8003764:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003766:	4604      	mov	r4, r0
 8003768:	b110      	cbz	r0, 8003770 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 800376a:	f7ff ffa3 	bl	80036b4 <do_memp_malloc_pool>
}
 800376e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <memp_malloc_pool+0x20>)
 8003772:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8003776:	4904      	ldr	r1, [pc, #16]	; (8003788 <memp_malloc_pool+0x24>)
 8003778:	4804      	ldr	r0, [pc, #16]	; (800378c <memp_malloc_pool+0x28>)
 800377a:	f006 fc89 	bl	800a090 <iprintf>
    return NULL;
 800377e:	4620      	mov	r0, r4
 8003780:	e7f5      	b.n	800376e <memp_malloc_pool+0xa>
 8003782:	bf00      	nop
 8003784:	0800b42c 	.word	0x0800b42c
 8003788:	0800b4a0 	.word	0x0800b4a0
 800378c:	0800b1cc 	.word	0x0800b1cc

08003790 <memp_malloc>:
{
 8003790:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003792:	2808      	cmp	r0, #8
 8003794:	d805      	bhi.n	80037a2 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <memp_malloc+0x24>)
 8003798:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800379c:	f7ff ff8a 	bl	80036b4 <do_memp_malloc_pool>
}
 80037a0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <memp_malloc+0x28>)
 80037a4:	f240 1257 	movw	r2, #343	; 0x157
 80037a8:	4904      	ldr	r1, [pc, #16]	; (80037bc <memp_malloc+0x2c>)
 80037aa:	4805      	ldr	r0, [pc, #20]	; (80037c0 <memp_malloc+0x30>)
 80037ac:	f006 fc70 	bl	800a090 <iprintf>
 80037b0:	2000      	movs	r0, #0
 80037b2:	e7f5      	b.n	80037a0 <memp_malloc+0x10>
 80037b4:	0800b55c 	.word	0x0800b55c
 80037b8:	0800b42c 	.word	0x0800b42c
 80037bc:	0800b4b4 	.word	0x0800b4b4
 80037c0:	0800b1cc 	.word	0x0800b1cc

080037c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80037c4:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80037c6:	b128      	cbz	r0, 80037d4 <memp_free_pool+0x10>
 80037c8:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 80037ca:	b111      	cbz	r1, 80037d2 <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff8b 	bl	80036e8 <do_memp_free_pool>
}
 80037d2:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80037d4:	4b03      	ldr	r3, [pc, #12]	; (80037e4 <memp_free_pool+0x20>)
 80037d6:	f240 1295 	movw	r2, #405	; 0x195
 80037da:	4903      	ldr	r1, [pc, #12]	; (80037e8 <memp_free_pool+0x24>)
 80037dc:	4803      	ldr	r0, [pc, #12]	; (80037ec <memp_free_pool+0x28>)
 80037de:	f006 fc57 	bl	800a090 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80037e2:	e7f6      	b.n	80037d2 <memp_free_pool+0xe>
 80037e4:	0800b42c 	.word	0x0800b42c
 80037e8:	0800b4a0 	.word	0x0800b4a0
 80037ec:	0800b1cc 	.word	0x0800b1cc

080037f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80037f0:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80037f2:	2808      	cmp	r0, #8
 80037f4:	d806      	bhi.n	8003804 <memp_free+0x14>

  if (mem == NULL) {
 80037f6:	b121      	cbz	r1, 8003802 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <memp_free+0x24>)
 80037fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80037fe:	f7ff ff73 	bl	80036e8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003802:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <memp_free+0x28>)
 8003806:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <memp_free+0x2c>)
 800380c:	4804      	ldr	r0, [pc, #16]	; (8003820 <memp_free+0x30>)
 800380e:	f006 fc3f 	bl	800a090 <iprintf>
 8003812:	e7f6      	b.n	8003802 <memp_free+0x12>
 8003814:	0800b55c 	.word	0x0800b55c
 8003818:	0800b42c 	.word	0x0800b42c
 800381c:	0800b4d4 	.word	0x0800b4d4
 8003820:	0800b1cc 	.word	0x0800b1cc

08003824 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8003824:	f06f 000b 	mvn.w	r0, #11
 8003828:	4770      	bx	lr
	...

0800382c <netif_issue_reports>:
{
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003830:	4605      	mov	r5, r0
 8003832:	b170      	cbz	r0, 8003852 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003834:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8003838:	f003 0205 	and.w	r2, r3, #5
 800383c:	2a05      	cmp	r2, #5
 800383e:	d107      	bne.n	8003850 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003840:	f014 0f01 	tst.w	r4, #1
 8003844:	d004      	beq.n	8003850 <netif_issue_reports+0x24>
 8003846:	686a      	ldr	r2, [r5, #4]
 8003848:	b112      	cbz	r2, 8003850 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800384a:	f013 0f08 	tst.w	r3, #8
 800384e:	d108      	bne.n	8003862 <netif_issue_reports+0x36>
}
 8003850:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <netif_issue_reports+0x40>)
 8003854:	f240 326d 	movw	r2, #877	; 0x36d
 8003858:	4905      	ldr	r1, [pc, #20]	; (8003870 <netif_issue_reports+0x44>)
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <netif_issue_reports+0x48>)
 800385c:	f006 fc18 	bl	800a090 <iprintf>
 8003860:	e7e8      	b.n	8003834 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8003862:	1d29      	adds	r1, r5, #4
 8003864:	4628      	mov	r0, r5
 8003866:	f005 f979 	bl	8008b5c <etharp_request>
 800386a:	e7f1      	b.n	8003850 <netif_issue_reports+0x24>
 800386c:	0800b580 	.word	0x0800b580
 8003870:	0800b5b4 	.word	0x0800b5b4
 8003874:	0800b1cc 	.word	0x0800b1cc

08003878 <netif_do_set_ipaddr>:
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	4605      	mov	r5, r0
 800387e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003880:	460e      	mov	r6, r1
 8003882:	b139      	cbz	r1, 8003894 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003884:	b174      	cbz	r4, 80038a4 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003886:	686b      	ldr	r3, [r5, #4]
 8003888:	6832      	ldr	r2, [r6, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d112      	bne.n	80038b4 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 800388e:	2000      	movs	r0, #0
}
 8003890:	b002      	add	sp, #8
 8003892:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <netif_do_set_ipaddr+0x60>)
 8003896:	f240 12cb 	movw	r2, #459	; 0x1cb
 800389a:	4910      	ldr	r1, [pc, #64]	; (80038dc <netif_do_set_ipaddr+0x64>)
 800389c:	4810      	ldr	r0, [pc, #64]	; (80038e0 <netif_do_set_ipaddr+0x68>)
 800389e:	f006 fbf7 	bl	800a090 <iprintf>
 80038a2:	e7ef      	b.n	8003884 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <netif_do_set_ipaddr+0x60>)
 80038a6:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <netif_do_set_ipaddr+0x64>)
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <netif_do_set_ipaddr+0x68>)
 80038ae:	f006 fbef 	bl	800a090 <iprintf>
 80038b2:	e7e8      	b.n	8003886 <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80038b4:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80038b6:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80038b8:	a901      	add	r1, sp, #4
 80038ba:	4620      	mov	r0, r4
 80038bc:	f001 f96a 	bl	8004b94 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80038c0:	a901      	add	r1, sp, #4
 80038c2:	4620      	mov	r0, r4
 80038c4:	f004 ff30 	bl	8008728 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80038c8:	6833      	ldr	r3, [r6, #0]
 80038ca:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80038cc:	2101      	movs	r1, #1
 80038ce:	4628      	mov	r0, r5
 80038d0:	f7ff ffac 	bl	800382c <netif_issue_reports>
    return 1; /* address changed */
 80038d4:	2001      	movs	r0, #1
 80038d6:	e7db      	b.n	8003890 <netif_do_set_ipaddr+0x18>
 80038d8:	0800b580 	.word	0x0800b580
 80038dc:	0800b5d8 	.word	0x0800b5d8
 80038e0:	0800b1cc 	.word	0x0800b1cc

080038e4 <netif_init>:
}
 80038e4:	4770      	bx	lr
	...

080038e8 <netif_set_addr>:
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80038ee:	4d15      	ldr	r5, [pc, #84]	; (8003944 <netif_set_addr+0x5c>)
 80038f0:	2900      	cmp	r1, #0
 80038f2:	bf18      	it	ne
 80038f4:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 80038f6:	4f13      	ldr	r7, [pc, #76]	; (8003944 <netif_set_addr+0x5c>)
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	bf18      	it	ne
 80038fc:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 80038fe:	4e11      	ldr	r6, [pc, #68]	; (8003944 <netif_set_addr+0x5c>)
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf18      	it	ne
 8003904:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8003906:	b10d      	cbz	r5, 800390c <netif_set_addr+0x24>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b993      	cbnz	r3, 8003932 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800390c:	aa01      	add	r2, sp, #4
 800390e:	4629      	mov	r1, r5
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff ffb1 	bl	8003878 <netif_do_set_ipaddr>
 8003916:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68a2      	ldr	r2, [r4, #8]
 800391c:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800391e:	bf18      	it	ne
 8003920:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8003922:	6833      	ldr	r3, [r6, #0]
 8003924:	68e2      	ldr	r2, [r4, #12]
 8003926:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003928:	bf18      	it	ne
 800392a:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800392c:	b119      	cbz	r1, 8003936 <netif_set_addr+0x4e>
}
 800392e:	b003      	add	sp, #12
 8003930:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8003932:	2100      	movs	r1, #0
 8003934:	e7f0      	b.n	8003918 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003936:	aa01      	add	r2, sp, #4
 8003938:	4629      	mov	r1, r5
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff ff9c 	bl	8003878 <netif_do_set_ipaddr>
}
 8003940:	e7f5      	b.n	800392e <netif_set_addr+0x46>
 8003942:	bf00      	nop
 8003944:	0800cfec 	.word	0x0800cfec

08003948 <netif_add>:
{
 8003948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800394e:	4606      	mov	r6, r0
 8003950:	2800      	cmp	r0, #0
 8003952:	d02c      	beq.n	80039ae <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003954:	2c00      	cmp	r4, #0
 8003956:	d033      	beq.n	80039c0 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003958:	2000      	movs	r0, #0
 800395a:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800395c:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800395e:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8003960:	4d3b      	ldr	r5, [pc, #236]	; (8003a50 <netif_add+0x108>)
 8003962:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8003964:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 8003966:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 800396a:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 800396c:	9808      	ldr	r0, [sp, #32]
 800396e:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8003970:	4838      	ldr	r0, [pc, #224]	; (8003a54 <netif_add+0x10c>)
 8003972:	7800      	ldrb	r0, [r0, #0]
 8003974:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8003978:	980a      	ldr	r0, [sp, #40]	; 0x28
 800397a:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800397c:	4836      	ldr	r0, [pc, #216]	; (8003a58 <netif_add+0x110>)
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf08      	it	eq
 8003982:	4603      	moveq	r3, r0
 8003984:	2a00      	cmp	r2, #0
 8003986:	bf08      	it	eq
 8003988:	4602      	moveq	r2, r0
 800398a:	2900      	cmp	r1, #0
 800398c:	bf08      	it	eq
 800398e:	4601      	moveq	r1, r0
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffa9 	bl	80038e8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8003996:	4630      	mov	r0, r6
 8003998:	47a0      	blx	r4
 800399a:	2800      	cmp	r0, #0
 800399c:	d147      	bne.n	8003a2e <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800399e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003a70 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80039a2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003a60 <netif_add+0x118>
 80039a6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003a74 <netif_add+0x12c>
 80039aa:	4f2c      	ldr	r7, [pc, #176]	; (8003a5c <netif_add+0x114>)
 80039ac:	e031      	b.n	8003a12 <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80039ae:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <netif_add+0x118>)
 80039b0:	f240 1227 	movw	r2, #295	; 0x127
 80039b4:	492b      	ldr	r1, [pc, #172]	; (8003a64 <netif_add+0x11c>)
 80039b6:	4829      	ldr	r0, [pc, #164]	; (8003a5c <netif_add+0x114>)
 80039b8:	f006 fb6a 	bl	800a090 <iprintf>
 80039bc:	4630      	mov	r0, r6
 80039be:	e045      	b.n	8003a4c <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <netif_add+0x118>)
 80039c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80039c6:	4928      	ldr	r1, [pc, #160]	; (8003a68 <netif_add+0x120>)
 80039c8:	4824      	ldr	r0, [pc, #144]	; (8003a5c <netif_add+0x114>)
 80039ca:	f006 fb61 	bl	800a090 <iprintf>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e03c      	b.n	8003a4c <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80039d2:	4643      	mov	r3, r8
 80039d4:	f240 128b 	movw	r2, #395	; 0x18b
 80039d8:	4649      	mov	r1, r9
 80039da:	4638      	mov	r0, r7
 80039dc:	f006 fb58 	bl	800a090 <iprintf>
 80039e0:	e009      	b.n	80039f6 <netif_add+0xae>
        if (netif2->num == netif->num) {
 80039e2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80039e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d00e      	beq.n	8003a0c <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80039ee:	6824      	ldr	r4, [r4, #0]
 80039f0:	b1fc      	cbz	r4, 8003a32 <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d0ed      	beq.n	80039d2 <netif_add+0x8a>
        num_netifs++;
 80039f6:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80039f8:	2dff      	cmp	r5, #255	; 0xff
 80039fa:	ddf2      	ble.n	80039e2 <netif_add+0x9a>
 80039fc:	4643      	mov	r3, r8
 80039fe:	f240 128d 	movw	r2, #397	; 0x18d
 8003a02:	491a      	ldr	r1, [pc, #104]	; (8003a6c <netif_add+0x124>)
 8003a04:	4638      	mov	r0, r7
 8003a06:	f006 fb43 	bl	800a090 <iprintf>
 8003a0a:	e7ea      	b.n	80039e2 <netif_add+0x9a>
          netif->num++;
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 8003a12:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003a16:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8003a18:	bf04      	itt	eq
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003a20:	f8da 4000 	ldr.w	r4, [sl]
 8003a24:	b12c      	cbz	r4, 8003a32 <netif_add+0xea>
      num_netifs = 0;
 8003a26:	2500      	movs	r5, #0
 8003a28:	e7e3      	b.n	80039f2 <netif_add+0xaa>
    netif_num = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e007      	b.n	8003a3e <netif_add+0xf6>
    return NULL;
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e00c      	b.n	8003a4c <netif_add+0x104>
  if (netif->num == 254) {
 8003a32:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003a36:	2bfe      	cmp	r3, #254	; 0xfe
 8003a38:	d0f7      	beq.n	8003a2a <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <netif_add+0x10c>)
 8003a40:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <netif_add+0x128>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8003a48:	601e      	str	r6, [r3, #0]
  return netif;
 8003a4a:	4630      	mov	r0, r6
}
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a50:	08003825 	.word	0x08003825
 8003a54:	2000a94c 	.word	0x2000a94c
 8003a58:	0800cfec 	.word	0x0800cfec
 8003a5c:	0800b1cc 	.word	0x0800b1cc
 8003a60:	0800b580 	.word	0x0800b580
 8003a64:	0800b5e8 	.word	0x0800b5e8
 8003a68:	0800b604 	.word	0x0800b604
 8003a6c:	0800b63c 	.word	0x0800b63c
 8003a70:	2000a948 	.word	0x2000a948
 8003a74:	0800b628 	.word	0x0800b628

08003a78 <netif_set_default>:
  netif_default = netif;
 8003a78:	4b01      	ldr	r3, [pc, #4]	; (8003a80 <netif_set_default+0x8>)
 8003a7a:	6018      	str	r0, [r3, #0]
}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	2000a944 	.word	0x2000a944

08003a84 <netif_set_up>:
{
 8003a84:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8003a86:	b128      	cbz	r0, 8003a94 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003a88:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003a8c:	f013 0f01 	tst.w	r3, #1
 8003a90:	d008      	beq.n	8003aa4 <netif_set_up+0x20>
}
 8003a92:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <netif_set_up+0x30>)
 8003a96:	f44f 7254 	mov.w	r2, #848	; 0x350
 8003a9a:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <netif_set_up+0x34>)
 8003a9c:	4807      	ldr	r0, [pc, #28]	; (8003abc <netif_set_up+0x38>)
 8003a9e:	f006 faf7 	bl	800a090 <iprintf>
 8003aa2:	e7f6      	b.n	8003a92 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003aac:	2103      	movs	r1, #3
 8003aae:	f7ff febd 	bl	800382c <netif_issue_reports>
 8003ab2:	e7ee      	b.n	8003a92 <netif_set_up+0xe>
 8003ab4:	0800b580 	.word	0x0800b580
 8003ab8:	0800b66c 	.word	0x0800b66c
 8003abc:	0800b1cc 	.word	0x0800b1cc

08003ac0 <netif_set_down>:
{
 8003ac0:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8003ac2:	b160      	cbz	r0, 8003ade <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8003ac4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003ac8:	f013 0f01 	tst.w	r3, #1
 8003acc:	d006      	beq.n	8003adc <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8003ace:	f023 0101 	bic.w	r1, r3, #1
 8003ad2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003ad6:	f013 0f08 	tst.w	r3, #8
 8003ada:	d108      	bne.n	8003aee <netif_set_down+0x2e>
}
 8003adc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <netif_set_down+0x34>)
 8003ae0:	f240 329b 	movw	r2, #923	; 0x39b
 8003ae4:	4904      	ldr	r1, [pc, #16]	; (8003af8 <netif_set_down+0x38>)
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <netif_set_down+0x3c>)
 8003ae8:	f006 fad2 	bl	800a090 <iprintf>
 8003aec:	e7f6      	b.n	8003adc <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8003aee:	f004 ff71 	bl	80089d4 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8003af2:	e7f3      	b.n	8003adc <netif_set_down+0x1c>
 8003af4:	0800b580 	.word	0x0800b580
 8003af8:	0800b688 	.word	0x0800b688
 8003afc:	0800b1cc 	.word	0x0800b1cc

08003b00 <netif_set_link_up>:
{
 8003b00:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8003b02:	b130      	cbz	r0, 8003b12 <netif_set_link_up+0x12>
 8003b04:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8003b06:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003b0a:	f013 0f04 	tst.w	r3, #4
 8003b0e:	d008      	beq.n	8003b22 <netif_set_link_up+0x22>
}
 8003b10:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <netif_set_link_up+0x3c>)
 8003b14:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8003b18:	4909      	ldr	r1, [pc, #36]	; (8003b40 <netif_set_link_up+0x40>)
 8003b1a:	480a      	ldr	r0, [pc, #40]	; (8003b44 <netif_set_link_up+0x44>)
 8003b1c:	f006 fab8 	bl	800a090 <iprintf>
 8003b20:	e7f6      	b.n	8003b10 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	f7ff fe7e 	bl	800382c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8003b30:	69e3      	ldr	r3, [r4, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ec      	beq.n	8003b10 <netif_set_link_up+0x10>
 8003b36:	4620      	mov	r0, r4
 8003b38:	4798      	blx	r3
 8003b3a:	e7e9      	b.n	8003b10 <netif_set_link_up+0x10>
 8003b3c:	0800b580 	.word	0x0800b580
 8003b40:	0800b6a8 	.word	0x0800b6a8
 8003b44:	0800b1cc 	.word	0x0800b1cc

08003b48 <netif_set_link_down>:
{
 8003b48:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8003b4a:	b160      	cbz	r0, 8003b66 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003b4c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003b50:	f013 0f04 	tst.w	r3, #4
 8003b54:	d006      	beq.n	8003b64 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8003b56:	f023 0304 	bic.w	r3, r3, #4
 8003b5a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8003b5e:	69c3      	ldr	r3, [r0, #28]
 8003b60:	b103      	cbz	r3, 8003b64 <netif_set_link_down+0x1c>
 8003b62:	4798      	blx	r3
}
 8003b64:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <netif_set_link_down+0x30>)
 8003b68:	f240 4206 	movw	r2, #1030	; 0x406
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <netif_set_link_down+0x34>)
 8003b6e:	4804      	ldr	r0, [pc, #16]	; (8003b80 <netif_set_link_down+0x38>)
 8003b70:	f006 fa8e 	bl	800a090 <iprintf>
 8003b74:	e7f6      	b.n	8003b64 <netif_set_link_down+0x1c>
 8003b76:	bf00      	nop
 8003b78:	0800b580 	.word	0x0800b580
 8003b7c:	0800b6cc 	.word	0x0800b6cc
 8003b80:	0800b1cc 	.word	0x0800b1cc

08003b84 <netif_set_link_callback>:
  if (netif) {
 8003b84:	b100      	cbz	r0, 8003b88 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8003b86:	61c1      	str	r1, [r0, #28]
}
 8003b88:	4770      	bx	lr
	...

08003b8c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	b160      	cbz	r0, 8003baa <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8003b90:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <netif_get_by_index+0x24>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	b150      	cbz	r0, 8003bac <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 8003b96:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8003ba2:	6800      	ldr	r0, [r0, #0]
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1f6      	bne.n	8003b96 <netif_get_by_index+0xa>
 8003ba8:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8003baa:	2000      	movs	r0, #0
}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	2000a948 	.word	0x2000a948

08003bb4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8003bb4:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003bb6:	b1d8      	cbz	r0, 8003bf0 <pbuf_add_header_impl+0x3c>
 8003bb8:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8003bba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003bbe:	d22e      	bcs.n	8003c1e <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8003bc0:	b339      	cbz	r1, 8003c12 <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8003bc2:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8003bc6:	8918      	ldrh	r0, [r3, #8]
 8003bc8:	4460      	add	r0, ip
 8003bca:	b280      	uxth	r0, r0
 8003bcc:	4560      	cmp	r0, ip
 8003bce:	d322      	bcc.n	8003c16 <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8003bd0:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 8003bd4:	f1be 0f00 	cmp.w	lr, #0
 8003bd8:	db13      	blt.n	8003c02 <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8003bda:	b1f2      	cbz	r2, 8003c1a <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8003be0:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8003be2:	895a      	ldrh	r2, [r3, #10]
 8003be4:	4494      	add	ip, r2
 8003be6:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8003bea:	8118      	strh	r0, [r3, #8]


  return 0;
 8003bec:	2000      	movs	r0, #0
 8003bee:	e017      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <pbuf_add_header_impl+0x70>)
 8003bf2:	f240 12df 	movw	r2, #479	; 0x1df
 8003bf6:	490c      	ldr	r1, [pc, #48]	; (8003c28 <pbuf_add_header_impl+0x74>)
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <pbuf_add_header_impl+0x78>)
 8003bfa:	f006 fa49 	bl	800a090 <iprintf>
    return 1;
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e00e      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8003c06:	f103 0210 	add.w	r2, r3, #16
 8003c0a:	4291      	cmp	r1, r2
 8003c0c:	d2e8      	bcs.n	8003be0 <pbuf_add_header_impl+0x2c>
      return 1;
 8003c0e:	2001      	movs	r0, #1
 8003c10:	e006      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
    return 0;
 8003c12:	2000      	movs	r0, #0
 8003c14:	e004      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
    return 1;
 8003c16:	2001      	movs	r0, #1
 8003c18:	e002      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
      return 1;
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	e000      	b.n	8003c20 <pbuf_add_header_impl+0x6c>
    return 1;
 8003c1e:	2001      	movs	r0, #1
}
 8003c20:	bd08      	pop	{r3, pc}
 8003c22:	bf00      	nop
 8003c24:	0800b6f0 	.word	0x0800b6f0
 8003c28:	0800b720 	.word	0x0800b720
 8003c2c:	0800b1cc 	.word	0x0800b1cc

08003c30 <pbuf_free_ooseq>:
{
 8003c30:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <pbuf_free_ooseq+0x20>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <pbuf_free_ooseq+0x24>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	b138      	cbz	r0, 8003c4e <pbuf_free_ooseq+0x1e>
    if (pcb->ooseq != NULL) {
 8003c3e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003c40:	b91b      	cbnz	r3, 8003c4a <pbuf_free_ooseq+0x1a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003c42:	68c0      	ldr	r0, [r0, #12]
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d1fa      	bne.n	8003c3e <pbuf_free_ooseq+0xe>
 8003c48:	e001      	b.n	8003c4e <pbuf_free_ooseq+0x1e>
      tcp_free_ooseq(pcb);
 8003c4a:	f000 fe3b 	bl	80048c4 <tcp_free_ooseq>
}
 8003c4e:	bd08      	pop	{r3, pc}
 8003c50:	2000a94d 	.word	0x2000a94d
 8003c54:	2000a950 	.word	0x2000a950

08003c58 <pbuf_alloc_reference>:
{
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460d      	mov	r5, r1
 8003c5e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8003c60:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d110      	bne.n	8003c8c <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003c6a:	2007      	movs	r0, #7
 8003c6c:	f7ff fd90 	bl	8003790 <memp_malloc>
  if (p == NULL) {
 8003c70:	4603      	mov	r3, r0
 8003c72:	b148      	cbz	r0, 8003c88 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8003c74:	2200      	movs	r2, #0
 8003c76:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8003c78:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8003c7a:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8003c7c:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8003c7e:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8003c80:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8003c82:	2101      	movs	r1, #1
 8003c84:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003c86:	73c2      	strb	r2, [r0, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <pbuf_alloc_reference+0x44>)
 8003c8e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8003c92:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <pbuf_alloc_reference+0x48>)
 8003c94:	4803      	ldr	r0, [pc, #12]	; (8003ca4 <pbuf_alloc_reference+0x4c>)
 8003c96:	f006 f9fb 	bl	800a090 <iprintf>
 8003c9a:	e7e6      	b.n	8003c6a <pbuf_alloc_reference+0x12>
 8003c9c:	0800b6f0 	.word	0x0800b6f0
 8003ca0:	0800b72c 	.word	0x0800b72c
 8003ca4:	0800b1cc 	.word	0x0800b1cc

08003ca8 <pbuf_alloced_custom>:
{
 8003ca8:	b430      	push	{r4, r5}
 8003caa:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8003cac:	3003      	adds	r0, #3
 8003cae:	f020 0003 	bic.w	r0, r0, #3
 8003cb2:	eb01 0c00 	add.w	ip, r1, r0
 8003cb6:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8003cba:	45ac      	cmp	ip, r5
 8003cbc:	d80f      	bhi.n	8003cde <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8003cbe:	b104      	cbz	r4, 8003cc2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8003cc0:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8003cc2:	4618      	mov	r0, r3
  p->next = NULL;
 8003cc4:	2500      	movs	r5, #0
 8003cc6:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8003cc8:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8003cca:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8003ccc:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 8003cce:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003cd8:	73dd      	strb	r5, [r3, #15]
}
 8003cda:	bc30      	pop	{r4, r5}
 8003cdc:	4770      	bx	lr
    return NULL;
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e7fb      	b.n	8003cda <pbuf_alloced_custom+0x32>

08003ce2 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8003ce2:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f7ff ff65 	bl	8003bb4 <pbuf_add_header_impl>
}
 8003cea:	bd08      	pop	{r3, pc}

08003cec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8003cec:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8003cee:	b190      	cbz	r0, 8003d16 <pbuf_remove_header+0x2a>
 8003cf0:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8003cf2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003cf6:	d222      	bcs.n	8003d3e <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8003cf8:	b1f9      	cbz	r1, 8003d3a <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8003cfa:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8003cfc:	895a      	ldrh	r2, [r3, #10]
 8003cfe:	4282      	cmp	r2, r0
 8003d00:	d312      	bcc.n	8003d28 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8003d02:	685c      	ldr	r4, [r3, #4]
 8003d04:	4421      	add	r1, r4
 8003d06:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8003d08:	1a12      	subs	r2, r2, r0
 8003d0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8003d0c:	891a      	ldrh	r2, [r3, #8]
 8003d0e:	1a10      	subs	r0, r2, r0
 8003d10:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8003d12:	2000      	movs	r0, #0
}
 8003d14:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <pbuf_remove_header+0x58>)
 8003d18:	f240 224b 	movw	r2, #587	; 0x24b
 8003d1c:	490a      	ldr	r1, [pc, #40]	; (8003d48 <pbuf_remove_header+0x5c>)
 8003d1e:	480b      	ldr	r0, [pc, #44]	; (8003d4c <pbuf_remove_header+0x60>)
 8003d20:	f006 f9b6 	bl	800a090 <iprintf>
    return 1;
 8003d24:	2001      	movs	r0, #1
 8003d26:	e7f5      	b.n	8003d14 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <pbuf_remove_header+0x58>)
 8003d2a:	f240 2255 	movw	r2, #597	; 0x255
 8003d2e:	4908      	ldr	r1, [pc, #32]	; (8003d50 <pbuf_remove_header+0x64>)
 8003d30:	4806      	ldr	r0, [pc, #24]	; (8003d4c <pbuf_remove_header+0x60>)
 8003d32:	f006 f9ad 	bl	800a090 <iprintf>
 8003d36:	2001      	movs	r0, #1
 8003d38:	e7ec      	b.n	8003d14 <pbuf_remove_header+0x28>
    return 0;
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e7ea      	b.n	8003d14 <pbuf_remove_header+0x28>
    return 1;
 8003d3e:	2001      	movs	r0, #1
 8003d40:	e7e8      	b.n	8003d14 <pbuf_remove_header+0x28>
 8003d42:	bf00      	nop
 8003d44:	0800b6f0 	.word	0x0800b6f0
 8003d48:	0800b720 	.word	0x0800b720
 8003d4c:	0800b1cc 	.word	0x0800b1cc
 8003d50:	0800b740 	.word	0x0800b740

08003d54 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8003d54:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8003d56:	2900      	cmp	r1, #0
 8003d58:	db03      	blt.n	8003d62 <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f7ff ff2a 	bl	8003bb4 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8003d60:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8003d62:	4249      	negs	r1, r1
 8003d64:	f7ff ffc2 	bl	8003cec <pbuf_remove_header>
 8003d68:	e7fa      	b.n	8003d60 <pbuf_header_force+0xc>
	...

08003d6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8003d70:	b130      	cbz	r0, 8003d80 <pbuf_free+0x14>
 8003d72:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8003d74:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003d76:	4f2c      	ldr	r7, [pc, #176]	; (8003e28 <pbuf_free+0xbc>)
 8003d78:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003e3c <pbuf_free+0xd0>
 8003d7c:	4e2b      	ldr	r6, [pc, #172]	; (8003e2c <pbuf_free+0xc0>)
 8003d7e:	e01b      	b.n	8003db8 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <pbuf_free+0xbc>)
 8003d82:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8003d86:	492a      	ldr	r1, [pc, #168]	; (8003e30 <pbuf_free+0xc4>)
 8003d88:	4828      	ldr	r0, [pc, #160]	; (8003e2c <pbuf_free+0xc0>)
 8003d8a:	f006 f981 	bl	800a090 <iprintf>
    return 0;
 8003d8e:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8003d90:	4628      	mov	r0, r5
 8003d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003d96:	463b      	mov	r3, r7
 8003d98:	f240 22f1 	movw	r2, #753	; 0x2f1
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f006 f976 	bl	800a090 <iprintf>
 8003da4:	e00b      	b.n	8003dbe <pbuf_free+0x52>
        pc->custom_free_function(p);
 8003da6:	6923      	ldr	r3, [r4, #16]
 8003da8:	4620      	mov	r0, r4
 8003daa:	4798      	blx	r3
      count++;
 8003dac:	3501      	adds	r5, #1
 8003dae:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8003db0:	f1b9 0f00 	cmp.w	r9, #0
 8003db4:	d0ec      	beq.n	8003d90 <pbuf_free+0x24>
      p = q;
 8003db6:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8003db8:	7ba3      	ldrb	r3, [r4, #14]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0eb      	beq.n	8003d96 <pbuf_free+0x2a>
    ref = --(p->ref);
 8003dbe:	7ba3      	ldrb	r3, [r4, #14]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e2      	bne.n	8003d90 <pbuf_free+0x24>
      q = p->next;
 8003dca:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8003dce:	7b63      	ldrb	r3, [r4, #13]
 8003dd0:	f013 0f02 	tst.w	r3, #2
 8003dd4:	d00a      	beq.n	8003dec <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e4      	bne.n	8003da6 <pbuf_free+0x3a>
 8003ddc:	463b      	mov	r3, r7
 8003dde:	f240 22ff 	movw	r2, #767	; 0x2ff
 8003de2:	4914      	ldr	r1, [pc, #80]	; (8003e34 <pbuf_free+0xc8>)
 8003de4:	4630      	mov	r0, r6
 8003de6:	f006 f953 	bl	800a090 <iprintf>
 8003dea:	e7dc      	b.n	8003da6 <pbuf_free+0x3a>
      alloc_src = pbuf_get_allocsrc(p);
 8003dec:	7b23      	ldrb	r3, [r4, #12]
 8003dee:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d006      	beq.n	8003e04 <pbuf_free+0x98>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d009      	beq.n	8003e0e <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8003dfa:	b96b      	cbnz	r3, 8003e18 <pbuf_free+0xac>
          mem_free(p);
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7ff fa29 	bl	8003254 <mem_free>
 8003e02:	e7d3      	b.n	8003dac <pbuf_free+0x40>
          memp_free(MEMP_PBUF_POOL, p);
 8003e04:	4621      	mov	r1, r4
 8003e06:	2008      	movs	r0, #8
 8003e08:	f7ff fcf2 	bl	80037f0 <memp_free>
 8003e0c:	e7ce      	b.n	8003dac <pbuf_free+0x40>
          memp_free(MEMP_PBUF, p);
 8003e0e:	4621      	mov	r1, r4
 8003e10:	2007      	movs	r0, #7
 8003e12:	f7ff fced 	bl	80037f0 <memp_free>
 8003e16:	e7c9      	b.n	8003dac <pbuf_free+0x40>
          LWIP_ASSERT("invalid pbuf type", 0);
 8003e18:	463b      	mov	r3, r7
 8003e1a:	f240 320f 	movw	r2, #783	; 0x30f
 8003e1e:	4906      	ldr	r1, [pc, #24]	; (8003e38 <pbuf_free+0xcc>)
 8003e20:	4630      	mov	r0, r6
 8003e22:	f006 f935 	bl	800a090 <iprintf>
 8003e26:	e7c1      	b.n	8003dac <pbuf_free+0x40>
 8003e28:	0800b6f0 	.word	0x0800b6f0
 8003e2c:	0800b1cc 	.word	0x0800b1cc
 8003e30:	0800b720 	.word	0x0800b720
 8003e34:	0800b778 	.word	0x0800b778
 8003e38:	0800b79c 	.word	0x0800b79c
 8003e3c:	0800b760 	.word	0x0800b760

08003e40 <pbuf_alloc>:
{
 8003e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8003e46:	b285      	uxth	r5, r0
  switch (type) {
 8003e48:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8003e4c:	d03d      	beq.n	8003eca <pbuf_alloc+0x8a>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	d80e      	bhi.n	8003e70 <pbuf_alloc+0x30>
 8003e52:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d02f      	beq.n	8003ebc <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003e5c:	4b3c      	ldr	r3, [pc, #240]	; (8003f50 <pbuf_alloc+0x110>)
 8003e5e:	f240 1227 	movw	r2, #295	; 0x127
 8003e62:	493c      	ldr	r1, [pc, #240]	; (8003f54 <pbuf_alloc+0x114>)
 8003e64:	483c      	ldr	r0, [pc, #240]	; (8003f58 <pbuf_alloc+0x118>)
 8003e66:	f006 f913 	bl	800a090 <iprintf>
      return NULL;
 8003e6a:	f04f 0800 	mov.w	r8, #0
 8003e6e:	e029      	b.n	8003ec4 <pbuf_alloc+0x84>
  switch (type) {
 8003e70:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8003e74:	d1f2      	bne.n	8003e5c <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8003e76:	1ceb      	adds	r3, r5, #3
 8003e78:	f023 0303 	bic.w	r3, r3, #3
 8003e7c:	1cca      	adds	r2, r1, #3
 8003e7e:	f022 0503 	bic.w	r5, r2, #3
 8003e82:	442b      	add	r3, r5
 8003e84:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8003e86:	f103 0010 	add.w	r0, r3, #16
 8003e8a:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	d359      	bcc.n	8003f44 <pbuf_alloc+0x104>
 8003e90:	4285      	cmp	r5, r0
 8003e92:	d85a      	bhi.n	8003f4a <pbuf_alloc+0x10a>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8003e94:	f7ff fb5a 	bl	800354c <mem_malloc>
      if (p == NULL) {
 8003e98:	4680      	mov	r8, r0
 8003e9a:	b198      	cbz	r0, 8003ec4 <pbuf_alloc+0x84>
  p->next = NULL;
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8003ea0:	1903      	adds	r3, r0, r4
 8003ea2:	3313      	adds	r3, #19
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8003ea8:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8003eaa:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8003eac:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8003eb2:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003eb8:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8003eba:	e003      	b.n	8003ec4 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7ff fecb 	bl	8003c58 <pbuf_alloc_reference>
 8003ec2:	4680      	mov	r8, r0
}
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8003eca:	2400      	movs	r4, #0
 8003ecc:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003ece:	f04f 0a08 	mov.w	sl, #8
  p->next = NULL;
 8003ed2:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 8003ed4:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8003ed8:	e011      	b.n	8003efe <pbuf_alloc+0xbe>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <pbuf_alloc+0x11c>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
          if (p) {
 8003ee0:	f1b8 0f00 	cmp.w	r8, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <pbuf_alloc+0x84>
            pbuf_free(p);
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f7ff ff40 	bl	8003d6c <pbuf_free>
          return NULL;
 8003eec:	46a0      	mov	r8, r4
 8003eee:	e7e9      	b.n	8003ec4 <pbuf_alloc+0x84>
          last->next = q;
 8003ef0:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 8003ef4:	1a76      	subs	r6, r6, r1
 8003ef6:	b2b6      	uxth	r6, r6
        offset = 0;
 8003ef8:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	d0e2      	beq.n	8003ec4 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003efe:	46a1      	mov	r9, r4
 8003f00:	4650      	mov	r0, sl
 8003f02:	f7ff fc45 	bl	8003790 <memp_malloc>
        if (q == NULL) {
 8003f06:	4604      	mov	r4, r0
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d0e6      	beq.n	8003eda <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8003f0c:	1ce9      	adds	r1, r5, #3
 8003f0e:	f021 0103 	bic.w	r1, r1, #3
 8003f12:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8003f16:	b289      	uxth	r1, r1
 8003f18:	42b1      	cmp	r1, r6
 8003f1a:	bf28      	it	cs
 8003f1c:	4631      	movcs	r1, r6
  p->next = NULL;
 8003f1e:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8003f20:	4405      	add	r5, r0
 8003f22:	3513      	adds	r5, #19
 8003f24:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 8003f28:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8003f2a:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8003f2c:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8003f2e:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8003f32:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8003f34:	2301      	movs	r3, #1
 8003f36:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003f38:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 8003f3a:	f1b8 0f00 	cmp.w	r8, #0
 8003f3e:	d1d7      	bne.n	8003ef0 <pbuf_alloc+0xb0>
          p = q;
 8003f40:	4680      	mov	r8, r0
 8003f42:	e7d7      	b.n	8003ef4 <pbuf_alloc+0xb4>
        return NULL;
 8003f44:	f04f 0800 	mov.w	r8, #0
 8003f48:	e7bc      	b.n	8003ec4 <pbuf_alloc+0x84>
 8003f4a:	f04f 0800 	mov.w	r8, #0
 8003f4e:	e7b9      	b.n	8003ec4 <pbuf_alloc+0x84>
 8003f50:	0800b6f0 	.word	0x0800b6f0
 8003f54:	0800b7b0 	.word	0x0800b7b0
 8003f58:	0800b1cc 	.word	0x0800b1cc
 8003f5c:	2000a94d 	.word	0x2000a94d

08003f60 <pbuf_realloc>:
{
 8003f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f64:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003f66:	4604      	mov	r4, r0
 8003f68:	b168      	cbz	r0, 8003f86 <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 8003f6a:	8927      	ldrh	r7, [r4, #8]
 8003f6c:	42b7      	cmp	r7, r6
 8003f6e:	d939      	bls.n	8003fe4 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 8003f70:	8963      	ldrh	r3, [r4, #10]
 8003f72:	429e      	cmp	r6, r3
 8003f74:	d923      	bls.n	8003fbe <pbuf_realloc+0x5e>
  rem_len = new_len;
 8003f76:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003f78:	f8df a090 	ldr.w	sl, [pc, #144]	; 800400c <pbuf_realloc+0xac>
 8003f7c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800401c <pbuf_realloc+0xbc>
 8003f80:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004014 <pbuf_realloc+0xb4>
 8003f84:	e00a      	b.n	8003f9c <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003f86:	4b21      	ldr	r3, [pc, #132]	; (800400c <pbuf_realloc+0xac>)
 8003f88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8003f8c:	4920      	ldr	r1, [pc, #128]	; (8004010 <pbuf_realloc+0xb0>)
 8003f8e:	4821      	ldr	r0, [pc, #132]	; (8004014 <pbuf_realloc+0xb4>)
 8003f90:	f006 f87e 	bl	800a090 <iprintf>
 8003f94:	e7e9      	b.n	8003f6a <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 8003f96:	8963      	ldrh	r3, [r4, #10]
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	d211      	bcs.n	8003fc0 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8003f9c:	1aed      	subs	r5, r5, r3
 8003f9e:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8003fa0:	1bf3      	subs	r3, r6, r7
 8003fa2:	8922      	ldrh	r2, [r4, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8003fa8:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8003faa:	2c00      	cmp	r4, #0
 8003fac:	d1f3      	bne.n	8003f96 <pbuf_realloc+0x36>
 8003fae:	4653      	mov	r3, sl
 8003fb0:	f240 12af 	movw	r2, #431	; 0x1af
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f006 f86a 	bl	800a090 <iprintf>
 8003fbc:	e7eb      	b.n	8003f96 <pbuf_realloc+0x36>
  rem_len = new_len;
 8003fbe:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8003fc0:	7b22      	ldrb	r2, [r4, #12]
 8003fc2:	f012 0f0f 	tst.w	r2, #15
 8003fc6:	d105      	bne.n	8003fd4 <pbuf_realloc+0x74>
 8003fc8:	42ab      	cmp	r3, r5
 8003fca:	d003      	beq.n	8003fd4 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8003fcc:	7b63      	ldrb	r3, [r4, #13]
 8003fce:	f013 0f02 	tst.w	r3, #2
 8003fd2:	d009      	beq.n	8003fe8 <pbuf_realloc+0x88>
  q->len = rem_len;
 8003fd4:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8003fd6:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8003fd8:	6820      	ldr	r0, [r4, #0]
 8003fda:	b108      	cbz	r0, 8003fe0 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8003fdc:	f7ff fec6 	bl	8003d6c <pbuf_free>
  q->next = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6023      	str	r3, [r4, #0]
}
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	1b1b      	subs	r3, r3, r4
 8003fec:	18e9      	adds	r1, r5, r3
 8003fee:	b289      	uxth	r1, r1
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff f9f9 	bl	80033e8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d1eb      	bne.n	8003fd4 <pbuf_realloc+0x74>
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <pbuf_realloc+0xac>)
 8003ffe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004002:	4905      	ldr	r1, [pc, #20]	; (8004018 <pbuf_realloc+0xb8>)
 8004004:	4803      	ldr	r0, [pc, #12]	; (8004014 <pbuf_realloc+0xb4>)
 8004006:	f006 f843 	bl	800a090 <iprintf>
 800400a:	e7e3      	b.n	8003fd4 <pbuf_realloc+0x74>
 800400c:	0800b6f0 	.word	0x0800b6f0
 8004010:	0800b7cc 	.word	0x0800b7cc
 8004014:	0800b1cc 	.word	0x0800b1cc
 8004018:	0800b7fc 	.word	0x0800b7fc
 800401c:	0800b7e4 	.word	0x0800b7e4

08004020 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8004020:	4603      	mov	r3, r0
 8004022:	b130      	cbz	r0, 8004032 <pbuf_clen+0x12>
  len = 0;
 8004024:	2000      	movs	r0, #0
    ++len;
 8004026:	3001      	adds	r0, #1
 8004028:	b280      	uxth	r0, r0
    p = p->next;
 800402a:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1fa      	bne.n	8004026 <pbuf_clen+0x6>
 8004030:	4770      	bx	lr
  len = 0;
 8004032:	2000      	movs	r0, #0
  }
  return len;
}
 8004034:	4770      	bx	lr
	...

08004038 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8004038:	b170      	cbz	r0, 8004058 <pbuf_ref+0x20>
{
 800403a:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800403c:	7b83      	ldrb	r3, [r0, #14]
 800403e:	3301      	adds	r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004044:	b103      	cbz	r3, 8004048 <pbuf_ref+0x10>
  }
}
 8004046:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <pbuf_ref+0x24>)
 800404a:	f240 3242 	movw	r2, #834	; 0x342
 800404e:	4904      	ldr	r1, [pc, #16]	; (8004060 <pbuf_ref+0x28>)
 8004050:	4804      	ldr	r0, [pc, #16]	; (8004064 <pbuf_ref+0x2c>)
 8004052:	f006 f81d 	bl	800a090 <iprintf>
}
 8004056:	e7f6      	b.n	8004046 <pbuf_ref+0xe>
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	0800b6f0 	.word	0x0800b6f0
 8004060:	0800b818 	.word	0x0800b818
 8004064:	0800b1cc 	.word	0x0800b1cc

08004068 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004068:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800406a:	b130      	cbz	r0, 800407a <pbuf_cat+0x12>
 800406c:	460d      	mov	r5, r1
 800406e:	4602      	mov	r2, r0
 8004070:	b119      	cbz	r1, 800407a <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004072:	6804      	ldr	r4, [r0, #0]
 8004074:	b954      	cbnz	r4, 800408c <pbuf_cat+0x24>
 8004076:	4604      	mov	r4, r0
 8004078:	e010      	b.n	800409c <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <pbuf_cat+0x68>)
 800407c:	f240 3259 	movw	r2, #857	; 0x359
 8004080:	4914      	ldr	r1, [pc, #80]	; (80040d4 <pbuf_cat+0x6c>)
 8004082:	4815      	ldr	r0, [pc, #84]	; (80040d8 <pbuf_cat+0x70>)
 8004084:	f006 f804 	bl	800a090 <iprintf>
 8004088:	e021      	b.n	80040ce <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 800408a:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800408c:	8913      	ldrh	r3, [r2, #8]
 800408e:	8928      	ldrh	r0, [r5, #8]
 8004090:	4403      	add	r3, r0
 8004092:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	4622      	mov	r2, r4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f6      	bne.n	800408a <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800409c:	8922      	ldrh	r2, [r4, #8]
 800409e:	8963      	ldrh	r3, [r4, #10]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d00f      	beq.n	80040c4 <pbuf_cat+0x5c>
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <pbuf_cat+0x68>)
 80040a6:	f240 3262 	movw	r2, #866	; 0x362
 80040aa:	490c      	ldr	r1, [pc, #48]	; (80040dc <pbuf_cat+0x74>)
 80040ac:	480a      	ldr	r0, [pc, #40]	; (80040d8 <pbuf_cat+0x70>)
 80040ae:	f005 ffef 	bl	800a090 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	b133      	cbz	r3, 80040c4 <pbuf_cat+0x5c>
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <pbuf_cat+0x68>)
 80040b8:	f240 3263 	movw	r2, #867	; 0x363
 80040bc:	4908      	ldr	r1, [pc, #32]	; (80040e0 <pbuf_cat+0x78>)
 80040be:	4806      	ldr	r0, [pc, #24]	; (80040d8 <pbuf_cat+0x70>)
 80040c0:	f005 ffe6 	bl	800a090 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80040c4:	8923      	ldrh	r3, [r4, #8]
 80040c6:	892a      	ldrh	r2, [r5, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80040cc:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	0800b6f0 	.word	0x0800b6f0
 80040d4:	0800b82c 	.word	0x0800b82c
 80040d8:	0800b1cc 	.word	0x0800b1cc
 80040dc:	0800b864 	.word	0x0800b864
 80040e0:	0800b894 	.word	0x0800b894

080040e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80040e4:	b510      	push	{r4, lr}
 80040e6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80040e8:	f7ff ffbe 	bl	8004068 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ffa3 	bl	8004038 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80040f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80040f8:	b178      	cbz	r0, 800411a <pbuf_copy+0x26>
 80040fa:	460c      	mov	r4, r1
 80040fc:	4606      	mov	r6, r0
 80040fe:	b161      	cbz	r1, 800411a <pbuf_copy+0x26>
 8004100:	8902      	ldrh	r2, [r0, #8]
 8004102:	890b      	ldrh	r3, [r1, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d308      	bcc.n	800411a <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8004108:	2700      	movs	r7, #0
 800410a:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800410c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800421c <pbuf_copy+0x128>
 8004110:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004234 <pbuf_copy+0x140>
 8004114:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004224 <pbuf_copy+0x130>
 8004118:	e050      	b.n	80041bc <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800411a:	4b40      	ldr	r3, [pc, #256]	; (800421c <pbuf_copy+0x128>)
 800411c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004120:	493f      	ldr	r1, [pc, #252]	; (8004220 <pbuf_copy+0x12c>)
 8004122:	4840      	ldr	r0, [pc, #256]	; (8004224 <pbuf_copy+0x130>)
 8004124:	f005 ffb4 	bl	800a090 <iprintf>
 8004128:	f06f 000f 	mvn.w	r0, #15
 800412c:	e016      	b.n	800415c <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800412e:	4653      	mov	r3, sl
 8004130:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004134:	4659      	mov	r1, fp
 8004136:	4648      	mov	r0, r9
 8004138:	f005 ffaa 	bl	800a090 <iprintf>
 800413c:	e052      	b.n	80041e4 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800413e:	4653      	mov	r3, sl
 8004140:	f240 32da 	movw	r2, #986	; 0x3da
 8004144:	4938      	ldr	r1, [pc, #224]	; (8004228 <pbuf_copy+0x134>)
 8004146:	4648      	mov	r0, r9
 8004148:	f005 ffa2 	bl	800a090 <iprintf>
 800414c:	e04d      	b.n	80041ea <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800414e:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004150:	b116      	cbz	r6, 8004158 <pbuf_copy+0x64>
      offset_to = 0;
 8004152:	f04f 0800 	mov.w	r8, #0
 8004156:	e050      	b.n	80041fa <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004158:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800415a:	b90c      	cbnz	r4, 8004160 <pbuf_copy+0x6c>
}
 800415c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <pbuf_copy+0x128>)
 8004162:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004166:	4931      	ldr	r1, [pc, #196]	; (800422c <pbuf_copy+0x138>)
 8004168:	482e      	ldr	r0, [pc, #184]	; (8004224 <pbuf_copy+0x130>)
 800416a:	f005 ff91 	bl	800a090 <iprintf>
 800416e:	f06f 000f 	mvn.w	r0, #15
 8004172:	e7f3      	b.n	800415c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d045      	beq.n	8004206 <pbuf_copy+0x112>
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <pbuf_copy+0x128>)
 800417c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8004180:	492b      	ldr	r1, [pc, #172]	; (8004230 <pbuf_copy+0x13c>)
 8004182:	4828      	ldr	r0, [pc, #160]	; (8004224 <pbuf_copy+0x130>)
 8004184:	f005 ff84 	bl	800a090 <iprintf>
 8004188:	f06f 0005 	mvn.w	r0, #5
 800418c:	e7e6      	b.n	800415c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <pbuf_copy+0x128>)
 8004190:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004194:	4926      	ldr	r1, [pc, #152]	; (8004230 <pbuf_copy+0x13c>)
 8004196:	4823      	ldr	r0, [pc, #140]	; (8004224 <pbuf_copy+0x130>)
 8004198:	f005 ff7a 	bl	800a090 <iprintf>
 800419c:	f06f 0005 	mvn.w	r0, #5
 80041a0:	e7dc      	b.n	800415c <pbuf_copy+0x68>
  return ERR_OK;
 80041a2:	2000      	movs	r0, #0
 80041a4:	e7da      	b.n	800415c <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80041a6:	2e00      	cmp	r6, #0
 80041a8:	d034      	beq.n	8004214 <pbuf_copy+0x120>
 80041aa:	8972      	ldrh	r2, [r6, #10]
 80041ac:	8933      	ldrh	r3, [r6, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d132      	bne.n	8004218 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80041b2:	6833      	ldr	r3, [r6, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ea      	bne.n	800418e <pbuf_copy+0x9a>
  } while (p_from);
 80041b8:	2c00      	cmp	r4, #0
 80041ba:	d0f2      	beq.n	80041a2 <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80041bc:	8975      	ldrh	r5, [r6, #10]
 80041be:	eba5 0508 	sub.w	r5, r5, r8
 80041c2:	8963      	ldrh	r3, [r4, #10]
 80041c4:	1bdb      	subs	r3, r3, r7
 80041c6:	429d      	cmp	r5, r3
 80041c8:	bf28      	it	cs
 80041ca:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80041cc:	6870      	ldr	r0, [r6, #4]
 80041ce:	6861      	ldr	r1, [r4, #4]
 80041d0:	462a      	mov	r2, r5
 80041d2:	4439      	add	r1, r7
 80041d4:	4440      	add	r0, r8
 80041d6:	f005 ff45 	bl	800a064 <memcpy>
    offset_to += len;
 80041da:	44a8      	add	r8, r5
    offset_from += len;
 80041dc:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80041de:	8973      	ldrh	r3, [r6, #10]
 80041e0:	4543      	cmp	r3, r8
 80041e2:	d3a4      	bcc.n	800412e <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80041e4:	8963      	ldrh	r3, [r4, #10]
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	d3a9      	bcc.n	800413e <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 80041ea:	8963      	ldrh	r3, [r4, #10]
 80041ec:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 80041ee:	bf9c      	itt	ls
 80041f0:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80041f2:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 80041f4:	8973      	ldrh	r3, [r6, #10]
 80041f6:	4543      	cmp	r3, r8
 80041f8:	d0a9      	beq.n	800414e <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80041fa:	2c00      	cmp	r4, #0
 80041fc:	d0d3      	beq.n	80041a6 <pbuf_copy+0xb2>
 80041fe:	8962      	ldrh	r2, [r4, #10]
 8004200:	8923      	ldrh	r3, [r4, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d0b6      	beq.n	8004174 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004206:	2e00      	cmp	r6, #0
 8004208:	d0d8      	beq.n	80041bc <pbuf_copy+0xc8>
 800420a:	8972      	ldrh	r2, [r6, #10]
 800420c:	8933      	ldrh	r3, [r6, #8]
 800420e:	429a      	cmp	r2, r3
 8004210:	d1d4      	bne.n	80041bc <pbuf_copy+0xc8>
 8004212:	e7ce      	b.n	80041b2 <pbuf_copy+0xbe>
  return ERR_OK;
 8004214:	2000      	movs	r0, #0
 8004216:	e7a1      	b.n	800415c <pbuf_copy+0x68>
 8004218:	2000      	movs	r0, #0
 800421a:	e79f      	b.n	800415c <pbuf_copy+0x68>
 800421c:	0800b6f0 	.word	0x0800b6f0
 8004220:	0800b8a4 	.word	0x0800b8a4
 8004224:	0800b1cc 	.word	0x0800b1cc
 8004228:	0800b8ec 	.word	0x0800b8ec
 800422c:	0800b908 	.word	0x0800b908
 8004230:	0800b918 	.word	0x0800b918
 8004234:	0800b8d4 	.word	0x0800b8d4

08004238 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800423c:	b148      	cbz	r0, 8004252 <pbuf_copy_partial+0x1a>
 800423e:	4688      	mov	r8, r1
 8004240:	4692      	mov	sl, r2
 8004242:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004244:	b181      	cbz	r1, 8004268 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8004246:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004248:	b15a      	cbz	r2, 8004262 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 800424a:	2700      	movs	r7, #0
  u16_t left = 0;
 800424c:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 800424e:	46b9      	mov	r9, r7
 8004250:	e02f      	b.n	80042b2 <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <pbuf_copy_partial+0x8c>)
 8004254:	f240 420a 	movw	r2, #1034	; 0x40a
 8004258:	491b      	ldr	r1, [pc, #108]	; (80042c8 <pbuf_copy_partial+0x90>)
 800425a:	481c      	ldr	r0, [pc, #112]	; (80042cc <pbuf_copy_partial+0x94>)
 800425c:	f005 ff18 	bl	800a090 <iprintf>
 8004260:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 8004262:	4638      	mov	r0, r7
 8004264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <pbuf_copy_partial+0x8c>)
 800426a:	f240 420b 	movw	r2, #1035	; 0x40b
 800426e:	4918      	ldr	r1, [pc, #96]	; (80042d0 <pbuf_copy_partial+0x98>)
 8004270:	4816      	ldr	r0, [pc, #88]	; (80042cc <pbuf_copy_partial+0x94>)
 8004272:	f005 ff0d 	bl	800a090 <iprintf>
 8004276:	2700      	movs	r7, #0
 8004278:	e7f3      	b.n	8004262 <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 800427a:	896c      	ldrh	r4, [r5, #10]
 800427c:	1ae4      	subs	r4, r4, r3
 800427e:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8004280:	4554      	cmp	r4, sl
 8004282:	bf28      	it	cs
 8004284:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004286:	6869      	ldr	r1, [r5, #4]
 8004288:	4622      	mov	r2, r4
 800428a:	4419      	add	r1, r3
 800428c:	eb08 0006 	add.w	r0, r8, r6
 8004290:	f005 fee8 	bl	800a064 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004294:	4427      	add	r7, r4
 8004296:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8004298:	4426      	add	r6, r4
 800429a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800429c:	ebaa 0404 	sub.w	r4, sl, r4
 80042a0:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 80042a4:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80042a6:	682d      	ldr	r5, [r5, #0]
 80042a8:	f1ba 0f00 	cmp.w	sl, #0
 80042ac:	d0d9      	beq.n	8004262 <pbuf_copy_partial+0x2a>
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	d0d7      	beq.n	8004262 <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0e1      	beq.n	800427a <pbuf_copy_partial+0x42>
 80042b6:	896a      	ldrh	r2, [r5, #10]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d8de      	bhi.n	800427a <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	e7f1      	b.n	80042a6 <pbuf_copy_partial+0x6e>
 80042c2:	bf00      	nop
 80042c4:	0800b6f0 	.word	0x0800b6f0
 80042c8:	0800b944 	.word	0x0800b944
 80042cc:	0800b1cc 	.word	0x0800b1cc
 80042d0:	0800b964 	.word	0x0800b964

080042d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80042d8:	460a      	mov	r2, r1
 80042da:	8921      	ldrh	r1, [r4, #8]
 80042dc:	f7ff fdb0 	bl	8003e40 <pbuf_alloc>
  if (q == NULL) {
 80042e0:	4605      	mov	r5, r0
 80042e2:	b118      	cbz	r0, 80042ec <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80042e4:	4621      	mov	r1, r4
 80042e6:	f7ff ff05 	bl	80040f4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80042ea:	b908      	cbnz	r0, 80042f0 <pbuf_clone+0x1c>
  return q;
}
 80042ec:	4628      	mov	r0, r5
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <pbuf_clone+0x2c>)
 80042f2:	f240 5224 	movw	r2, #1316	; 0x524
 80042f6:	4903      	ldr	r1, [pc, #12]	; (8004304 <pbuf_clone+0x30>)
 80042f8:	4803      	ldr	r0, [pc, #12]	; (8004308 <pbuf_clone+0x34>)
 80042fa:	f005 fec9 	bl	800a090 <iprintf>
 80042fe:	e7f5      	b.n	80042ec <pbuf_clone+0x18>
 8004300:	0800b6f0 	.word	0x0800b6f0
 8004304:	0800b988 	.word	0x0800b988
 8004308:	0800b1cc 	.word	0x0800b1cc

0800430c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800430c:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <tcp_new_port+0x50>)
 8004310:	8818      	ldrh	r0, [r3, #0]
{
 8004312:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8004316:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800431a:	e002      	b.n	8004322 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800431c:	3c01      	subs	r4, #1
 800431e:	b2a4      	uxth	r4, r4
 8004320:	b1bc      	cbz	r4, 8004352 <tcp_new_port+0x46>
  tcp_port++;
 8004322:	3001      	adds	r0, #1
 8004324:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8004326:	4570      	cmp	r0, lr
 8004328:	bf08      	it	eq
 800432a:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800432e:	490c      	ldr	r1, [pc, #48]	; (8004360 <tcp_new_port+0x54>)
 8004330:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004334:	f851 3b04 	ldr.w	r3, [r1], #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b12b      	cbz	r3, 8004348 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 800433c:	8ada      	ldrh	r2, [r3, #22]
 800433e:	4282      	cmp	r2, r0
 8004340:	d0ec      	beq.n	800431c <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f9      	bne.n	800433c <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8004348:	4561      	cmp	r1, ip
 800434a:	d1f3      	bne.n	8004334 <tcp_new_port+0x28>
 800434c:	4b03      	ldr	r3, [pc, #12]	; (800435c <tcp_new_port+0x50>)
 800434e:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8004350:	bd10      	pop	{r4, pc}
 8004352:	4b02      	ldr	r3, [pc, #8]	; (800435c <tcp_new_port+0x50>)
 8004354:	8018      	strh	r0, [r3, #0]
          return 0;
 8004356:	4620      	mov	r0, r4
 8004358:	e7fa      	b.n	8004350 <tcp_new_port+0x44>
 800435a:	bf00      	nop
 800435c:	20000024 	.word	0x20000024
 8004360:	0800c028 	.word	0x0800c028

08004364 <tcp_close_shutdown_fin>:
{
 8004364:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004366:	4604      	mov	r4, r0
 8004368:	b140      	cbz	r0, 800437c <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 800436a:	7d23      	ldrb	r3, [r4, #20]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d018      	beq.n	80043a2 <tcp_close_shutdown_fin+0x3e>
 8004370:	2b07      	cmp	r3, #7
 8004372:	d01d      	beq.n	80043b0 <tcp_close_shutdown_fin+0x4c>
 8004374:	2b03      	cmp	r3, #3
 8004376:	d009      	beq.n	800438c <tcp_close_shutdown_fin+0x28>
 8004378:	2000      	movs	r0, #0
}
 800437a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <tcp_close_shutdown_fin+0x6c>)
 800437e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8004382:	4914      	ldr	r1, [pc, #80]	; (80043d4 <tcp_close_shutdown_fin+0x70>)
 8004384:	4814      	ldr	r0, [pc, #80]	; (80043d8 <tcp_close_shutdown_fin+0x74>)
 8004386:	f005 fe83 	bl	800a090 <iprintf>
 800438a:	e7ee      	b.n	800436a <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 800438c:	4620      	mov	r0, r4
 800438e:	f003 fbbb 	bl	8007b08 <tcp_send_fin>
      if (err == ERR_OK) {
 8004392:	b9a0      	cbnz	r0, 80043be <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8004394:	2305      	movs	r3, #5
 8004396:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8004398:	4620      	mov	r0, r4
 800439a:	f003 fd3b 	bl	8007e14 <tcp_output>
  return err;
 800439e:	2000      	movs	r0, #0
 80043a0:	e7eb      	b.n	800437a <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 80043a2:	4620      	mov	r0, r4
 80043a4:	f003 fbb0 	bl	8007b08 <tcp_send_fin>
      if (err == ERR_OK) {
 80043a8:	b948      	cbnz	r0, 80043be <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80043aa:	2305      	movs	r3, #5
 80043ac:	7523      	strb	r3, [r4, #20]
 80043ae:	e7f3      	b.n	8004398 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f003 fba9 	bl	8007b08 <tcp_send_fin>
      if (err == ERR_OK) {
 80043b6:	b910      	cbnz	r0, 80043be <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 80043b8:	2309      	movs	r3, #9
 80043ba:	7523      	strb	r3, [r4, #20]
 80043bc:	e7ec      	b.n	8004398 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80043be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043c2:	d1da      	bne.n	800437a <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80043c4:	8b63      	ldrh	r3, [r4, #26]
 80043c6:	f043 0308 	orr.w	r3, r3, #8
 80043ca:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80043cc:	2000      	movs	r0, #0
 80043ce:	e7d4      	b.n	800437a <tcp_close_shutdown_fin+0x16>
 80043d0:	0800b99c 	.word	0x0800b99c
 80043d4:	0800b9cc 	.word	0x0800b9cc
 80043d8:	0800b1cc 	.word	0x0800b1cc

080043dc <tcp_init>:
{
 80043dc:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80043de:	f005 fe6f 	bl	800a0c0 <rand>
 80043e2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80043e6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80043ea:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <tcp_init+0x14>)
 80043ec:	8018      	strh	r0, [r3, #0]
}
 80043ee:	bd08      	pop	{r3, pc}
 80043f0:	20000024 	.word	0x20000024

080043f4 <tcp_free>:
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80043f8:	7d03      	ldrb	r3, [r0, #20]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d004      	beq.n	8004408 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 80043fe:	4621      	mov	r1, r4
 8004400:	2001      	movs	r0, #1
 8004402:	f7ff f9f5 	bl	80037f0 <memp_free>
}
 8004406:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <tcp_free+0x24>)
 800440a:	22d4      	movs	r2, #212	; 0xd4
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <tcp_free+0x28>)
 800440e:	4804      	ldr	r0, [pc, #16]	; (8004420 <tcp_free+0x2c>)
 8004410:	f005 fe3e 	bl	800a090 <iprintf>
 8004414:	e7f3      	b.n	80043fe <tcp_free+0xa>
 8004416:	bf00      	nop
 8004418:	0800b99c 	.word	0x0800b99c
 800441c:	0800b9d8 	.word	0x0800b9d8
 8004420:	0800b1cc 	.word	0x0800b1cc

08004424 <tcp_bind>:
{
 8004424:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8004426:	4c2a      	ldr	r4, [pc, #168]	; (80044d0 <tcp_bind+0xac>)
 8004428:	2900      	cmp	r1, #0
 800442a:	bf18      	it	ne
 800442c:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800442e:	b168      	cbz	r0, 800444c <tcp_bind+0x28>
 8004430:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8004432:	7d03      	ldrb	r3, [r0, #20]
 8004434:	b9a3      	cbnz	r3, 8004460 <tcp_bind+0x3c>
  if (port == 0) {
 8004436:	b1ea      	cbz	r2, 8004474 <tcp_bind+0x50>
 8004438:	4e26      	ldr	r6, [pc, #152]	; (80044d4 <tcp_bind+0xb0>)
 800443a:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800443e:	f856 3b04 	ldr.w	r3, [r6], #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	bb53      	cbnz	r3, 800449c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8004446:	4566      	cmp	r6, ip
 8004448:	d1f9      	bne.n	800443e <tcp_bind+0x1a>
 800444a:	e017      	b.n	800447c <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800444c:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <tcp_bind+0xb4>)
 800444e:	f240 22a9 	movw	r2, #681	; 0x2a9
 8004452:	4922      	ldr	r1, [pc, #136]	; (80044dc <tcp_bind+0xb8>)
 8004454:	4822      	ldr	r0, [pc, #136]	; (80044e0 <tcp_bind+0xbc>)
 8004456:	f005 fe1b 	bl	800a090 <iprintf>
 800445a:	f06f 000f 	mvn.w	r0, #15
 800445e:	e019      	b.n	8004494 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <tcp_bind+0xb4>)
 8004462:	f240 22ab 	movw	r2, #683	; 0x2ab
 8004466:	491f      	ldr	r1, [pc, #124]	; (80044e4 <tcp_bind+0xc0>)
 8004468:	481d      	ldr	r0, [pc, #116]	; (80044e0 <tcp_bind+0xbc>)
 800446a:	f005 fe11 	bl	800a090 <iprintf>
 800446e:	f06f 0005 	mvn.w	r0, #5
 8004472:	e00f      	b.n	8004494 <tcp_bind+0x70>
    port = tcp_new_port();
 8004474:	f7ff ff4a 	bl	800430c <tcp_new_port>
    if (port == 0) {
 8004478:	4602      	mov	r2, r0
 800447a:	b1e0      	cbz	r0, 80044b6 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 800447c:	b114      	cbz	r4, 8004484 <tcp_bind+0x60>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	b103      	cbz	r3, 8004484 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8004482:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8004484:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <tcp_bind+0xc4>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	60ea      	str	r2, [r5, #12]
 800448c:	601d      	str	r5, [r3, #0]
 800448e:	f003 ffd1 	bl	8008434 <tcp_timer_needed>
  return ERR_OK;
 8004492:	2000      	movs	r0, #0
}
 8004494:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0d4      	beq.n	8004446 <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 800449c:	8ad9      	ldrh	r1, [r3, #22]
 800449e:	4291      	cmp	r1, r2
 80044a0:	d1f9      	bne.n	8004496 <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	b151      	cbz	r1, 80044bc <tcp_bind+0x98>
 80044a6:	b164      	cbz	r4, 80044c2 <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	b168      	cbz	r0, 80044c8 <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80044ac:	4281      	cmp	r1, r0
 80044ae:	d1f2      	bne.n	8004496 <tcp_bind+0x72>
              return ERR_USE;
 80044b0:	f06f 0007 	mvn.w	r0, #7
 80044b4:	e7ee      	b.n	8004494 <tcp_bind+0x70>
      return ERR_BUF;
 80044b6:	f06f 0001 	mvn.w	r0, #1
 80044ba:	e7eb      	b.n	8004494 <tcp_bind+0x70>
              return ERR_USE;
 80044bc:	f06f 0007 	mvn.w	r0, #7
 80044c0:	e7e8      	b.n	8004494 <tcp_bind+0x70>
 80044c2:	f06f 0007 	mvn.w	r0, #7
 80044c6:	e7e5      	b.n	8004494 <tcp_bind+0x70>
 80044c8:	f06f 0007 	mvn.w	r0, #7
 80044cc:	e7e2      	b.n	8004494 <tcp_bind+0x70>
 80044ce:	bf00      	nop
 80044d0:	0800cfec 	.word	0x0800cfec
 80044d4:	0800c028 	.word	0x0800c028
 80044d8:	0800b99c 	.word	0x0800b99c
 80044dc:	0800b9ec 	.word	0x0800b9ec
 80044e0:	0800b1cc 	.word	0x0800b1cc
 80044e4:	0800ba04 	.word	0x0800ba04
 80044e8:	2000a958 	.word	0x2000a958

080044ec <tcp_listen_with_backlog_and_err>:
{
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80044f0:	4604      	mov	r4, r0
 80044f2:	b330      	cbz	r0, 8004542 <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80044f4:	7d03      	ldrb	r3, [r0, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d12e      	bne.n	8004558 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80044fa:	2002      	movs	r0, #2
 80044fc:	f7ff f948 	bl	8003790 <memp_malloc>
  if (lpcb == NULL) {
 8004500:	4605      	mov	r5, r0
 8004502:	2800      	cmp	r0, #0
 8004504:	d04b      	beq.n	800459e <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800450a:	8ae3      	ldrh	r3, [r4, #22]
 800450c:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800450e:	2301      	movs	r3, #1
 8004510:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8004512:	7d63      	ldrb	r3, [r4, #21]
 8004514:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8004516:	7a63      	ldrb	r3, [r4, #9]
 8004518:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800451a:	2300      	movs	r3, #0
 800451c:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800451e:	7ae3      	ldrb	r3, [r4, #11]
 8004520:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 8004522:	7aa3      	ldrb	r3, [r4, #10]
 8004524:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800452a:	8ae3      	ldrh	r3, [r4, #22]
 800452c:	b33b      	cbz	r3, 800457e <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <tcp_listen_with_backlog_and_err+0xb8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	42a3      	cmp	r3, r4
 8004534:	d01b      	beq.n	800456e <tcp_listen_with_backlog_and_err+0x82>
 8004536:	b303      	cbz	r3, 800457a <tcp_listen_with_backlog_and_err+0x8e>
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	42a2      	cmp	r2, r4
 800453c:	d01b      	beq.n	8004576 <tcp_listen_with_backlog_and_err+0x8a>
 800453e:	4613      	mov	r3, r2
 8004540:	e7f9      	b.n	8004536 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <tcp_listen_with_backlog_and_err+0xbc>)
 8004544:	f240 3259 	movw	r2, #857	; 0x359
 8004548:	4918      	ldr	r1, [pc, #96]	; (80045ac <tcp_listen_with_backlog_and_err+0xc0>)
 800454a:	4819      	ldr	r0, [pc, #100]	; (80045b0 <tcp_listen_with_backlog_and_err+0xc4>)
 800454c:	f005 fda0 	bl	800a090 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8004550:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8004552:	f06f 030f 	mvn.w	r3, #15
 8004556:	e01e      	b.n	8004596 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8004558:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <tcp_listen_with_backlog_and_err+0xbc>)
 800455a:	f240 325a 	movw	r2, #858	; 0x35a
 800455e:	4915      	ldr	r1, [pc, #84]	; (80045b4 <tcp_listen_with_backlog_and_err+0xc8>)
 8004560:	4813      	ldr	r0, [pc, #76]	; (80045b0 <tcp_listen_with_backlog_and_err+0xc4>)
 8004562:	f005 fd95 	bl	800a090 <iprintf>
 8004566:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 800456a:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800456c:	e013      	b.n	8004596 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800456e:	68e2      	ldr	r2, [r4, #12]
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <tcp_listen_with_backlog_and_err+0xb8>)
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e001      	b.n	800457a <tcp_listen_with_backlog_and_err+0x8e>
 8004576:	68e2      	ldr	r2, [r4, #12]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff ff38 	bl	80043f4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <tcp_listen_with_backlog_and_err+0xcc>)
 8004586:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <tcp_listen_with_backlog_and_err+0xd0>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	60ea      	str	r2, [r5, #12]
 800458e:	601d      	str	r5, [r3, #0]
 8004590:	f003 ff50 	bl	8008434 <tcp_timer_needed>
  res = ERR_OK;
 8004594:	2300      	movs	r3, #0
  if (err != NULL) {
 8004596:	b106      	cbz	r6, 800459a <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 8004598:	7033      	strb	r3, [r6, #0]
}
 800459a:	4628      	mov	r0, r5
 800459c:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 800459e:	f04f 33ff 	mov.w	r3, #4294967295
 80045a2:	e7f8      	b.n	8004596 <tcp_listen_with_backlog_and_err+0xaa>
 80045a4:	2000a958 	.word	0x2000a958
 80045a8:	0800b99c 	.word	0x0800b99c
 80045ac:	0800ba2c 	.word	0x0800ba2c
 80045b0:	0800b1cc 	.word	0x0800b1cc
 80045b4:	0800ba5c 	.word	0x0800ba5c
 80045b8:	08004b21 	.word	0x08004b21
 80045bc:	2000a95c 	.word	0x2000a95c

080045c0 <tcp_listen_with_backlog>:
{
 80045c0:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80045c2:	2200      	movs	r2, #0
 80045c4:	f7ff ff92 	bl	80044ec <tcp_listen_with_backlog_and_err>
}
 80045c8:	bd08      	pop	{r3, pc}
	...

080045cc <tcp_update_rcv_ann_wnd>:
{
 80045cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80045ce:	4604      	mov	r4, r0
 80045d0:	b188      	cbz	r0, 80045f6 <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80045d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80045d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80045d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80045d8:	1950      	adds	r0, r2, r5
 80045da:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80045dc:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 80045e0:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 80045e4:	bf94      	ite	ls
 80045e6:	eba0 010c 	subls.w	r1, r0, ip
 80045ea:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 80045ee:	2900      	cmp	r1, #0
 80045f0:	db09      	blt.n	8004606 <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80045f2:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 80045f4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <tcp_update_rcv_ann_wnd+0x64>)
 80045f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80045fc:	490d      	ldr	r1, [pc, #52]	; (8004634 <tcp_update_rcv_ann_wnd+0x68>)
 80045fe:	480e      	ldr	r0, [pc, #56]	; (8004638 <tcp_update_rcv_ann_wnd+0x6c>)
 8004600:	f005 fd46 	bl	800a090 <iprintf>
 8004604:	e7e5      	b.n	80045d2 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004606:	1aea      	subs	r2, r5, r3
 8004608:	2a00      	cmp	r2, #0
 800460a:	dd02      	ble.n	8004612 <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 800460c:	2000      	movs	r0, #0
 800460e:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004610:	e7f0      	b.n	80045f4 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004612:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004614:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004618:	d202      	bcs.n	8004620 <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800461a:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800461c:	2000      	movs	r0, #0
 800461e:	e7e9      	b.n	80045f4 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <tcp_update_rcv_ann_wnd+0x64>)
 8004622:	f240 32b6 	movw	r2, #950	; 0x3b6
 8004626:	4905      	ldr	r1, [pc, #20]	; (800463c <tcp_update_rcv_ann_wnd+0x70>)
 8004628:	4803      	ldr	r0, [pc, #12]	; (8004638 <tcp_update_rcv_ann_wnd+0x6c>)
 800462a:	f005 fd31 	bl	800a090 <iprintf>
 800462e:	e7f4      	b.n	800461a <tcp_update_rcv_ann_wnd+0x4e>
 8004630:	0800b99c 	.word	0x0800b99c
 8004634:	0800ba94 	.word	0x0800ba94
 8004638:	0800b1cc 	.word	0x0800b1cc
 800463c:	0800bab8 	.word	0x0800bab8

08004640 <tcp_recved>:
{
 8004640:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004642:	b178      	cbz	r0, 8004664 <tcp_recved+0x24>
 8004644:	460c      	mov	r4, r1
 8004646:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004648:	7d03      	ldrb	r3, [r0, #20]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d012      	beq.n	8004674 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800464e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004650:	1919      	adds	r1, r3, r4
 8004652:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004654:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8004658:	d814      	bhi.n	8004684 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800465a:	428b      	cmp	r3, r1
 800465c:	bf88      	it	hi
 800465e:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8004662:	e011      	b.n	8004688 <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004664:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <tcp_recved+0x68>)
 8004666:	f240 32cf 	movw	r2, #975	; 0x3cf
 800466a:	4910      	ldr	r1, [pc, #64]	; (80046ac <tcp_recved+0x6c>)
 800466c:	4810      	ldr	r0, [pc, #64]	; (80046b0 <tcp_recved+0x70>)
 800466e:	f005 fd0f 	bl	800a090 <iprintf>
 8004672:	e010      	b.n	8004696 <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <tcp_recved+0x68>)
 8004676:	f240 32d2 	movw	r2, #978	; 0x3d2
 800467a:	490e      	ldr	r1, [pc, #56]	; (80046b4 <tcp_recved+0x74>)
 800467c:	480c      	ldr	r0, [pc, #48]	; (80046b0 <tcp_recved+0x70>)
 800467e:	f005 fd07 	bl	800a090 <iprintf>
 8004682:	e7e4      	b.n	800464e <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004684:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8004688:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800468a:	4628      	mov	r0, r5
 800468c:	f7ff ff9e 	bl	80045cc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004690:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8004694:	d200      	bcs.n	8004698 <tcp_recved+0x58>
}
 8004696:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8004698:	8b6b      	ldrh	r3, [r5, #26]
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 80046a0:	4628      	mov	r0, r5
 80046a2:	f003 fbb7 	bl	8007e14 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 80046a6:	e7f6      	b.n	8004696 <tcp_recved+0x56>
 80046a8:	0800b99c 	.word	0x0800b99c
 80046ac:	0800bad4 	.word	0x0800bad4
 80046b0:	0800b1cc 	.word	0x0800b1cc
 80046b4:	0800baec 	.word	0x0800baec

080046b8 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 80046b8:	b150      	cbz	r0, 80046d0 <tcp_seg_free+0x18>
{
 80046ba:	b510      	push	{r4, lr}
 80046bc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80046be:	6840      	ldr	r0, [r0, #4]
 80046c0:	b108      	cbz	r0, 80046c6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80046c2:	f7ff fb53 	bl	8003d6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80046c6:	4621      	mov	r1, r4
 80046c8:	2003      	movs	r0, #3
 80046ca:	f7ff f891 	bl	80037f0 <memp_free>
  }
}
 80046ce:	bd10      	pop	{r4, pc}
 80046d0:	4770      	bx	lr

080046d2 <tcp_segs_free>:
{
 80046d2:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80046d4:	4604      	mov	r4, r0
 80046d6:	b128      	cbz	r0, 80046e4 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 80046d8:	4620      	mov	r0, r4
 80046da:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80046dc:	f7ff ffec 	bl	80046b8 <tcp_seg_free>
  while (seg != NULL) {
 80046e0:	2c00      	cmp	r4, #0
 80046e2:	d1f9      	bne.n	80046d8 <tcp_segs_free+0x6>
}
 80046e4:	bd10      	pop	{r4, pc}
	...

080046e8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80046e8:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80046ea:	b108      	cbz	r0, 80046f0 <tcp_setprio+0x8>

  pcb->prio = prio;
 80046ec:	7541      	strb	r1, [r0, #21]
}
 80046ee:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <tcp_setprio+0x18>)
 80046f2:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80046f6:	4903      	ldr	r1, [pc, #12]	; (8004704 <tcp_setprio+0x1c>)
 80046f8:	4803      	ldr	r0, [pc, #12]	; (8004708 <tcp_setprio+0x20>)
 80046fa:	f005 fcc9 	bl	800a090 <iprintf>
 80046fe:	e7f6      	b.n	80046ee <tcp_setprio+0x6>
 8004700:	0800b99c 	.word	0x0800b99c
 8004704:	0800bb14 	.word	0x0800bb14
 8004708:	0800b1cc 	.word	0x0800b1cc

0800470c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800470c:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800470e:	4605      	mov	r5, r0
 8004710:	b188      	cbz	r0, 8004736 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004712:	2003      	movs	r0, #3
 8004714:	f7ff f83c 	bl	8003790 <memp_malloc>
  if (cseg == NULL) {
 8004718:	4604      	mov	r4, r0
 800471a:	b150      	cbz	r0, 8004732 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800471c:	6828      	ldr	r0, [r5, #0]
 800471e:	6869      	ldr	r1, [r5, #4]
 8004720:	68aa      	ldr	r2, [r5, #8]
 8004722:	68eb      	ldr	r3, [r5, #12]
 8004724:	6020      	str	r0, [r4, #0]
 8004726:	6061      	str	r1, [r4, #4]
 8004728:	60a2      	str	r2, [r4, #8]
 800472a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800472c:	6860      	ldr	r0, [r4, #4]
 800472e:	f7ff fc83 	bl	8004038 <pbuf_ref>
  return cseg;
}
 8004732:	4620      	mov	r0, r4
 8004734:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <tcp_seg_copy+0x3c>)
 8004738:	f240 6282 	movw	r2, #1666	; 0x682
 800473c:	4903      	ldr	r1, [pc, #12]	; (800474c <tcp_seg_copy+0x40>)
 800473e:	4804      	ldr	r0, [pc, #16]	; (8004750 <tcp_seg_copy+0x44>)
 8004740:	f005 fca6 	bl	800a090 <iprintf>
 8004744:	e7e5      	b.n	8004712 <tcp_seg_copy+0x6>
 8004746:	bf00      	nop
 8004748:	0800b99c 	.word	0x0800b99c
 800474c:	0800bb30 	.word	0x0800bb30
 8004750:	0800b1cc 	.word	0x0800b1cc

08004754 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8004754:	b100      	cbz	r0, 8004758 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8004756:	6101      	str	r1, [r0, #16]
  }
}
 8004758:	4770      	bx	lr
	...

0800475c <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800475c:	b180      	cbz	r0, 8004780 <tcp_recv+0x24>
{
 800475e:	b538      	push	{r3, r4, r5, lr}
 8004760:	460c      	mov	r4, r1
 8004762:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004764:	7d03      	ldrb	r3, [r0, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d002      	beq.n	8004770 <tcp_recv+0x14>
    pcb->recv = recv;
 800476a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 800476e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <tcp_recv+0x28>)
 8004772:	f240 72df 	movw	r2, #2015	; 0x7df
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <tcp_recv+0x2c>)
 8004778:	4804      	ldr	r0, [pc, #16]	; (800478c <tcp_recv+0x30>)
 800477a:	f005 fc89 	bl	800a090 <iprintf>
 800477e:	e7f4      	b.n	800476a <tcp_recv+0xe>
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	0800b99c 	.word	0x0800b99c
 8004788:	0800bb4c 	.word	0x0800bb4c
 800478c:	0800b1cc 	.word	0x0800b1cc

08004790 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004790:	b180      	cbz	r0, 80047b4 <tcp_sent+0x24>
{
 8004792:	b538      	push	{r3, r4, r5, lr}
 8004794:	460c      	mov	r4, r1
 8004796:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8004798:	7d03      	ldrb	r3, [r0, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d002      	beq.n	80047a4 <tcp_sent+0x14>
    pcb->sent = sent;
 800479e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <tcp_sent+0x28>)
 80047a6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80047aa:	4904      	ldr	r1, [pc, #16]	; (80047bc <tcp_sent+0x2c>)
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <tcp_sent+0x30>)
 80047ae:	f005 fc6f 	bl	800a090 <iprintf>
 80047b2:	e7f4      	b.n	800479e <tcp_sent+0xe>
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	0800b99c 	.word	0x0800b99c
 80047bc:	0800bb74 	.word	0x0800bb74
 80047c0:	0800b1cc 	.word	0x0800b1cc

080047c4 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80047c4:	b180      	cbz	r0, 80047e8 <tcp_err+0x24>
{
 80047c6:	b538      	push	{r3, r4, r5, lr}
 80047c8:	460c      	mov	r4, r1
 80047ca:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80047cc:	7d03      	ldrb	r3, [r0, #20]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d002      	beq.n	80047d8 <tcp_err+0x14>
    pcb->errf = err;
 80047d2:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <tcp_err+0x28>)
 80047da:	f640 020d 	movw	r2, #2061	; 0x80d
 80047de:	4904      	ldr	r1, [pc, #16]	; (80047f0 <tcp_err+0x2c>)
 80047e0:	4804      	ldr	r0, [pc, #16]	; (80047f4 <tcp_err+0x30>)
 80047e2:	f005 fc55 	bl	800a090 <iprintf>
 80047e6:	e7f4      	b.n	80047d2 <tcp_err+0xe>
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	0800b99c 	.word	0x0800b99c
 80047f0:	0800bb9c 	.word	0x0800bb9c
 80047f4:	0800b1cc 	.word	0x0800b1cc

080047f8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80047f8:	b118      	cbz	r0, 8004802 <tcp_accept+0xa>
 80047fa:	7d02      	ldrb	r2, [r0, #20]
 80047fc:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80047fe:	bf08      	it	eq
 8004800:	6181      	streq	r1, [r0, #24]
  }
}
 8004802:	4770      	bx	lr

08004804 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8004804:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8004806:	b148      	cbz	r0, 800481c <tcp_poll+0x18>
 8004808:	460d      	mov	r5, r1
 800480a:	4614      	mov	r4, r2
 800480c:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800480e:	7d03      	ldrb	r3, [r0, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d00b      	beq.n	800482c <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8004814:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8004818:	7774      	strb	r4, [r6, #29]
}
 800481a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <tcp_poll+0x38>)
 800481e:	f640 023d 	movw	r2, #2109	; 0x83d
 8004822:	4907      	ldr	r1, [pc, #28]	; (8004840 <tcp_poll+0x3c>)
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <tcp_poll+0x40>)
 8004826:	f005 fc33 	bl	800a090 <iprintf>
 800482a:	e7f6      	b.n	800481a <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <tcp_poll+0x38>)
 800482e:	f640 023e 	movw	r2, #2110	; 0x83e
 8004832:	4905      	ldr	r1, [pc, #20]	; (8004848 <tcp_poll+0x44>)
 8004834:	4803      	ldr	r0, [pc, #12]	; (8004844 <tcp_poll+0x40>)
 8004836:	f005 fc2b 	bl	800a090 <iprintf>
 800483a:	e7eb      	b.n	8004814 <tcp_poll+0x10>
 800483c:	0800b99c 	.word	0x0800b99c
 8004840:	0800bbc4 	.word	0x0800bbc4
 8004844:	0800b1cc 	.word	0x0800b1cc
 8004848:	0800bbdc 	.word	0x0800bbdc

0800484c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800484c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800484e:	b130      	cbz	r0, 800485e <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <tcp_next_iss+0x24>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4a07      	ldr	r2, [pc, #28]	; (8004874 <tcp_next_iss+0x28>)
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	4410      	add	r0, r2
 800485a:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 800485c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <tcp_next_iss+0x2c>)
 8004860:	f640 02af 	movw	r2, #2223	; 0x8af
 8004864:	4905      	ldr	r1, [pc, #20]	; (800487c <tcp_next_iss+0x30>)
 8004866:	4806      	ldr	r0, [pc, #24]	; (8004880 <tcp_next_iss+0x34>)
 8004868:	f005 fc12 	bl	800a090 <iprintf>
 800486c:	e7f0      	b.n	8004850 <tcp_next_iss+0x4>
 800486e:	bf00      	nop
 8004870:	20000020 	.word	0x20000020
 8004874:	2000a960 	.word	0x2000a960
 8004878:	0800b99c 	.word	0x0800b99c
 800487c:	0800bbfc 	.word	0x0800bbfc
 8004880:	0800b1cc 	.word	0x0800b1cc

08004884 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4605      	mov	r5, r0
 8004888:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800488a:	b162      	cbz	r2, 80048a6 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800488c:	b14c      	cbz	r4, 80048a2 <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 800488e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8004890:	b13b      	cbz	r3, 80048a2 <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8004892:	2b28      	cmp	r3, #40	; 0x28
 8004894:	bf86      	itte	hi
 8004896:	3b28      	subhi	r3, #40	; 0x28
 8004898:	b29b      	uxthhi	r3, r3
 800489a:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800489c:	429d      	cmp	r5, r3
 800489e:	bf28      	it	cs
 80048a0:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 80048a2:	4628      	mov	r0, r5
 80048a4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <tcp_eff_send_mss_netif+0x34>)
 80048a8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <tcp_eff_send_mss_netif+0x38>)
 80048ae:	4804      	ldr	r0, [pc, #16]	; (80048c0 <tcp_eff_send_mss_netif+0x3c>)
 80048b0:	f005 fbee 	bl	800a090 <iprintf>
 80048b4:	e7ea      	b.n	800488c <tcp_eff_send_mss_netif+0x8>
 80048b6:	bf00      	nop
 80048b8:	0800b99c 	.word	0x0800b99c
 80048bc:	0800bc18 	.word	0x0800bc18
 80048c0:	0800b1cc 	.word	0x0800b1cc

080048c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80048c4:	b510      	push	{r4, lr}
 80048c6:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80048c8:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80048ca:	b118      	cbz	r0, 80048d4 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 80048cc:	f7ff ff01 	bl	80046d2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80048d4:	bd10      	pop	{r4, pc}
	...

080048d8 <tcp_pcb_purge>:
{
 80048d8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80048da:	b1f8      	cbz	r0, 800491c <tcp_pcb_purge+0x44>
 80048dc:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80048de:	7d03      	ldrb	r3, [r0, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d91a      	bls.n	800491a <tcp_pcb_purge+0x42>
 80048e4:	2b0a      	cmp	r3, #10
 80048e6:	d018      	beq.n	800491a <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 80048e8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80048ea:	b118      	cbz	r0, 80048f4 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 80048ec:	f7ff fa3e 	bl	8003d6c <pbuf_free>
      pcb->refused_data = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80048f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80048f6:	b113      	cbz	r3, 80048fe <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff ffe3 	bl	80048c4 <tcp_free_ooseq>
    pcb->rtime = -1;
 80048fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004902:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8004904:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004906:	f7ff fee4 	bl	80046d2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800490a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800490c:	f7ff fee1 	bl	80046d2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004914:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8004916:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800491a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <tcp_pcb_purge+0x54>)
 800491e:	f640 0251 	movw	r2, #2129	; 0x851
 8004922:	4903      	ldr	r1, [pc, #12]	; (8004930 <tcp_pcb_purge+0x58>)
 8004924:	4803      	ldr	r0, [pc, #12]	; (8004934 <tcp_pcb_purge+0x5c>)
 8004926:	f005 fbb3 	bl	800a090 <iprintf>
 800492a:	e7f6      	b.n	800491a <tcp_pcb_purge+0x42>
 800492c:	0800b99c 	.word	0x0800b99c
 8004930:	0800bc40 	.word	0x0800bc40
 8004934:	0800b1cc 	.word	0x0800b1cc

08004938 <tcp_pcb_remove>:
{
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800493c:	460c      	mov	r4, r1
 800493e:	b149      	cbz	r1, 8004954 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004940:	b185      	cbz	r5, 8004964 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8004942:	682b      	ldr	r3, [r5, #0]
 8004944:	42a3      	cmp	r3, r4
 8004946:	d015      	beq.n	8004974 <tcp_pcb_remove+0x3c>
 8004948:	b1cb      	cbz	r3, 800497e <tcp_pcb_remove+0x46>
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	42a2      	cmp	r2, r4
 800494e:	d014      	beq.n	800497a <tcp_pcb_remove+0x42>
 8004950:	4613      	mov	r3, r2
 8004952:	e7f9      	b.n	8004948 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <tcp_pcb_remove+0xb4>)
 8004956:	f640 0283 	movw	r2, #2179	; 0x883
 800495a:	4925      	ldr	r1, [pc, #148]	; (80049f0 <tcp_pcb_remove+0xb8>)
 800495c:	4825      	ldr	r0, [pc, #148]	; (80049f4 <tcp_pcb_remove+0xbc>)
 800495e:	f005 fb97 	bl	800a090 <iprintf>
 8004962:	e7ed      	b.n	8004940 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <tcp_pcb_remove+0xb4>)
 8004966:	f640 0284 	movw	r2, #2180	; 0x884
 800496a:	4923      	ldr	r1, [pc, #140]	; (80049f8 <tcp_pcb_remove+0xc0>)
 800496c:	4821      	ldr	r0, [pc, #132]	; (80049f4 <tcp_pcb_remove+0xbc>)
 800496e:	f005 fb8f 	bl	800a090 <iprintf>
 8004972:	e7e6      	b.n	8004942 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8004974:	68e3      	ldr	r3, [r4, #12]
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	e001      	b.n	800497e <tcp_pcb_remove+0x46>
 800497a:	68e2      	ldr	r2, [r4, #12]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	2300      	movs	r3, #0
 8004980:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff ffa8 	bl	80048d8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8004988:	7d23      	ldrb	r3, [r4, #20]
 800498a:	2b0a      	cmp	r3, #10
 800498c:	d005      	beq.n	800499a <tcp_pcb_remove+0x62>
 800498e:	2b01      	cmp	r3, #1
 8004990:	d01e      	beq.n	80049d0 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8004992:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8004994:	f013 0f01 	tst.w	r3, #1
 8004998:	d11e      	bne.n	80049d8 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800499a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800499c:	b133      	cbz	r3, 80049ac <tcp_pcb_remove+0x74>
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <tcp_pcb_remove+0xb4>)
 80049a0:	f640 0293 	movw	r2, #2195	; 0x893
 80049a4:	4915      	ldr	r1, [pc, #84]	; (80049fc <tcp_pcb_remove+0xc4>)
 80049a6:	4813      	ldr	r0, [pc, #76]	; (80049f4 <tcp_pcb_remove+0xbc>)
 80049a8:	f005 fb72 	bl	800a090 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80049ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80049ae:	b133      	cbz	r3, 80049be <tcp_pcb_remove+0x86>
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <tcp_pcb_remove+0xb4>)
 80049b2:	f640 0294 	movw	r2, #2196	; 0x894
 80049b6:	4912      	ldr	r1, [pc, #72]	; (8004a00 <tcp_pcb_remove+0xc8>)
 80049b8:	480e      	ldr	r0, [pc, #56]	; (80049f4 <tcp_pcb_remove+0xbc>)
 80049ba:	f005 fb69 	bl	800a090 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80049be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80049c0:	b133      	cbz	r3, 80049d0 <tcp_pcb_remove+0x98>
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <tcp_pcb_remove+0xb4>)
 80049c4:	f640 0296 	movw	r2, #2198	; 0x896
 80049c8:	490e      	ldr	r1, [pc, #56]	; (8004a04 <tcp_pcb_remove+0xcc>)
 80049ca:	480a      	ldr	r0, [pc, #40]	; (80049f4 <tcp_pcb_remove+0xbc>)
 80049cc:	f005 fb60 	bl	800a090 <iprintf>
  pcb->state = CLOSED;
 80049d0:	2300      	movs	r3, #0
 80049d2:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 80049d4:	82e3      	strh	r3, [r4, #22]
}
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80049de:	4620      	mov	r0, r4
 80049e0:	f003 fa18 	bl	8007e14 <tcp_output>
  if (pcb->state != LISTEN) {
 80049e4:	7d23      	ldrb	r3, [r4, #20]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d0f2      	beq.n	80049d0 <tcp_pcb_remove+0x98>
 80049ea:	e7d6      	b.n	800499a <tcp_pcb_remove+0x62>
 80049ec:	0800b99c 	.word	0x0800b99c
 80049f0:	0800bc5c 	.word	0x0800bc5c
 80049f4:	0800b1cc 	.word	0x0800b1cc
 80049f8:	0800bc78 	.word	0x0800bc78
 80049fc:	0800bc98 	.word	0x0800bc98
 8004a00:	0800bcb0 	.word	0x0800bcb0
 8004a04:	0800bccc 	.word	0x0800bccc

08004a08 <tcp_abandon>:
{
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004a0e:	b1f8      	cbz	r0, 8004a50 <tcp_abandon+0x48>
 8004a10:	460d      	mov	r5, r1
 8004a12:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004a14:	7d03      	ldrb	r3, [r0, #20]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d022      	beq.n	8004a60 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8004a1a:	7d23      	ldrb	r3, [r4, #20]
 8004a1c:	2b0a      	cmp	r3, #10
 8004a1e:	d027      	beq.n	8004a70 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8004a20:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8004a24:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8004a28:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8004a2c:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d147      	bne.n	8004ac2 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8004a32:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8004a36:	f1ba 0f00 	cmp.w	sl, #0
 8004a3a:	d04c      	beq.n	8004ad6 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004a3c:	4b2d      	ldr	r3, [pc, #180]	; (8004af4 <tcp_abandon+0xec>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d01d      	beq.n	8004a80 <tcp_abandon+0x78>
 8004a44:	b313      	cbz	r3, 8004a8c <tcp_abandon+0x84>
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	42a2      	cmp	r2, r4
 8004a4a:	d01d      	beq.n	8004a88 <tcp_abandon+0x80>
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	e7f9      	b.n	8004a44 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <tcp_abandon+0xf0>)
 8004a52:	f240 223d 	movw	r2, #573	; 0x23d
 8004a56:	4929      	ldr	r1, [pc, #164]	; (8004afc <tcp_abandon+0xf4>)
 8004a58:	4829      	ldr	r0, [pc, #164]	; (8004b00 <tcp_abandon+0xf8>)
 8004a5a:	f005 fb19 	bl	800a090 <iprintf>
 8004a5e:	e02d      	b.n	8004abc <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <tcp_abandon+0xf0>)
 8004a62:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004a66:	4927      	ldr	r1, [pc, #156]	; (8004b04 <tcp_abandon+0xfc>)
 8004a68:	4825      	ldr	r0, [pc, #148]	; (8004b00 <tcp_abandon+0xf8>)
 8004a6a:	f005 fb11 	bl	800a090 <iprintf>
 8004a6e:	e7d4      	b.n	8004a1a <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004a70:	4621      	mov	r1, r4
 8004a72:	4825      	ldr	r0, [pc, #148]	; (8004b08 <tcp_abandon+0x100>)
 8004a74:	f7ff ff60 	bl	8004938 <tcp_pcb_remove>
    tcp_free(pcb);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fcbb 	bl	80043f4 <tcp_free>
 8004a7e:	e01d      	b.n	8004abc <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004a80:	68e2      	ldr	r2, [r4, #12]
 8004a82:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <tcp_abandon+0xec>)
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e001      	b.n	8004a8c <tcp_abandon+0x84>
 8004a88:	68e2      	ldr	r2, [r4, #12]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	2500      	movs	r5, #0
 8004a8e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8004a90:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8004a92:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004a94:	b108      	cbz	r0, 8004a9a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8004a96:	f7ff fe1c 	bl	80046d2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004a9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a9c:	b108      	cbz	r0, 8004aa2 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 8004a9e:	f7ff fe18 	bl	80046d2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8004aa2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004aa4:	b108      	cbz	r0, 8004aaa <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8004aa6:	f7ff fe14 	bl	80046d2 <tcp_segs_free>
    if (send_rst) {
 8004aaa:	b9b5      	cbnz	r5, 8004ada <tcp_abandon+0xd2>
    tcp_free(pcb);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff fca1 	bl	80043f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004ab2:	b11e      	cbz	r6, 8004abc <tcp_abandon+0xb4>
 8004ab4:	f06f 010c 	mvn.w	r1, #12
 8004ab8:	4638      	mov	r0, r7
 8004aba:	47b0      	blx	r6
}
 8004abc:	b004      	add	sp, #16
 8004abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8004ac2:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4810      	ldr	r0, [pc, #64]	; (8004b0c <tcp_abandon+0x104>)
 8004aca:	f7ff ff35 	bl	8004938 <tcp_pcb_remove>
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <tcp_abandon+0x108>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e7dd      	b.n	8004a92 <tcp_abandon+0x8a>
    int send_rst = 0;
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	e7db      	b.n	8004a92 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004ada:	8b23      	ldrh	r3, [r4, #24]
 8004adc:	9302      	str	r3, [sp, #8]
 8004ade:	f8cd a004 	str.w	sl, [sp, #4]
 8004ae2:	1d23      	adds	r3, r4, #4
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	464a      	mov	r2, r9
 8004aea:	4641      	mov	r1, r8
 8004aec:	4620      	mov	r0, r4
 8004aee:	f003 f90f 	bl	8007d10 <tcp_rst>
 8004af2:	e7db      	b.n	8004aac <tcp_abandon+0xa4>
 8004af4:	2000a958 	.word	0x2000a958
 8004af8:	0800b99c 	.word	0x0800b99c
 8004afc:	0800bce4 	.word	0x0800bce4
 8004b00:	0800b1cc 	.word	0x0800b1cc
 8004b04:	0800bd00 	.word	0x0800bd00
 8004b08:	2000a968 	.word	0x2000a968
 8004b0c:	2000a950 	.word	0x2000a950
 8004b10:	2000a954 	.word	0x2000a954

08004b14 <tcp_abort>:
{
 8004b14:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8004b16:	2101      	movs	r1, #1
 8004b18:	f7ff ff76 	bl	8004a08 <tcp_abandon>
}
 8004b1c:	bd08      	pop	{r3, pc}
	...

08004b20 <tcp_accept_null>:
{
 8004b20:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8004b22:	460c      	mov	r4, r1
 8004b24:	b129      	cbz	r1, 8004b32 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 8004b26:	4620      	mov	r0, r4
 8004b28:	f7ff fff4 	bl	8004b14 <tcp_abort>
}
 8004b2c:	f06f 000c 	mvn.w	r0, #12
 8004b30:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8004b32:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <tcp_accept_null+0x24>)
 8004b34:	f240 320f 	movw	r2, #783	; 0x30f
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <tcp_accept_null+0x28>)
 8004b3a:	4804      	ldr	r0, [pc, #16]	; (8004b4c <tcp_accept_null+0x2c>)
 8004b3c:	f005 faa8 	bl	800a090 <iprintf>
 8004b40:	e7f1      	b.n	8004b26 <tcp_accept_null+0x6>
 8004b42:	bf00      	nop
 8004b44:	0800b99c 	.word	0x0800b99c
 8004b48:	0800bd34 	.word	0x0800bd34
 8004b4c:	0800b1cc 	.word	0x0800b1cc

08004b50 <tcp_netif_ip_addr_changed_pcblist>:
{
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8004b54:	4605      	mov	r5, r0
 8004b56:	b108      	cbz	r0, 8004b5c <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 8004b58:	b97c      	cbnz	r4, 8004b7a <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8004b5e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8004b64:	480a      	ldr	r0, [pc, #40]	; (8004b90 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8004b66:	f005 fa93 	bl	800a090 <iprintf>
 8004b6a:	e7f5      	b.n	8004b58 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 8004b6c:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f7ff ffd0 	bl	8004b14 <tcp_abort>
      pcb = next;
 8004b74:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8004b76:	2c00      	cmp	r4, #0
 8004b78:	d0ef      	beq.n	8004b5a <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d0f4      	beq.n	8004b6c <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8004b82:	68e4      	ldr	r4, [r4, #12]
 8004b84:	e7f7      	b.n	8004b76 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8004b86:	bf00      	nop
 8004b88:	0800b99c 	.word	0x0800b99c
 8004b8c:	0800bd54 	.word	0x0800bd54
 8004b90:	0800b1cc 	.word	0x0800b1cc

08004b94 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8004b94:	b308      	cbz	r0, 8004bda <tcp_netif_ip_addr_changed+0x46>
{
 8004b96:	b538      	push	{r3, r4, r5, lr}
 8004b98:	460d      	mov	r5, r1
 8004b9a:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8004b9c:	6803      	ldr	r3, [r0, #0]
 8004b9e:	b903      	cbnz	r3, 8004ba2 <tcp_netif_ip_addr_changed+0xe>
}
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <tcp_netif_ip_addr_changed+0x48>)
 8004ba4:	6819      	ldr	r1, [r3, #0]
 8004ba6:	f7ff ffd3 	bl	8004b50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <tcp_netif_ip_addr_changed+0x4c>)
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff ffce 	bl	8004b50 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8004bb4:	2d00      	cmp	r5, #0
 8004bb6:	d0f3      	beq.n	8004ba0 <tcp_netif_ip_addr_changed+0xc>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <tcp_netif_ip_addr_changed+0x50>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0ec      	beq.n	8004ba0 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8004bc6:	6819      	ldr	r1, [r3, #0]
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8004bcc:	bf04      	itt	eq
 8004bce:	682a      	ldreq	r2, [r5, #0]
 8004bd0:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f6      	bne.n	8004bc6 <tcp_netif_ip_addr_changed+0x32>
 8004bd8:	e7e2      	b.n	8004ba0 <tcp_netif_ip_addr_changed+0xc>
 8004bda:	4770      	bx	lr
 8004bdc:	2000a950 	.word	0x2000a950
 8004be0:	2000a958 	.word	0x2000a958
 8004be4:	2000a95c 	.word	0x2000a95c

08004be8 <tcp_kill_state>:
{
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004bec:	f1a0 0308 	sub.w	r3, r0, #8
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d807      	bhi.n	8004c06 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004bf6:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <tcp_kill_state+0x50>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b1e3      	cbz	r3, 8004c36 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <tcp_kill_state+0x54>)
 8004bfe:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 8004c00:	2100      	movs	r1, #0
  inactive = NULL;
 8004c02:	4608      	mov	r0, r1
 8004c04:	e009      	b.n	8004c1a <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <tcp_kill_state+0x58>)
 8004c08:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8004c0c:	490d      	ldr	r1, [pc, #52]	; (8004c44 <tcp_kill_state+0x5c>)
 8004c0e:	480e      	ldr	r0, [pc, #56]	; (8004c48 <tcp_kill_state+0x60>)
 8004c10:	f005 fa3e 	bl	800a090 <iprintf>
 8004c14:	e7ef      	b.n	8004bf6 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	b14b      	cbz	r3, 8004c2e <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8004c1a:	7d1a      	ldrb	r2, [r3, #20]
 8004c1c:	42a2      	cmp	r2, r4
 8004c1e:	d1fa      	bne.n	8004c16 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	1aaa      	subs	r2, r5, r2
 8004c24:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 8004c26:	bf24      	itt	cs
 8004c28:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004c2a:	4618      	movcs	r0, r3
 8004c2c:	e7f3      	b.n	8004c16 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 8004c2e:	b110      	cbz	r0, 8004c36 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 8004c30:	2100      	movs	r1, #0
 8004c32:	f7ff fee9 	bl	8004a08 <tcp_abandon>
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	2000a950 	.word	0x2000a950
 8004c3c:	2000a960 	.word	0x2000a960
 8004c40:	0800b99c 	.word	0x0800b99c
 8004c44:	0800bd88 	.word	0x0800bd88
 8004c48:	0800b1cc 	.word	0x0800b1cc

08004c4c <tcp_alloc>:
{
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7fe fd9d 	bl	8003790 <memp_malloc>
  if (pcb == NULL) {
 8004c56:	4604      	mov	r4, r0
 8004c58:	b360      	cbz	r0, 8004cb4 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8004c5a:	229c      	movs	r2, #156	; 0x9c
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f005 fa0e 	bl	800a080 <memset>
    pcb->prio = prio;
 8004c64:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8004c66:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004c6a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004c6e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8004c72:	8562      	strh	r2, [r4, #42]	; 0x2a
 8004c74:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8004c76:	22ff      	movs	r2, #255	; 0xff
 8004c78:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8004c7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8004c7e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8004c80:	2206      	movs	r2, #6
 8004c82:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8004c86:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8004c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c8c:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8004c94:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <tcp_alloc+0x138>)
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8004c9a:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <tcp_alloc+0x13c>)
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8004ca0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8004ca4:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <tcp_alloc+0x140>)
 8004ca6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <tcp_alloc+0x144>)
 8004cac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8004cb4:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <tcp_alloc+0x148>)
 8004cb6:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	d132      	bne.n	8004d22 <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cbc:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <tcp_alloc+0x14c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b17b      	cbz	r3, 8004ce2 <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004cc2:	4a30      	ldr	r2, [pc, #192]	; (8004d84 <tcp_alloc+0x138>)
 8004cc4:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8004cc6:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	1a82      	subs	r2, r0, r2
 8004ccc:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8004cce:	bf24      	itt	cs
 8004cd0:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8004cd2:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f6      	bne.n	8004cc8 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 8004cda:	b114      	cbz	r4, 8004ce2 <tcp_alloc+0x96>
    tcp_abort(inactive);
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff ff19 	bl	8004b14 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	f7fe fd54 	bl	8003790 <memp_malloc>
    if (pcb == NULL) {
 8004ce8:	4604      	mov	r4, r0
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d1b5      	bne.n	8004c5a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8004cee:	2009      	movs	r0, #9
 8004cf0:	f7ff ff7a 	bl	8004be8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	f7fe fd4b 	bl	8003790 <memp_malloc>
      if (pcb == NULL) {
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d1ac      	bne.n	8004c5a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8004d00:	2008      	movs	r0, #8
 8004d02:	f7ff ff71 	bl	8004be8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004d06:	2001      	movs	r0, #1
 8004d08:	f7fe fd42 	bl	8003790 <memp_malloc>
        if (pcb == NULL) {
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d1a3      	bne.n	8004c5a <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004d12:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004d16:	d110      	bne.n	8004d3a <tcp_alloc+0xee>
  if (mprio == 0) {
 8004d18:	b36e      	cbz	r6, 8004d76 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004d1a:	4633      	mov	r3, r6
 8004d1c:	e00e      	b.n	8004d3c <tcp_alloc+0xf0>
  while (pcb != NULL) {
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d0cc      	beq.n	8004cbc <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 8004d22:	4628      	mov	r0, r5
 8004d24:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8004d26:	8b43      	ldrh	r3, [r0, #26]
 8004d28:	f013 0f08 	tst.w	r3, #8
 8004d2c:	d0f7      	beq.n	8004d1e <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8004d2e:	f023 0308 	bic.w	r3, r3, #8
 8004d32:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8004d34:	f7ff fb16 	bl	8004364 <tcp_close_shutdown_fin>
 8004d38:	e7f1      	b.n	8004d1e <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8004d3a:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <tcp_alloc+0x148>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b1bb      	cbz	r3, 8004d76 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8004d46:	490f      	ldr	r1, [pc, #60]	; (8004d84 <tcp_alloc+0x138>)
 8004d48:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	e005      	b.n	8004d5a <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 8004d52:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8004d54:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	b14b      	cbz	r3, 8004d6e <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 8004d5a:	7d59      	ldrb	r1, [r3, #21]
 8004d5c:	4291      	cmp	r1, r2
 8004d5e:	d3f6      	bcc.n	8004d4e <tcp_alloc+0x102>
 8004d60:	d1f9      	bne.n	8004d56 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8004d62:	6a1f      	ldr	r7, [r3, #32]
 8004d64:	eba5 0c07 	sub.w	ip, r5, r7
 8004d68:	4584      	cmp	ip, r0
 8004d6a:	d3f4      	bcc.n	8004d56 <tcp_alloc+0x10a>
 8004d6c:	e7ef      	b.n	8004d4e <tcp_alloc+0x102>
  if (inactive != NULL) {
 8004d6e:	b114      	cbz	r4, 8004d76 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff fecf 	bl	8004b14 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f7fe fd0a 	bl	8003790 <memp_malloc>
  if (pcb != NULL) {
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d096      	beq.n	8004cb0 <tcp_alloc+0x64>
 8004d82:	e76a      	b.n	8004c5a <tcp_alloc+0xe>
 8004d84:	2000a960 	.word	0x2000a960
 8004d88:	2000a965 	.word	0x2000a965
 8004d8c:	08004f71 	.word	0x08004f71
 8004d90:	006ddd00 	.word	0x006ddd00
 8004d94:	2000a950 	.word	0x2000a950
 8004d98:	2000a968 	.word	0x2000a968

08004d9c <tcp_new>:
{
 8004d9c:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
 8004d9e:	2040      	movs	r0, #64	; 0x40
 8004da0:	f7ff ff54 	bl	8004c4c <tcp_alloc>
}
 8004da4:	bd08      	pop	{r3, pc}
	...

08004da8 <tcp_close_shutdown>:
{
 8004da8:	b530      	push	{r4, r5, lr}
 8004daa:	b085      	sub	sp, #20
 8004dac:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004dae:	4604      	mov	r4, r0
 8004db0:	b188      	cbz	r0, 8004dd6 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004db2:	b125      	cbz	r5, 8004dbe <tcp_close_shutdown+0x16>
 8004db4:	7d23      	ldrb	r3, [r4, #20]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d015      	beq.n	8004de6 <tcp_close_shutdown+0x3e>
 8004dba:	2b07      	cmp	r3, #7
 8004dbc:	d013      	beq.n	8004de6 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 8004dbe:	7d23      	ldrb	r3, [r4, #20]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d06d      	beq.n	8004ea0 <tcp_close_shutdown+0xf8>
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	f000 8091 	beq.w	8004eec <tcp_close_shutdown+0x144>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d04f      	beq.n	8004e6e <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff fac8 	bl	8004364 <tcp_close_shutdown_fin>
 8004dd4:	e081      	b.n	8004eda <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004dd6:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <tcp_close_shutdown+0x15c>)
 8004dd8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004ddc:	494a      	ldr	r1, [pc, #296]	; (8004f08 <tcp_close_shutdown+0x160>)
 8004dde:	484b      	ldr	r0, [pc, #300]	; (8004f0c <tcp_close_shutdown+0x164>)
 8004de0:	f005 f956 	bl	800a090 <iprintf>
 8004de4:	e7e5      	b.n	8004db2 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004de6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004de8:	b1e3      	cbz	r3, 8004e24 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004dea:	8b63      	ldrh	r3, [r4, #26]
 8004dec:	f013 0f10 	tst.w	r3, #16
 8004df0:	d01d      	beq.n	8004e2e <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004df2:	8b23      	ldrh	r3, [r4, #24]
 8004df4:	9302      	str	r3, [sp, #8]
 8004df6:	8ae3      	ldrh	r3, [r4, #22]
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	1d23      	adds	r3, r4, #4
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4623      	mov	r3, r4
 8004e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e04:	4620      	mov	r0, r4
 8004e06:	f002 ff83 	bl	8007d10 <tcp_rst>
      tcp_pcb_purge(pcb);
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff fd64 	bl	80048d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <tcp_close_shutdown+0x168>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d012      	beq.n	8004e3e <tcp_close_shutdown+0x96>
 8004e18:	b1bb      	cbz	r3, 8004e4a <tcp_close_shutdown+0xa2>
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	42a2      	cmp	r2, r4
 8004e1e:	d012      	beq.n	8004e46 <tcp_close_shutdown+0x9e>
 8004e20:	4613      	mov	r3, r2
 8004e22:	e7f9      	b.n	8004e18 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004e24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004e2a:	d0c8      	beq.n	8004dbe <tcp_close_shutdown+0x16>
 8004e2c:	e7dd      	b.n	8004dea <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004e2e:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <tcp_close_shutdown+0x15c>)
 8004e30:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8004e34:	4937      	ldr	r1, [pc, #220]	; (8004f14 <tcp_close_shutdown+0x16c>)
 8004e36:	4835      	ldr	r0, [pc, #212]	; (8004f0c <tcp_close_shutdown+0x164>)
 8004e38:	f005 f92a 	bl	800a090 <iprintf>
 8004e3c:	e7d9      	b.n	8004df2 <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 8004e3e:	68e2      	ldr	r2, [r4, #12]
 8004e40:	4b33      	ldr	r3, [pc, #204]	; (8004f10 <tcp_close_shutdown+0x168>)
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e001      	b.n	8004e4a <tcp_close_shutdown+0xa2>
 8004e46:	68e2      	ldr	r2, [r4, #12]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60e3      	str	r3, [r4, #12]
 8004e4e:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <tcp_close_shutdown+0x170>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <tcp_close_shutdown+0x174>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	42a3      	cmp	r3, r4
 8004e5a:	d004      	beq.n	8004e66 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7ff fac9 	bl	80043f4 <tcp_free>
      return ERR_OK;
 8004e62:	2000      	movs	r0, #0
 8004e64:	e039      	b.n	8004eda <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 8004e66:	f001 ffcf 	bl	8006e08 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e035      	b.n	8004eda <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 8004e6e:	8ae3      	ldrh	r3, [r4, #22]
 8004e70:	b18b      	cbz	r3, 8004e96 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004e72:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <tcp_close_shutdown+0x178>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	d005      	beq.n	8004e86 <tcp_close_shutdown+0xde>
 8004e7a:	b153      	cbz	r3, 8004e92 <tcp_close_shutdown+0xea>
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	42a2      	cmp	r2, r4
 8004e80:	d005      	beq.n	8004e8e <tcp_close_shutdown+0xe6>
 8004e82:	4613      	mov	r3, r2
 8004e84:	e7f9      	b.n	8004e7a <tcp_close_shutdown+0xd2>
 8004e86:	68e2      	ldr	r2, [r4, #12]
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <tcp_close_shutdown+0x178>)
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e001      	b.n	8004e92 <tcp_close_shutdown+0xea>
 8004e8e:	68e2      	ldr	r2, [r4, #12]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	2300      	movs	r3, #0
 8004e94:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7ff faac 	bl	80043f4 <tcp_free>
  return ERR_OK;
 8004e9c:	2000      	movs	r0, #0
      break;
 8004e9e:	e01c      	b.n	8004eda <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004ea0:	4d20      	ldr	r5, [pc, #128]	; (8004f24 <tcp_close_shutdown+0x17c>)
 8004ea2:	1d29      	adds	r1, r5, #4
 8004ea4:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8004ea6:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004ea8:	f851 3b04 	ldr.w	r3, [r1], #4
 8004eac:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004eae:	b133      	cbz	r3, 8004ebe <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 8004eb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eb2:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8004eb4:	bf08      	it	eq
 8004eb6:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f8      	bne.n	8004eb0 <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004ebe:	428d      	cmp	r5, r1
 8004ec0:	d1f2      	bne.n	8004ea8 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4818      	ldr	r0, [pc, #96]	; (8004f28 <tcp_close_shutdown+0x180>)
 8004ec6:	f7ff fd37 	bl	8004938 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004eca:	7d23      	ldrb	r3, [r4, #20]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d006      	beq.n	8004ede <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	2002      	movs	r0, #2
 8004ed4:	f7fe fc8c 	bl	80037f0 <memp_free>
  return ERR_OK;
 8004ed8:	2000      	movs	r0, #0
}
 8004eda:	b005      	add	sp, #20
 8004edc:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <tcp_close_shutdown+0x15c>)
 8004ee0:	22df      	movs	r2, #223	; 0xdf
 8004ee2:	4912      	ldr	r1, [pc, #72]	; (8004f2c <tcp_close_shutdown+0x184>)
 8004ee4:	4809      	ldr	r0, [pc, #36]	; (8004f0c <tcp_close_shutdown+0x164>)
 8004ee6:	f005 f8d3 	bl	800a090 <iprintf>
 8004eea:	e7f1      	b.n	8004ed0 <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004eec:	4621      	mov	r1, r4
 8004eee:	4808      	ldr	r0, [pc, #32]	; (8004f10 <tcp_close_shutdown+0x168>)
 8004ef0:	f7ff fd22 	bl	8004938 <tcp_pcb_remove>
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <tcp_close_shutdown+0x170>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7ff fa7a 	bl	80043f4 <tcp_free>
  return ERR_OK;
 8004f00:	2000      	movs	r0, #0
      break;
 8004f02:	e7ea      	b.n	8004eda <tcp_close_shutdown+0x132>
 8004f04:	0800b99c 	.word	0x0800b99c
 8004f08:	0800bd98 	.word	0x0800bd98
 8004f0c:	0800b1cc 	.word	0x0800b1cc
 8004f10:	2000a950 	.word	0x2000a950
 8004f14:	0800bdb8 	.word	0x0800bdb8
 8004f18:	2000a954 	.word	0x2000a954
 8004f1c:	2000a994 	.word	0x2000a994
 8004f20:	2000a958 	.word	0x2000a958
 8004f24:	0800c028 	.word	0x0800c028
 8004f28:	2000a95c 	.word	0x2000a95c
 8004f2c:	0800bdd4 	.word	0x0800bdd4

08004f30 <tcp_close>:
{
 8004f30:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004f32:	b160      	cbz	r0, 8004f4e <tcp_close+0x1e>
 8004f34:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8004f36:	7d02      	ldrb	r2, [r0, #20]
 8004f38:	2a01      	cmp	r2, #1
 8004f3a:	d003      	beq.n	8004f44 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8004f3c:	8b42      	ldrh	r2, [r0, #26]
 8004f3e:	f042 0210 	orr.w	r2, r2, #16
 8004f42:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8004f44:	2101      	movs	r1, #1
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff2e 	bl	8004da8 <tcp_close_shutdown>
}
 8004f4c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <tcp_close+0x34>)
 8004f50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004f54:	4904      	ldr	r1, [pc, #16]	; (8004f68 <tcp_close+0x38>)
 8004f56:	4805      	ldr	r0, [pc, #20]	; (8004f6c <tcp_close+0x3c>)
 8004f58:	f005 f89a 	bl	800a090 <iprintf>
 8004f5c:	f06f 000f 	mvn.w	r0, #15
 8004f60:	e7f4      	b.n	8004f4c <tcp_close+0x1c>
 8004f62:	bf00      	nop
 8004f64:	0800b99c 	.word	0x0800b99c
 8004f68:	0800bdf0 	.word	0x0800bdf0
 8004f6c:	0800b1cc 	.word	0x0800b1cc

08004f70 <tcp_recv_null>:
{
 8004f70:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8004f72:	b151      	cbz	r1, 8004f8a <tcp_recv_null+0x1a>
 8004f74:	4614      	mov	r4, r2
 8004f76:	4608      	mov	r0, r1
  if (p != NULL) {
 8004f78:	b18a      	cbz	r2, 8004f9e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8004f7a:	8911      	ldrh	r1, [r2, #8]
 8004f7c:	f7ff fb60 	bl	8004640 <tcp_recved>
    pbuf_free(p);
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fe fef3 	bl	8003d6c <pbuf_free>
  return ERR_OK;
 8004f86:	2000      	movs	r0, #0
}
 8004f88:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8004f8a:	4b08      	ldr	r3, [pc, #32]	; (8004fac <tcp_recv_null+0x3c>)
 8004f8c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8004f90:	4907      	ldr	r1, [pc, #28]	; (8004fb0 <tcp_recv_null+0x40>)
 8004f92:	4808      	ldr	r0, [pc, #32]	; (8004fb4 <tcp_recv_null+0x44>)
 8004f94:	f005 f87c 	bl	800a090 <iprintf>
 8004f98:	f06f 000f 	mvn.w	r0, #15
 8004f9c:	e7f4      	b.n	8004f88 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8004f9e:	b10b      	cbz	r3, 8004fa4 <tcp_recv_null+0x34>
  return ERR_OK;
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	e7f1      	b.n	8004f88 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8004fa4:	f7ff ffc4 	bl	8004f30 <tcp_close>
 8004fa8:	e7ee      	b.n	8004f88 <tcp_recv_null+0x18>
 8004faa:	bf00      	nop
 8004fac:	0800b99c 	.word	0x0800b99c
 8004fb0:	0800be08 	.word	0x0800be08
 8004fb4:	0800b1cc 	.word	0x0800b1cc

08004fb8 <tcp_process_refused_data>:
{
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8004fba:	b318      	cbz	r0, 8005004 <tcp_process_refused_data+0x4c>
 8004fbc:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8004fbe:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8004fc0:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8004fc6:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8004fca:	b32d      	cbz	r5, 8005018 <tcp_process_refused_data+0x60>
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4601      	mov	r1, r0
 8004fd0:	6900      	ldr	r0, [r0, #16]
 8004fd2:	47a8      	blx	r5
 8004fd4:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8004fd6:	bb3d      	cbnz	r5, 8005028 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8004fd8:	f017 0f20 	tst.w	r7, #32
 8004fdc:	d02a      	beq.n	8005034 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004fde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004fe0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8004fe4:	bf1c      	itt	ne
 8004fe6:	3301      	addne	r3, #1
 8004fe8:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8004fea:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8004fee:	b30e      	cbz	r6, 8005034 <tcp_process_refused_data+0x7c>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	6920      	ldr	r0, [r4, #16]
 8004ff8:	47b0      	blx	r6
          return ERR_ABRT;
 8004ffa:	f110 0f0d 	cmn.w	r0, #13
 8004ffe:	bf08      	it	eq
 8005000:	4605      	moveq	r5, r0
 8005002:	e017      	b.n	8005034 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <tcp_process_refused_data+0x80>)
 8005006:	f240 6209 	movw	r2, #1545	; 0x609
 800500a:	490c      	ldr	r1, [pc, #48]	; (800503c <tcp_process_refused_data+0x84>)
 800500c:	480c      	ldr	r0, [pc, #48]	; (8005040 <tcp_process_refused_data+0x88>)
 800500e:	f005 f83f 	bl	800a090 <iprintf>
 8005012:	f06f 050f 	mvn.w	r5, #15
 8005016:	e00d      	b.n	8005034 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005018:	2300      	movs	r3, #0
 800501a:	4632      	mov	r2, r6
 800501c:	4601      	mov	r1, r0
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff ffa6 	bl	8004f70 <tcp_recv_null>
 8005024:	4605      	mov	r5, r0
 8005026:	e7d6      	b.n	8004fd6 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 8005028:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 800502c:	bf1c      	itt	ne
 800502e:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 8005030:	f06f 0504 	mvnne.w	r5, #4
}
 8005034:	4628      	mov	r0, r5
 8005036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005038:	0800b99c 	.word	0x0800b99c
 800503c:	0800be24 	.word	0x0800be24
 8005040:	0800b1cc 	.word	0x0800b1cc

08005044 <tcp_fasttmr>:
{
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <tcp_fasttmr+0x84>)
 800504a:	7813      	ldrb	r3, [r2, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8005050:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80050d0 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 8005054:	4e1d      	ldr	r6, [pc, #116]	; (80050cc <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 8005056:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800505a:	2c00      	cmp	r4, #0
 800505c:	d032      	beq.n	80050c4 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800505e:	4d1a      	ldr	r5, [pc, #104]	; (80050c8 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 8005060:	2700      	movs	r7, #0
 8005062:	e013      	b.n	800508c <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800506a:	4620      	mov	r0, r4
 800506c:	f002 fed2 	bl	8007e14 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8005070:	8b63      	ldrh	r3, [r4, #26]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	8363      	strh	r3, [r4, #26]
 8005078:	e011      	b.n	800509e <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800507a:	f023 0308 	bic.w	r3, r3, #8
 800507e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff f96f 	bl	8004364 <tcp_close_shutdown_fin>
 8005086:	e00e      	b.n	80050a6 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8005088:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800508a:	b1dc      	cbz	r4, 80050c4 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800508c:	782b      	ldrb	r3, [r5, #0]
 800508e:	7fa2      	ldrb	r2, [r4, #30]
 8005090:	429a      	cmp	r2, r3
 8005092:	d0f9      	beq.n	8005088 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8005094:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8005096:	8b63      	ldrh	r3, [r4, #26]
 8005098:	f013 0f01 	tst.w	r3, #1
 800509c:	d1e2      	bne.n	8005064 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800509e:	8b63      	ldrh	r3, [r4, #26]
 80050a0:	f013 0f08 	tst.w	r3, #8
 80050a4:	d1e9      	bne.n	800507a <tcp_fasttmr+0x36>
      next = pcb->next;
 80050a6:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80050aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80050ac:	b143      	cbz	r3, 80050c0 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 80050ae:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff ff81 	bl	8004fb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80050b6:	7833      	ldrb	r3, [r6, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1cc      	bne.n	8005056 <tcp_fasttmr+0x12>
      pcb = next;
 80050bc:	464c      	mov	r4, r9
 80050be:	e7e4      	b.n	800508a <tcp_fasttmr+0x46>
 80050c0:	464c      	mov	r4, r9
 80050c2:	e7e2      	b.n	800508a <tcp_fasttmr+0x46>
}
 80050c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050c8:	2000a965 	.word	0x2000a965
 80050cc:	2000a954 	.word	0x2000a954
 80050d0:	2000a950 	.word	0x2000a950

080050d4 <tcp_slowtmr>:
{
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	b085      	sub	sp, #20
  ++tcp_ticks;
 80050da:	4ab4      	ldr	r2, [pc, #720]	; (80053ac <tcp_slowtmr+0x2d8>)
 80050dc:	6813      	ldr	r3, [r2, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80050e2:	4ab3      	ldr	r2, [pc, #716]	; (80053b0 <tcp_slowtmr+0x2dc>)
 80050e4:	7813      	ldrb	r3, [r2, #0]
 80050e6:	3301      	adds	r3, #1
 80050e8:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80050ea:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 80053d8 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80050ee:	4eb1      	ldr	r6, [pc, #708]	; (80053b4 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80050f0:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 80053dc <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 80050f4:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	f000 81f4 	beq.w	80054e6 <tcp_slowtmr+0x412>
  prev = NULL;
 80050fe:	2500      	movs	r5, #0
 8005100:	e19e      	b.n	8005440 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005102:	4633      	mov	r3, r6
 8005104:	f240 42be 	movw	r2, #1214	; 0x4be
 8005108:	49ab      	ldr	r1, [pc, #684]	; (80053b8 <tcp_slowtmr+0x2e4>)
 800510a:	48ac      	ldr	r0, [pc, #688]	; (80053bc <tcp_slowtmr+0x2e8>)
 800510c:	f004 ffc0 	bl	800a090 <iprintf>
 8005110:	e19a      	b.n	8005448 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005112:	4633      	mov	r3, r6
 8005114:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005118:	49a9      	ldr	r1, [pc, #676]	; (80053c0 <tcp_slowtmr+0x2ec>)
 800511a:	48a8      	ldr	r0, [pc, #672]	; (80053bc <tcp_slowtmr+0x2e8>)
 800511c:	f004 ffb8 	bl	800a090 <iprintf>
 8005120:	e196      	b.n	8005450 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005122:	4633      	mov	r3, r6
 8005124:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005128:	49a6      	ldr	r1, [pc, #664]	; (80053c4 <tcp_slowtmr+0x2f0>)
 800512a:	48a4      	ldr	r0, [pc, #656]	; (80053bc <tcp_slowtmr+0x2e8>)
 800512c:	f004 ffb0 	bl	800a090 <iprintf>
 8005130:	e192      	b.n	8005458 <tcp_slowtmr+0x384>
      continue;
 8005132:	4625      	mov	r5, r4
      pcb = pcb->next;
 8005134:	68e4      	ldr	r4, [r4, #12]
      continue;
 8005136:	e181      	b.n	800543c <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005138:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800513c:	2b05      	cmp	r3, #5
 800513e:	f240 819b 	bls.w	8005478 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 8005142:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8005146:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8005148:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800514a:	b15b      	cbz	r3, 8005164 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800514c:	4b97      	ldr	r3, [pc, #604]	; (80053ac <tcp_slowtmr+0x2d8>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6a23      	ldr	r3, [r4, #32]
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800515c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8005160:	f080 80f8 	bcs.w	8005354 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8005164:	7d23      	ldrb	r3, [r4, #20]
 8005166:	2b03      	cmp	r3, #3
 8005168:	f000 80f8 	beq.w	800535c <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 800516c:	2b09      	cmp	r3, #9
 800516e:	f040 80fc 	bne.w	800536a <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005172:	4b8e      	ldr	r3, [pc, #568]	; (80053ac <tcp_slowtmr+0x2d8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a22      	ldr	r2, [r4, #32]
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	2bf0      	cmp	r3, #240	; 0xf0
 800517c:	f240 80f5 	bls.w	800536a <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 8005180:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff fba7 	bl	80048d8 <tcp_pcb_purge>
      if (prev != NULL) {
 800518a:	2d00      	cmp	r5, #0
 800518c:	f000 8130 	beq.w	80053f0 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005190:	f8da 3000 	ldr.w	r3, [sl]
 8005194:	42a3      	cmp	r3, r4
 8005196:	f000 8123 	beq.w	80053e0 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 800519e:	f1b8 0f00 	cmp.w	r8, #0
 80051a2:	f040 8134 	bne.w	800540e <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 80051a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 80051aa:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff f920 	bl	80043f4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80051b4:	4b84      	ldr	r3, [pc, #528]	; (80053c8 <tcp_slowtmr+0x2f4>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	f000 813a 	beq.w	8005434 <tcp_slowtmr+0x360>
 80051c0:	f06f 010c 	mvn.w	r1, #12
 80051c4:	4648      	mov	r0, r9
 80051c6:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80051c8:	4b7f      	ldr	r3, [pc, #508]	; (80053c8 <tcp_slowtmr+0x2f4>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d191      	bne.n	80050f4 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80051d0:	4644      	mov	r4, r8
 80051d2:	e133      	b.n	800543c <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80051d4:	4633      	mov	r3, r6
 80051d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80051da:	497c      	ldr	r1, [pc, #496]	; (80053cc <tcp_slowtmr+0x2f8>)
 80051dc:	4877      	ldr	r0, [pc, #476]	; (80053bc <tcp_slowtmr+0x2e8>)
 80051de:	f004 ff57 	bl	800a090 <iprintf>
 80051e2:	e15b      	b.n	800549c <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80051e4:	4620      	mov	r0, r4
 80051e6:	f002 fb0d 	bl	8007804 <tcp_split_unsent_seg>
 80051ea:	b158      	cbz	r0, 8005204 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80051f2:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d876      	bhi.n	80052e8 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 80051fa:	3301      	adds	r3, #1
 80051fc:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8005200:	2700      	movs	r7, #0
 8005202:	e050      	b.n	80052a6 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8005204:	4620      	mov	r0, r4
 8005206:	f002 fe05 	bl	8007e14 <tcp_output>
 800520a:	2800      	cmp	r0, #0
 800520c:	d1ee      	bne.n	80051ec <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800520e:	2700      	movs	r7, #0
 8005210:	e049      	b.n	80052a6 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005212:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005214:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005218:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800521a:	bf9c      	itt	ls
 800521c:	3301      	addls	r3, #1
 800521e:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8005220:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8005224:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8005228:	429a      	cmp	r2, r3
 800522a:	db3c      	blt.n	80052a6 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800522c:	4620      	mov	r0, r4
 800522e:	f002 fc9d 	bl	8007b6c <tcp_rexmit_rto_prepare>
 8005232:	b118      	cbz	r0, 800523c <tcp_slowtmr+0x168>
 8005234:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005236:	bbb3      	cbnz	r3, 80052a6 <tcp_slowtmr+0x1d2>
 8005238:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800523a:	b3a3      	cbz	r3, 80052a6 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 800523c:	7d23      	ldrb	r3, [r4, #20]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d014      	beq.n	800526c <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005242:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8005246:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800524a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800524e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005252:	2a0c      	cmp	r2, #12
 8005254:	bf28      	it	cs
 8005256:	220c      	movcs	r2, #12
 8005258:	495d      	ldr	r1, [pc, #372]	; (80053d0 <tcp_slowtmr+0x2fc>)
 800525a:	5c8a      	ldrb	r2, [r1, r2]
 800525c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800525e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005262:	4293      	cmp	r3, r2
 8005264:	bfa8      	it	ge
 8005266:	4613      	movge	r3, r2
 8005268:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005270:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8005274:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8005278:	429a      	cmp	r2, r3
 800527a:	bf28      	it	cs
 800527c:	461a      	movcs	r2, r3
 800527e:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005280:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8005282:	0043      	lsls	r3, r0, #1
 8005284:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005286:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800528a:	bf98      	it	ls
 800528c:	460b      	movls	r3, r1
 800528e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 8005292:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800529c:	4620      	mov	r0, r4
 800529e:	f002 ff85 	bl	80081ac <tcp_rexmit_rto_commit>
 80052a2:	e000      	b.n	80052a6 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 80052a4:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 80052a6:	7d23      	ldrb	r3, [r4, #20]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d01f      	beq.n	80052ec <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80052ac:	f894 8009 	ldrb.w	r8, [r4, #9]
 80052b0:	f018 0808 	ands.w	r8, r8, #8
 80052b4:	f43f af48 	beq.w	8005148 <tcp_slowtmr+0x74>
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d12a      	bne.n	8005312 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052bc:	4b3b      	ldr	r3, [pc, #236]	; (80053ac <tcp_slowtmr+0x2d8>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	6a23      	ldr	r3, [r4, #32]
 80052c2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80052c4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80052c8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80052cc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80052d0:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052d4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80052d8:	d920      	bls.n	800531c <tcp_slowtmr+0x248>
        ++pcb_remove;
 80052da:	3701      	adds	r7, #1
 80052dc:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 80052de:	f04f 0801 	mov.w	r8, #1
 80052e2:	e731      	b.n	8005148 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 80052e4:	2701      	movs	r7, #1
 80052e6:	e7de      	b.n	80052a6 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 80052e8:	2700      	movs	r7, #0
 80052ea:	e7dc      	b.n	80052a6 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 80052ec:	8b63      	ldrh	r3, [r4, #26]
 80052ee:	f013 0f10 	tst.w	r3, #16
 80052f2:	d007      	beq.n	8005304 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052f4:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <tcp_slowtmr+0x2d8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a22      	ldr	r2, [r4, #32]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	2b28      	cmp	r3, #40	; 0x28
 80052fe:	d901      	bls.n	8005304 <tcp_slowtmr+0x230>
          ++pcb_remove;
 8005300:	3701      	adds	r7, #1
 8005302:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8005304:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8134 	beq.w	8005574 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 800530c:	f04f 0800 	mov.w	r8, #0
 8005310:	e71c      	b.n	800514c <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 8005312:	2b07      	cmp	r3, #7
 8005314:	d0d2      	beq.n	80052bc <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	e715      	b.n	8005148 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800531c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8005320:	482c      	ldr	r0, [pc, #176]	; (80053d4 <tcp_slowtmr+0x300>)
 8005322:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005326:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800532a:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800532e:	d802      	bhi.n	8005336 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 8005330:	f04f 0800 	mov.w	r8, #0
 8005334:	e708      	b.n	8005148 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8005336:	4620      	mov	r0, r4
 8005338:	f002 ff6e 	bl	8008218 <tcp_keepalive>
        if (err == ERR_OK) {
 800533c:	b938      	cbnz	r0, 800534e <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 800533e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8005342:	3301      	adds	r3, #1
 8005344:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8005348:	f04f 0800 	mov.w	r8, #0
 800534c:	e6fc      	b.n	8005148 <tcp_slowtmr+0x74>
 800534e:	f04f 0800 	mov.w	r8, #0
 8005352:	e6f9      	b.n	8005148 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff fab5 	bl	80048c4 <tcp_free_ooseq>
 800535a:	e703      	b.n	8005164 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800535c:	4b13      	ldr	r3, [pc, #76]	; (80053ac <tcp_slowtmr+0x2d8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6a22      	ldr	r2, [r4, #32]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	2b28      	cmp	r3, #40	; 0x28
 8005366:	f63f af0b 	bhi.w	8005180 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 800536a:	2f00      	cmp	r7, #0
 800536c:	f47f af08 	bne.w	8005180 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 8005370:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8005372:	7f23      	ldrb	r3, [r4, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800537a:	7f62      	ldrb	r2, [r4, #29]
 800537c:	429a      	cmp	r2, r3
 800537e:	d85b      	bhi.n	8005438 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8005384:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <tcp_slowtmr+0x2f4>)
 8005386:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8005388:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d04b      	beq.n	8005428 <tcp_slowtmr+0x354>
 8005390:	4621      	mov	r1, r4
 8005392:	6920      	ldr	r0, [r4, #16]
 8005394:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <tcp_slowtmr+0x2f4>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f47f aeaa 	bne.w	80050f4 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d041      	beq.n	8005428 <tcp_slowtmr+0x354>
 80053a4:	4625      	mov	r5, r4
      pcb = pcb->next;
 80053a6:	463c      	mov	r4, r7
 80053a8:	e048      	b.n	800543c <tcp_slowtmr+0x368>
 80053aa:	bf00      	nop
 80053ac:	2000a960 	.word	0x2000a960
 80053b0:	2000a965 	.word	0x2000a965
 80053b4:	0800b99c 	.word	0x0800b99c
 80053b8:	0800be4c 	.word	0x0800be4c
 80053bc:	0800b1cc 	.word	0x0800b1cc
 80053c0:	0800be78 	.word	0x0800be78
 80053c4:	0800bea4 	.word	0x0800bea4
 80053c8:	2000a954 	.word	0x2000a954
 80053cc:	0800bf08 	.word	0x0800bf08
 80053d0:	0800c018 	.word	0x0800c018
 80053d4:	000124f8 	.word	0x000124f8
 80053d8:	2000a950 	.word	0x2000a950
 80053dc:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80053e0:	4633      	mov	r3, r6
 80053e2:	f240 526d 	movw	r2, #1389	; 0x56d
 80053e6:	4966      	ldr	r1, [pc, #408]	; (8005580 <tcp_slowtmr+0x4ac>)
 80053e8:	4866      	ldr	r0, [pc, #408]	; (8005584 <tcp_slowtmr+0x4b0>)
 80053ea:	f004 fe51 	bl	800a090 <iprintf>
 80053ee:	e6d4      	b.n	800519a <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80053f0:	f8da 3000 	ldr.w	r3, [sl]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d006      	beq.n	8005406 <tcp_slowtmr+0x332>
 80053f8:	4633      	mov	r3, r6
 80053fa:	f240 5271 	movw	r2, #1393	; 0x571
 80053fe:	4962      	ldr	r1, [pc, #392]	; (8005588 <tcp_slowtmr+0x4b4>)
 8005400:	4860      	ldr	r0, [pc, #384]	; (8005584 <tcp_slowtmr+0x4b0>)
 8005402:	f004 fe45 	bl	800a090 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005406:	68e3      	ldr	r3, [r4, #12]
 8005408:	f8ca 3000 	str.w	r3, [sl]
 800540c:	e6c7      	b.n	800519e <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800540e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005410:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005412:	8b23      	ldrh	r3, [r4, #24]
 8005414:	9302      	str	r3, [sp, #8]
 8005416:	8ae3      	ldrh	r3, [r4, #22]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	1d23      	adds	r3, r4, #4
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	4623      	mov	r3, r4
 8005420:	4620      	mov	r0, r4
 8005422:	f002 fc75 	bl	8007d10 <tcp_rst>
 8005426:	e6be      	b.n	80051a6 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8005428:	4620      	mov	r0, r4
 800542a:	f002 fcf3 	bl	8007e14 <tcp_output>
 800542e:	4625      	mov	r5, r4
      pcb = pcb->next;
 8005430:	463c      	mov	r4, r7
 8005432:	e003      	b.n	800543c <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8005434:	4644      	mov	r4, r8
 8005436:	e001      	b.n	800543c <tcp_slowtmr+0x368>
 8005438:	4625      	mov	r5, r4
      pcb = pcb->next;
 800543a:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800543c:	2c00      	cmp	r4, #0
 800543e:	d052      	beq.n	80054e6 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005440:	7d23      	ldrb	r3, [r4, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f43f ae5d 	beq.w	8005102 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005448:	7d23      	ldrb	r3, [r4, #20]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f43f ae61 	beq.w	8005112 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005450:	7d23      	ldrb	r3, [r4, #20]
 8005452:	2b0a      	cmp	r3, #10
 8005454:	f43f ae65 	beq.w	8005122 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005458:	4b4c      	ldr	r3, [pc, #304]	; (800558c <tcp_slowtmr+0x4b8>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	7fa2      	ldrb	r2, [r4, #30]
 800545e:	429a      	cmp	r2, r3
 8005460:	f43f ae67 	beq.w	8005132 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8005464:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005466:	7d23      	ldrb	r3, [r4, #20]
 8005468:	2b02      	cmp	r3, #2
 800546a:	f43f ae65 	beq.w	8005138 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800546e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005472:	2b0b      	cmp	r3, #11
 8005474:	f63f af16 	bhi.w	80052a4 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 8005478:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 800547c:	2f00      	cmp	r7, #0
 800547e:	f43f aec8 	beq.w	8005212 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005482:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005484:	b133      	cbz	r3, 8005494 <tcp_slowtmr+0x3c0>
 8005486:	4633      	mov	r3, r6
 8005488:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800548c:	4940      	ldr	r1, [pc, #256]	; (8005590 <tcp_slowtmr+0x4bc>)
 800548e:	483d      	ldr	r0, [pc, #244]	; (8005584 <tcp_slowtmr+0x4b0>)
 8005490:	f004 fdfe 	bl	800a090 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005494:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005496:	2b00      	cmp	r3, #0
 8005498:	f43f ae9c 	beq.w	80051d4 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800549c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80054a0:	2b0b      	cmp	r3, #11
 80054a2:	f63f af1f 	bhi.w	80052e4 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80054a6:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 80054aa:	4b3a      	ldr	r3, [pc, #232]	; (8005594 <tcp_slowtmr+0x4c0>)
 80054ac:	4413      	add	r3, r2
 80054ae:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80054b2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d208      	bcs.n	80054cc <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 80054ba:	3301      	adds	r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80054c2:	4293      	cmp	r3, r2
    pcb_remove = 0;
 80054c4:	bf38      	it	cc
 80054c6:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 80054c8:	f4ff aeed 	bcc.w	80052a6 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 80054cc:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80054d0:	2900      	cmp	r1, #0
 80054d2:	f47f ae87 	bne.w	80051e4 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80054d6:	4620      	mov	r0, r4
 80054d8:	f002 fecc 	bl	8008274 <tcp_zero_window_probe>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f43f ae85 	beq.w	80051ec <tcp_slowtmr+0x118>
    pcb_remove = 0;
 80054e2:	2700      	movs	r7, #0
 80054e4:	e6df      	b.n	80052a6 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 80054e6:	4b2c      	ldr	r3, [pc, #176]	; (8005598 <tcp_slowtmr+0x4c4>)
 80054e8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80054ea:	2c00      	cmp	r4, #0
 80054ec:	d045      	beq.n	800557a <tcp_slowtmr+0x4a6>
  prev = NULL;
 80054ee:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80054f0:	4f2a      	ldr	r7, [pc, #168]	; (800559c <tcp_slowtmr+0x4c8>)
 80054f2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80055ac <tcp_slowtmr+0x4d8>
 80054f6:	4e23      	ldr	r6, [pc, #140]	; (8005584 <tcp_slowtmr+0x4b0>)
 80054f8:	e009      	b.n	800550e <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80054fa:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <tcp_slowtmr+0x4cc>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a22      	ldr	r2, [r4, #32]
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	2bf0      	cmp	r3, #240	; 0xf0
 8005504:	d80e      	bhi.n	8005524 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8005506:	4625      	mov	r5, r4
 8005508:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800550a:	2c00      	cmp	r4, #0
 800550c:	d035      	beq.n	800557a <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800550e:	7d23      	ldrb	r3, [r4, #20]
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d0f2      	beq.n	80054fa <tcp_slowtmr+0x426>
 8005514:	463b      	mov	r3, r7
 8005516:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800551a:	4641      	mov	r1, r8
 800551c:	4630      	mov	r0, r6
 800551e:	f004 fdb7 	bl	800a090 <iprintf>
 8005522:	e7ea      	b.n	80054fa <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff f9d7 	bl	80048d8 <tcp_pcb_purge>
      if (prev != NULL) {
 800552a:	b1a5      	cbz	r5, 8005556 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <tcp_slowtmr+0x4c4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	42a3      	cmp	r3, r4
 8005532:	d008      	beq.n	8005546 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8005538:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 800553c:	4620      	mov	r0, r4
 800553e:	f7fe ff59 	bl	80043f4 <tcp_free>
      pcb = pcb->next;
 8005542:	464c      	mov	r4, r9
 8005544:	e7e1      	b.n	800550a <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005546:	463b      	mov	r3, r7
 8005548:	f240 52af 	movw	r2, #1455	; 0x5af
 800554c:	4915      	ldr	r1, [pc, #84]	; (80055a4 <tcp_slowtmr+0x4d0>)
 800554e:	4630      	mov	r0, r6
 8005550:	f004 fd9e 	bl	800a090 <iprintf>
 8005554:	e7ee      	b.n	8005534 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <tcp_slowtmr+0x4c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	42a3      	cmp	r3, r4
 800555c:	d006      	beq.n	800556c <tcp_slowtmr+0x498>
 800555e:	463b      	mov	r3, r7
 8005560:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005564:	4910      	ldr	r1, [pc, #64]	; (80055a8 <tcp_slowtmr+0x4d4>)
 8005566:	4630      	mov	r0, r6
 8005568:	f004 fd92 	bl	800a090 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800556c:	68e2      	ldr	r2, [r4, #12]
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <tcp_slowtmr+0x4c4>)
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e7e1      	b.n	8005538 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 8005574:	f04f 0800 	mov.w	r8, #0
 8005578:	e6f7      	b.n	800536a <tcp_slowtmr+0x296>
}
 800557a:	b005      	add	sp, #20
 800557c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005580:	0800bf40 	.word	0x0800bf40
 8005584:	0800b1cc 	.word	0x0800b1cc
 8005588:	0800bf6c 	.word	0x0800bf6c
 800558c:	2000a965 	.word	0x2000a965
 8005590:	0800bed4 	.word	0x0800bed4
 8005594:	0800c038 	.word	0x0800c038
 8005598:	2000a968 	.word	0x2000a968
 800559c:	0800b99c 	.word	0x0800b99c
 80055a0:	2000a960 	.word	0x2000a960
 80055a4:	0800bfc8 	.word	0x0800bfc8
 80055a8:	0800bff0 	.word	0x0800bff0
 80055ac:	0800bf98 	.word	0x0800bf98

080055b0 <tcp_tmr>:
{
 80055b0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80055b2:	f7ff fd47 	bl	8005044 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80055b6:	4a06      	ldr	r2, [pc, #24]	; (80055d0 <tcp_tmr+0x20>)
 80055b8:	7813      	ldrb	r3, [r2, #0]
 80055ba:	3301      	adds	r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	7013      	strb	r3, [r2, #0]
 80055c0:	f013 0f01 	tst.w	r3, #1
 80055c4:	d100      	bne.n	80055c8 <tcp_tmr+0x18>
}
 80055c6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80055c8:	f7ff fd84 	bl	80050d4 <tcp_slowtmr>
}
 80055cc:	e7fb      	b.n	80055c6 <tcp_tmr+0x16>
 80055ce:	bf00      	nop
 80055d0:	2000a964 	.word	0x2000a964

080055d4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80055d4:	4a09      	ldr	r2, [pc, #36]	; (80055fc <tcp_get_next_optbyte+0x28>)
 80055d6:	8813      	ldrh	r3, [r2, #0]
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80055dc:	4a08      	ldr	r2, [pc, #32]	; (8005600 <tcp_get_next_optbyte+0x2c>)
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	b11a      	cbz	r2, 80055ea <tcp_get_next_optbyte+0x16>
 80055e2:	4908      	ldr	r1, [pc, #32]	; (8005604 <tcp_get_next_optbyte+0x30>)
 80055e4:	8809      	ldrh	r1, [r1, #0]
 80055e6:	428b      	cmp	r3, r1
 80055e8:	d204      	bcs.n	80055f4 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80055ea:	4a07      	ldr	r2, [pc, #28]	; (8005608 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	7d18      	ldrb	r0, [r3, #20]
 80055f2:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80055f4:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 80055fa:	4770      	bx	lr
 80055fc:	2000a998 	.word	0x2000a998
 8005600:	2000a9a4 	.word	0x2000a9a4
 8005604:	2000a9a0 	.word	0x2000a9a0
 8005608:	2000a99c 	.word	0x2000a99c

0800560c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800560e:	4607      	mov	r7, r0
 8005610:	b1d0      	cbz	r0, 8005648 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8005612:	4b1e      	ldr	r3, [pc, #120]	; (800568c <tcp_parseopt+0x80>)
 8005614:	881d      	ldrh	r5, [r3, #0]
 8005616:	2d00      	cmp	r5, #0
 8005618:	d037      	beq.n	800568a <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <tcp_parseopt+0x84>)
 800561c:	2200      	movs	r2, #0
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	461e      	mov	r6, r3
 8005622:	8833      	ldrh	r3, [r6, #0]
 8005624:	42ab      	cmp	r3, r5
 8005626:	d230      	bcs.n	800568a <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8005628:	f7ff ffd4 	bl	80055d4 <tcp_get_next_optbyte>
      switch (opt) {
 800562c:	2801      	cmp	r0, #1
 800562e:	d0f8      	beq.n	8005622 <tcp_parseopt+0x16>
 8005630:	2802      	cmp	r0, #2
 8005632:	d011      	beq.n	8005658 <tcp_parseopt+0x4c>
 8005634:	b348      	cbz	r0, 800568a <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8005636:	f7ff ffcd 	bl	80055d4 <tcp_get_next_optbyte>
          if (data < 2) {
 800563a:	2801      	cmp	r0, #1
 800563c:	d925      	bls.n	800568a <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800563e:	8833      	ldrh	r3, [r6, #0]
 8005640:	3b02      	subs	r3, #2
 8005642:	4418      	add	r0, r3
 8005644:	8030      	strh	r0, [r6, #0]
 8005646:	e7ec      	b.n	8005622 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8005648:	4b12      	ldr	r3, [pc, #72]	; (8005694 <tcp_parseopt+0x88>)
 800564a:	f240 727d 	movw	r2, #1917	; 0x77d
 800564e:	4912      	ldr	r1, [pc, #72]	; (8005698 <tcp_parseopt+0x8c>)
 8005650:	4812      	ldr	r0, [pc, #72]	; (800569c <tcp_parseopt+0x90>)
 8005652:	f004 fd1d 	bl	800a090 <iprintf>
 8005656:	e7dc      	b.n	8005612 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005658:	f7ff ffbc 	bl	80055d4 <tcp_get_next_optbyte>
 800565c:	2804      	cmp	r0, #4
 800565e:	d114      	bne.n	800568a <tcp_parseopt+0x7e>
 8005660:	8833      	ldrh	r3, [r6, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	42ab      	cmp	r3, r5
 8005666:	da10      	bge.n	800568a <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8005668:	f7ff ffb4 	bl	80055d4 <tcp_get_next_optbyte>
 800566c:	0204      	lsls	r4, r0, #8
 800566e:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8005670:	f7ff ffb0 	bl	80055d4 <tcp_get_next_optbyte>
 8005674:	4320      	orrs	r0, r4
 8005676:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005678:	1e43      	subs	r3, r0, #1
 800567a:	b29b      	uxth	r3, r3
 800567c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005680:	bf28      	it	cs
 8005682:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8005686:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8005688:	e7cb      	b.n	8005622 <tcp_parseopt+0x16>
      }
    }
  }
}
 800568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568c:	2000a9a8 	.word	0x2000a9a8
 8005690:	2000a998 	.word	0x2000a998
 8005694:	0800c040 	.word	0x0800c040
 8005698:	0800c074 	.word	0x0800c074
 800569c:	0800b1cc 	.word	0x0800b1cc

080056a0 <tcp_input_delayed_close>:
{
 80056a0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80056a2:	4604      	mov	r4, r0
 80056a4:	b130      	cbz	r0, 80056b4 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <tcp_input_delayed_close+0x4c>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f013 0f10 	tst.w	r3, #16
 80056ae:	d109      	bne.n	80056c4 <tcp_input_delayed_close+0x24>
  return 0;
 80056b0:	2000      	movs	r0, #0
}
 80056b2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <tcp_input_delayed_close+0x50>)
 80056b6:	f240 225a 	movw	r2, #602	; 0x25a
 80056ba:	490e      	ldr	r1, [pc, #56]	; (80056f4 <tcp_input_delayed_close+0x54>)
 80056bc:	480e      	ldr	r0, [pc, #56]	; (80056f8 <tcp_input_delayed_close+0x58>)
 80056be:	f004 fce7 	bl	800a090 <iprintf>
 80056c2:	e7f0      	b.n	80056a6 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80056c4:	8b63      	ldrh	r3, [r4, #26]
 80056c6:	f013 0f10 	tst.w	r3, #16
 80056ca:	d106      	bne.n	80056da <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80056cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80056d0:	b11b      	cbz	r3, 80056da <tcp_input_delayed_close+0x3a>
 80056d2:	f06f 010e 	mvn.w	r1, #14
 80056d6:	6920      	ldr	r0, [r4, #16]
 80056d8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80056da:	4621      	mov	r1, r4
 80056dc:	4807      	ldr	r0, [pc, #28]	; (80056fc <tcp_input_delayed_close+0x5c>)
 80056de:	f7ff f92b 	bl	8004938 <tcp_pcb_remove>
    tcp_free(pcb);
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7fe fe86 	bl	80043f4 <tcp_free>
    return 1;
 80056e8:	2001      	movs	r0, #1
 80056ea:	e7e2      	b.n	80056b2 <tcp_input_delayed_close+0x12>
 80056ec:	2000a98c 	.word	0x2000a98c
 80056f0:	0800c040 	.word	0x0800c040
 80056f4:	0800c090 	.word	0x0800c090
 80056f8:	0800b1cc 	.word	0x0800b1cc
 80056fc:	2000a950 	.word	0x2000a950

08005700 <tcp_free_acked_segments>:
{
 8005700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8005704:	460d      	mov	r5, r1
 8005706:	b139      	cbz	r1, 8005718 <tcp_free_acked_segments+0x18>
 8005708:	4606      	mov	r6, r0
 800570a:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800570c:	4f2c      	ldr	r7, [pc, #176]	; (80057c0 <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800570e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80057c8 <tcp_free_acked_segments+0xc8>
 8005712:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80057d4 <tcp_free_acked_segments+0xd4>
 8005716:	e01b      	b.n	8005750 <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8005718:	468b      	mov	fp, r1
 800571a:	e00a      	b.n	8005732 <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800571c:	4653      	mov	r3, sl
 800571e:	f240 4257 	movw	r2, #1111	; 0x457
 8005722:	4649      	mov	r1, r9
 8005724:	4827      	ldr	r0, [pc, #156]	; (80057c4 <tcp_free_acked_segments+0xc4>)
 8005726:	f004 fcb3 	bl	800a090 <iprintf>
 800572a:	e030      	b.n	800578e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800572c:	f1b8 0f00 	cmp.w	r8, #0
 8005730:	d002      	beq.n	8005738 <tcp_free_acked_segments+0x38>
}
 8005732:	4658      	mov	r0, fp
 8005734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <tcp_free_acked_segments+0xc8>)
 800573a:	f240 4261 	movw	r2, #1121	; 0x461
 800573e:	4923      	ldr	r1, [pc, #140]	; (80057cc <tcp_free_acked_segments+0xcc>)
 8005740:	4820      	ldr	r0, [pc, #128]	; (80057c4 <tcp_free_acked_segments+0xc4>)
 8005742:	f004 fca5 	bl	800a090 <iprintf>
 8005746:	e7f4      	b.n	8005732 <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8005748:	f1bb 0f00 	cmp.w	fp, #0
 800574c:	d0f1      	beq.n	8005732 <tcp_free_acked_segments+0x32>
 800574e:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005750:	68eb      	ldr	r3, [r5, #12]
 8005752:	6858      	ldr	r0, [r3, #4]
 8005754:	f7fd fd42 	bl	80031dc <lwip_htonl>
 8005758:	4604      	mov	r4, r0
 800575a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800575e:	68eb      	ldr	r3, [r5, #12]
 8005760:	8998      	ldrh	r0, [r3, #12]
 8005762:	f7fd fd36 	bl	80031d2 <lwip_htons>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	1ae4      	subs	r4, r4, r3
 800576a:	445c      	add	r4, fp
 800576c:	f010 0003 	ands.w	r0, r0, #3
 8005770:	bf18      	it	ne
 8005772:	2001      	movne	r0, #1
 8005774:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8005776:	2c00      	cmp	r4, #0
 8005778:	dc1f      	bgt.n	80057ba <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 800577a:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 800577e:	6868      	ldr	r0, [r5, #4]
 8005780:	f7fe fc4e 	bl	8004020 <pbuf_clen>
 8005784:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005786:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800578a:	4283      	cmp	r3, r0
 800578c:	d3c6      	bcc.n	800571c <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800578e:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 8005792:	1b04      	subs	r4, r0, r4
 8005794:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005798:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <tcp_free_acked_segments+0xd0>)
 800579a:	892b      	ldrh	r3, [r5, #8]
 800579c:	8811      	ldrh	r1, [r2, #0]
 800579e:	440b      	add	r3, r1
 80057a0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fe ff88 	bl	80046b8 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80057a8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0cb      	beq.n	8005748 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80057b0:	f1bb 0f00 	cmp.w	fp, #0
 80057b4:	d0ba      	beq.n	800572c <tcp_free_acked_segments+0x2c>
 80057b6:	465d      	mov	r5, fp
 80057b8:	e7ca      	b.n	8005750 <tcp_free_acked_segments+0x50>
 80057ba:	46ab      	mov	fp, r5
  return seg_list;
 80057bc:	e7b9      	b.n	8005732 <tcp_free_acked_segments+0x32>
 80057be:	bf00      	nop
 80057c0:	2000a96c 	.word	0x2000a96c
 80057c4:	0800b1cc 	.word	0x0800b1cc
 80057c8:	0800c040 	.word	0x0800c040
 80057cc:	0800c0e0 	.word	0x0800c0e0
 80057d0:	2000a984 	.word	0x2000a984
 80057d4:	0800c0b8 	.word	0x0800c0b8

080057d8 <tcp_oos_insert_segment>:
{
 80057d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057dc:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80057de:	4605      	mov	r5, r0
 80057e0:	b160      	cbz	r0, 80057fc <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80057e2:	68eb      	ldr	r3, [r5, #12]
 80057e4:	8998      	ldrh	r0, [r3, #12]
 80057e6:	f7fd fcf4 	bl	80031d2 <lwip_htons>
 80057ea:	f010 0f01 	tst.w	r0, #1
 80057ee:	d10d      	bne.n	800580c <tcp_oos_insert_segment+0x34>
    while (next &&
 80057f0:	2c00      	cmp	r4, #0
 80057f2:	d035      	beq.n	8005860 <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80057f4:	4e20      	ldr	r6, [pc, #128]	; (8005878 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80057f6:	f04f 0901 	mov.w	r9, #1
 80057fa:	e014      	b.n	8005826 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <tcp_oos_insert_segment+0xa4>)
 80057fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8005802:	491f      	ldr	r1, [pc, #124]	; (8005880 <tcp_oos_insert_segment+0xa8>)
 8005804:	481f      	ldr	r0, [pc, #124]	; (8005884 <tcp_oos_insert_segment+0xac>)
 8005806:	f004 fc43 	bl	800a090 <iprintf>
 800580a:	e7ea      	b.n	80057e2 <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800580c:	4620      	mov	r0, r4
 800580e:	f7fe ff60 	bl	80046d2 <tcp_segs_free>
    next = NULL;
 8005812:	2400      	movs	r4, #0
  cseg->next = next;
 8005814:	602c      	str	r4, [r5, #0]
}
 8005816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 800581a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800581c:	4620      	mov	r0, r4
 800581e:	f7fe ff4b 	bl	80046b8 <tcp_seg_free>
    while (next &&
 8005822:	b1ef      	cbz	r7, 8005860 <tcp_oos_insert_segment+0x88>
      next = next->next;
 8005824:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005826:	f8d6 c000 	ldr.w	ip, [r6]
 800582a:	68e1      	ldr	r1, [r4, #12]
 800582c:	6848      	ldr	r0, [r1, #4]
 800582e:	892b      	ldrh	r3, [r5, #8]
 8005830:	4463      	add	r3, ip
 8005832:	1a1b      	subs	r3, r3, r0
 8005834:	8922      	ldrh	r2, [r4, #8]
 8005836:	1a9a      	subs	r2, r3, r2
    while (next &&
 8005838:	2a00      	cmp	r2, #0
 800583a:	db13      	blt.n	8005864 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800583c:	8988      	ldrh	r0, [r1, #12]
 800583e:	f7fd fcc8 	bl	80031d2 <lwip_htons>
 8005842:	f010 0f01 	tst.w	r0, #1
 8005846:	d0e8      	beq.n	800581a <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8005848:	68eb      	ldr	r3, [r5, #12]
 800584a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800584e:	4648      	mov	r0, r9
 8005850:	f7fd fcbf 	bl	80031d2 <lwip_htons>
 8005854:	68eb      	ldr	r3, [r5, #12]
 8005856:	ea48 0800 	orr.w	r8, r8, r0
 800585a:	f8a3 800c 	strh.w	r8, [r3, #12]
 800585e:	e7dc      	b.n	800581a <tcp_oos_insert_segment+0x42>
    next = NULL;
 8005860:	2400      	movs	r4, #0
 8005862:	e7d7      	b.n	8005814 <tcp_oos_insert_segment+0x3c>
    if (next &&
 8005864:	2b00      	cmp	r3, #0
 8005866:	ddd5      	ble.n	8005814 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8005868:	eba0 010c 	sub.w	r1, r0, ip
 800586c:	b289      	uxth	r1, r1
 800586e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8005870:	6868      	ldr	r0, [r5, #4]
 8005872:	f7fe fb75 	bl	8003f60 <pbuf_realloc>
 8005876:	e7cd      	b.n	8005814 <tcp_oos_insert_segment+0x3c>
 8005878:	2000a990 	.word	0x2000a990
 800587c:	0800c040 	.word	0x0800c040
 8005880:	0800c100 	.word	0x0800c100
 8005884:	0800b1cc 	.word	0x0800b1cc

08005888 <tcp_receive>:
{
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800588c:	4604      	mov	r4, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d066      	beq.n	8005960 <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005892:	7d23      	ldrb	r3, [r4, #20]
 8005894:	2b03      	cmp	r3, #3
 8005896:	d96b      	bls.n	8005970 <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 8005898:	4ba4      	ldr	r3, [pc, #656]	; (8005b2c <tcp_receive+0x2a4>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f013 0f10 	tst.w	r3, #16
 80058a0:	d03a      	beq.n	8005918 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80058a2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80058a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80058a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80058aa:	4ba1      	ldr	r3, [pc, #644]	; (8005b30 <tcp_receive+0x2a8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	1ad1      	subs	r1, r2, r3
 80058b0:	2900      	cmp	r1, #0
 80058b2:	db0a      	blt.n	80058ca <tcp_receive+0x42>
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d063      	beq.n	8005980 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80058b8:	4a9e      	ldr	r2, [pc, #632]	; (8005b34 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	4290      	cmp	r0, r2
 80058be:	d114      	bne.n	80058ea <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80058c0:	4a9d      	ldr	r2, [pc, #628]	; (8005b38 <tcp_receive+0x2b0>)
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	89d2      	ldrh	r2, [r2, #14]
 80058c6:	42aa      	cmp	r2, r5
 80058c8:	d90f      	bls.n	80058ea <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80058ca:	4a9b      	ldr	r2, [pc, #620]	; (8005b38 <tcp_receive+0x2b0>)
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	89d2      	ldrh	r2, [r2, #14]
 80058d0:	b291      	uxth	r1, r2
 80058d2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80058d6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80058da:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 80058dc:	bf38      	it	cc
 80058de:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 80058e2:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80058e4:	4b93      	ldr	r3, [pc, #588]	; (8005b34 <tcp_receive+0x2ac>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80058ea:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <tcp_receive+0x2ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80058f0:	1a5a      	subs	r2, r3, r1
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	dd4a      	ble.n	800598c <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80058f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80058f8:	1a9a      	subs	r2, r3, r2
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	f340 808a 	ble.w	8005a14 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 8005900:	4620      	mov	r0, r4
 8005902:	f002 fa4d 	bl	8007da0 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005908:	b133      	cbz	r3, 8005918 <tcp_receive+0x90>
 800590a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800590c:	4989      	ldr	r1, [pc, #548]	; (8005b34 <tcp_receive+0x2ac>)
 800590e:	6809      	ldr	r1, [r1, #0]
 8005910:	1a52      	subs	r2, r2, r1
 8005912:	2a00      	cmp	r2, #0
 8005914:	f2c0 8131 	blt.w	8005b7a <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005918:	4b88      	ldr	r3, [pc, #544]	; (8005b3c <tcp_receive+0x2b4>)
 800591a:	881a      	ldrh	r2, [r3, #0]
 800591c:	2a00      	cmp	r2, #0
 800591e:	d058      	beq.n	80059d2 <tcp_receive+0x14a>
 8005920:	7d23      	ldrb	r3, [r4, #20]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d855      	bhi.n	80059d2 <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8005926:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005928:	4b81      	ldr	r3, [pc, #516]	; (8005b30 <tcp_receive+0x2a8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	1ace      	subs	r6, r1, r3
 800592e:	2e01      	cmp	r6, #1
 8005930:	d406      	bmi.n	8005940 <tcp_receive+0xb8>
 8005932:	f1c3 0001 	rsb	r0, r3, #1
 8005936:	1a82      	subs	r2, r0, r2
 8005938:	440a      	add	r2, r1
 800593a:	2a00      	cmp	r2, #0
 800593c:	f340 813f 	ble.w	8005bbe <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8005940:	1a5a      	subs	r2, r3, r1
 8005942:	2a00      	cmp	r2, #0
 8005944:	f2c0 8185 	blt.w	8005c52 <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005948:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800594a:	f1c2 0201 	rsb	r2, r2, #1
 800594e:	441a      	add	r2, r3
 8005950:	1a52      	subs	r2, r2, r1
 8005952:	2a00      	cmp	r2, #0
 8005954:	f340 8182 	ble.w	8005c5c <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 8005958:	4620      	mov	r0, r4
 800595a:	f002 fa21 	bl	8007da0 <tcp_send_empty_ack>
 800595e:	e048      	b.n	80059f2 <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8005960:	4b77      	ldr	r3, [pc, #476]	; (8005b40 <tcp_receive+0x2b8>)
 8005962:	f240 427b 	movw	r2, #1147	; 0x47b
 8005966:	4977      	ldr	r1, [pc, #476]	; (8005b44 <tcp_receive+0x2bc>)
 8005968:	4877      	ldr	r0, [pc, #476]	; (8005b48 <tcp_receive+0x2c0>)
 800596a:	f004 fb91 	bl	800a090 <iprintf>
 800596e:	e790      	b.n	8005892 <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005970:	4b73      	ldr	r3, [pc, #460]	; (8005b40 <tcp_receive+0x2b8>)
 8005972:	f240 427c 	movw	r2, #1148	; 0x47c
 8005976:	4975      	ldr	r1, [pc, #468]	; (8005b4c <tcp_receive+0x2c4>)
 8005978:	4873      	ldr	r0, [pc, #460]	; (8005b48 <tcp_receive+0x2c0>)
 800597a:	f004 fb89 	bl	800a090 <iprintf>
 800597e:	e78b      	b.n	8005898 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005980:	4a6c      	ldr	r2, [pc, #432]	; (8005b34 <tcp_receive+0x2ac>)
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	1a82      	subs	r2, r0, r2
 8005986:	2a00      	cmp	r2, #0
 8005988:	da96      	bge.n	80058b8 <tcp_receive+0x30>
 800598a:	e79e      	b.n	80058ca <tcp_receive+0x42>
      if (tcplen == 0) {
 800598c:	4a6b      	ldr	r2, [pc, #428]	; (8005b3c <tcp_receive+0x2b4>)
 800598e:	8812      	ldrh	r2, [r2, #0]
 8005990:	b932      	cbnz	r2, 80059a0 <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005992:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8005996:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005998:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800599a:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800599c:	4282      	cmp	r2, r0
 800599e:	d003      	beq.n	80059a8 <tcp_receive+0x120>
        pcb->dupacks = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	e7ae      	b.n	8005906 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 80059a8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	dbf7      	blt.n	80059a0 <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d1f5      	bne.n	80059a0 <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80059b4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059b8:	2bff      	cmp	r3, #255	; 0xff
 80059ba:	d01c      	beq.n	80059f6 <tcp_receive+0x16e>
                ++pcb->dupacks;
 80059bc:	3301      	adds	r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d816      	bhi.n	80059f6 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d01f      	beq.n	8005a0c <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80059cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d19b      	bne.n	800590a <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80059d2:	4b57      	ldr	r3, [pc, #348]	; (8005b30 <tcp_receive+0x2a8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059d8:	1a99      	subs	r1, r3, r2
 80059da:	2900      	cmp	r1, #0
 80059dc:	db05      	blt.n	80059ea <tcp_receive+0x162>
 80059de:	3301      	adds	r3, #1
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd03      	ble.n	80059f2 <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 80059ea:	8b63      	ldrh	r3, [r4, #26]
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	8363      	strh	r3, [r4, #26]
}
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80059f6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80059fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80059fc:	4413      	add	r3, r2
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bf88      	it	hi
 8005a04:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8005a08:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f002 f943 	bl	8007c98 <tcp_rexmit_fast>
      if (!found_dupack) {
 8005a12:	e778      	b.n	8005906 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 8005a14:	8b62      	ldrh	r2, [r4, #26]
 8005a16:	f012 0f04 	tst.w	r2, #4
 8005a1a:	d009      	beq.n	8005a30 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8005a1c:	f022 0204 	bic.w	r2, r2, #4
 8005a20:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8005a22:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8005a26:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8005a30:	2000      	movs	r0, #0
 8005a32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8005a36:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8005a3a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005a3c:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8005a40:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8005a44:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8005a48:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8005a4a:	7d22      	ldrb	r2, [r4, #20]
 8005a4c:	2a03      	cmp	r2, #3
 8005a4e:	d91c      	bls.n	8005a8a <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8005a50:	1a5b      	subs	r3, r3, r1
 8005a52:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8005a54:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005a58:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8005a5c:	4291      	cmp	r1, r2
 8005a5e:	d948      	bls.n	8005af2 <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8005a60:	8b61      	ldrh	r1, [r4, #26]
 8005a62:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8005a66:	bf14      	ite	ne
 8005a68:	2001      	movne	r0, #1
 8005a6a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8005a6c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8005a6e:	fb11 f100 	smulbb	r1, r1, r0
 8005a72:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 8005a74:	4299      	cmp	r1, r3
 8005a76:	bf94      	ite	ls
 8005a78:	1850      	addls	r0, r2, r1
 8005a7a:	18d0      	addhi	r0, r2, r3
 8005a7c:	b283      	uxth	r3, r0
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf88      	it	hi
 8005a82:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8005a86:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8005a8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a8c:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <tcp_receive+0x2c8>)
 8005a8e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7ff fe35 	bl	8005700 <tcp_free_acked_segments>
 8005a96:	4603      	mov	r3, r0
 8005a98:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8005a9a:	4a2e      	ldr	r2, [pc, #184]	; (8005b54 <tcp_receive+0x2cc>)
 8005a9c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fe2e 	bl	8005700 <tcp_free_acked_segments>
 8005aa4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8005aa6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005aa8:	fab2 f382 	clz	r3, r2
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	425b      	negs	r3, r3
 8005ab0:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d035      	beq.n	8005b26 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8005aba:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8005abe:	4926      	ldr	r1, [pc, #152]	; (8005b58 <tcp_receive+0x2d0>)
 8005ac0:	8809      	ldrh	r1, [r1, #0]
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8005ac8:	8b63      	ldrh	r3, [r4, #26]
 8005aca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005ace:	f43f af1a 	beq.w	8005906 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d042      	beq.n	8005b5c <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8005ad6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005ad8:	68d3      	ldr	r3, [r2, #12]
 8005ada:	6858      	ldr	r0, [r3, #4]
 8005adc:	f7fd fb7e 	bl	80031dc <lwip_htonl>
 8005ae0:	1a2d      	subs	r5, r5, r0
 8005ae2:	2d00      	cmp	r5, #0
 8005ae4:	f73f af0f 	bgt.w	8005906 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 8005ae8:	8b63      	ldrh	r3, [r4, #26]
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aee:	8363      	strh	r3, [r4, #26]
 8005af0:	e709      	b.n	8005906 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8005af2:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8005af6:	440b      	add	r3, r1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d804      	bhi.n	8005b08 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d904      	bls.n	8005b0c <tcp_receive+0x284>
 8005b02:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8005b06:	e7c0      	b.n	8005a8a <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8005b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8005b12:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005b14:	4413      	add	r3, r2
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	bf88      	it	hi
 8005b1c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8005b20:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8005b24:	e7b1      	b.n	8005a8a <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 8005b26:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8005b2a:	e7c6      	b.n	8005aba <tcp_receive+0x232>
 8005b2c:	2000a970 	.word	0x2000a970
 8005b30:	2000a990 	.word	0x2000a990
 8005b34:	2000a96c 	.word	0x2000a96c
 8005b38:	2000a99c 	.word	0x2000a99c
 8005b3c:	2000a9aa 	.word	0x2000a9aa
 8005b40:	0800c040 	.word	0x0800c040
 8005b44:	0800c128 	.word	0x0800c128
 8005b48:	0800b1cc 	.word	0x0800b1cc
 8005b4c:	0800c144 	.word	0x0800c144
 8005b50:	0800c160 	.word	0x0800c160
 8005b54:	0800c168 	.word	0x0800c168
 8005b58:	2000a984 	.word	0x2000a984
          if ((pcb->unsent == NULL) ||
 8005b5c:	b140      	cbz	r0, 8005b70 <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8005b5e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005b60:	68c3      	ldr	r3, [r0, #12]
 8005b62:	6858      	ldr	r0, [r3, #4]
 8005b64:	f7fd fb3a 	bl	80031dc <lwip_htonl>
 8005b68:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 8005b6a:	2d00      	cmp	r5, #0
 8005b6c:	f73f aecb 	bgt.w	8005906 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 8005b70:	8b63      	ldrh	r3, [r4, #26]
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b76:	8363      	strh	r3, [r4, #26]
 8005b78:	e6c5      	b.n	8005906 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8005b7a:	4a9a      	ldr	r2, [pc, #616]	; (8005de4 <tcp_receive+0x55c>)
 8005b7c:	8816      	ldrh	r6, [r2, #0]
 8005b7e:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8005b80:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8005b84:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 8005b88:	1ab1      	subs	r1, r6, r2
 8005b8a:	1ac9      	subs	r1, r1, r3
 8005b8c:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8005b8e:	fa15 f181 	uxtah	r1, r5, r1
 8005b92:	b209      	sxth	r1, r1
 8005b94:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8005b96:	2800      	cmp	r0, #0
 8005b98:	db0d      	blt.n	8005bb6 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 8005b9a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 8005b9e:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8005ba2:	1813      	adds	r3, r2, r0
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8005ba8:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8005bac:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb4:	e6b0      	b.n	8005918 <tcp_receive+0x90>
        m = (s16_t) - m;
 8005bb6:	1b92      	subs	r2, r2, r6
 8005bb8:	4413      	add	r3, r2
 8005bba:	b218      	sxth	r0, r3
 8005bbc:	e7ed      	b.n	8005b9a <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 8005bbe:	4b8a      	ldr	r3, [pc, #552]	; (8005de8 <tcp_receive+0x560>)
 8005bc0:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	d02d      	beq.n	8005c22 <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8005bc6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005bca:	429e      	cmp	r6, r3
 8005bcc:	d831      	bhi.n	8005c32 <tcp_receive+0x3aa>
      off = (u16_t)off32;
 8005bce:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005bd0:	4b85      	ldr	r3, [pc, #532]	; (8005de8 <tcp_receive+0x560>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	891b      	ldrh	r3, [r3, #8]
 8005bd6:	42b3      	cmp	r3, r6
 8005bd8:	d333      	bcc.n	8005c42 <tcp_receive+0x3ba>
      inseg.len -= off;
 8005bda:	4b83      	ldr	r3, [pc, #524]	; (8005de8 <tcp_receive+0x560>)
 8005bdc:	891a      	ldrh	r2, [r3, #8]
 8005bde:	1b92      	subs	r2, r2, r6
 8005be0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	891a      	ldrh	r2, [r3, #8]
 8005be6:	1b92      	subs	r2, r2, r6
 8005be8:	b292      	uxth	r2, r2
      while (p->len < off) {
 8005bea:	896b      	ldrh	r3, [r5, #10]
 8005bec:	429e      	cmp	r6, r3
 8005bee:	d908      	bls.n	8005c02 <tcp_receive+0x37a>
        p->len = 0;
 8005bf0:	2100      	movs	r1, #0
        off -= p->len;
 8005bf2:	1af3      	subs	r3, r6, r3
 8005bf4:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 8005bf6:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8005bf8:	8169      	strh	r1, [r5, #10]
        p = p->next;
 8005bfa:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 8005bfc:	896b      	ldrh	r3, [r5, #10]
 8005bfe:	42b3      	cmp	r3, r6
 8005c00:	d3f7      	bcc.n	8005bf2 <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7fe f871 	bl	8003cec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8005c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0c:	4a77      	ldr	r2, [pc, #476]	; (8005dec <tcp_receive+0x564>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4a75      	ldr	r2, [pc, #468]	; (8005de8 <tcp_receive+0x560>)
 8005c12:	68d2      	ldr	r2, [r2, #12]
 8005c14:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005c16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c18:	1a5a      	subs	r2, r3, r1
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	f6bf ae94 	bge.w	8005948 <tcp_receive+0xc0>
 8005c20:	e69a      	b.n	8005958 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8005c22:	4b73      	ldr	r3, [pc, #460]	; (8005df0 <tcp_receive+0x568>)
 8005c24:	f240 5294 	movw	r2, #1428	; 0x594
 8005c28:	4972      	ldr	r1, [pc, #456]	; (8005df4 <tcp_receive+0x56c>)
 8005c2a:	4873      	ldr	r0, [pc, #460]	; (8005df8 <tcp_receive+0x570>)
 8005c2c:	f004 fa30 	bl	800a090 <iprintf>
 8005c30:	e7c9      	b.n	8005bc6 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8005c32:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <tcp_receive+0x568>)
 8005c34:	f240 5295 	movw	r2, #1429	; 0x595
 8005c38:	4970      	ldr	r1, [pc, #448]	; (8005dfc <tcp_receive+0x574>)
 8005c3a:	486f      	ldr	r0, [pc, #444]	; (8005df8 <tcp_receive+0x570>)
 8005c3c:	f004 fa28 	bl	800a090 <iprintf>
 8005c40:	e7c5      	b.n	8005bce <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8005c42:	4b6b      	ldr	r3, [pc, #428]	; (8005df0 <tcp_receive+0x568>)
 8005c44:	f240 5297 	movw	r2, #1431	; 0x597
 8005c48:	496d      	ldr	r1, [pc, #436]	; (8005e00 <tcp_receive+0x578>)
 8005c4a:	486b      	ldr	r0, [pc, #428]	; (8005df8 <tcp_receive+0x570>)
 8005c4c:	f004 fa20 	bl	800a090 <iprintf>
 8005c50:	e7c3      	b.n	8005bda <tcp_receive+0x352>
        tcp_ack_now(pcb);
 8005c52:	8b63      	ldrh	r3, [r4, #26]
 8005c54:	f043 0302 	orr.w	r3, r3, #2
 8005c58:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005c5a:	e67d      	b.n	8005958 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	d008      	beq.n	8005c72 <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 8005c60:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005c62:	2d00      	cmp	r5, #0
 8005c64:	f000 817a 	beq.w	8005f5c <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 8005c68:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8005c6a:	1e5f      	subs	r7, r3, #1
 8005c6c:	f103 0c01 	add.w	ip, r3, #1
 8005c70:	e195      	b.n	8005f9e <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 8005c72:	4b5d      	ldr	r3, [pc, #372]	; (8005de8 <tcp_receive+0x560>)
 8005c74:	891d      	ldrh	r5, [r3, #8]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	8998      	ldrh	r0, [r3, #12]
 8005c7a:	f7fd faaa 	bl	80031d2 <lwip_htons>
 8005c7e:	f010 0303 	ands.w	r3, r0, #3
 8005c82:	bf18      	it	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	442b      	add	r3, r5
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4a5e      	ldr	r2, [pc, #376]	; (8005e04 <tcp_receive+0x57c>)
 8005c8c:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8005c8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d317      	bcc.n	8005cc4 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 8005c94:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 823e 	beq.w	8006118 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005c9c:	4b52      	ldr	r3, [pc, #328]	; (8005de8 <tcp_receive+0x560>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	8998      	ldrh	r0, [r3, #12]
 8005ca2:	f7fd fa96 	bl	80031d2 <lwip_htons>
 8005ca6:	f010 0f01 	tst.w	r0, #1
 8005caa:	d053      	beq.n	8005d54 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 8005cac:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f000 8232 	beq.w	8006118 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 8005cb4:	6803      	ldr	r3, [r0, #0]
 8005cb6:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8005cb8:	f7fe fcfe 	bl	80046b8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8005cbc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1f8      	bne.n	8005cb4 <tcp_receive+0x42c>
 8005cc2:	e229      	b.n	8006118 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8005cc4:	4b48      	ldr	r3, [pc, #288]	; (8005de8 <tcp_receive+0x560>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	8998      	ldrh	r0, [r3, #12]
 8005cca:	f7fd fa82 	bl	80031d2 <lwip_htons>
 8005cce:	f010 0f01 	tst.w	r0, #1
 8005cd2:	d12f      	bne.n	8005d34 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8005cd4:	4b44      	ldr	r3, [pc, #272]	; (8005de8 <tcp_receive+0x560>)
 8005cd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005cd8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	8998      	ldrh	r0, [r3, #12]
 8005cde:	f7fd fa78 	bl	80031d2 <lwip_htons>
 8005ce2:	f010 0f02 	tst.w	r0, #2
 8005ce6:	d003      	beq.n	8005cf0 <tcp_receive+0x468>
            inseg.len -= 1;
 8005ce8:	4a3f      	ldr	r2, [pc, #252]	; (8005de8 <tcp_receive+0x560>)
 8005cea:	8913      	ldrh	r3, [r2, #8]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8005cf0:	4e3d      	ldr	r6, [pc, #244]	; (8005de8 <tcp_receive+0x560>)
 8005cf2:	8931      	ldrh	r1, [r6, #8]
 8005cf4:	6870      	ldr	r0, [r6, #4]
 8005cf6:	f7fe f933 	bl	8003f60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8005cfa:	8935      	ldrh	r5, [r6, #8]
 8005cfc:	68f3      	ldr	r3, [r6, #12]
 8005cfe:	8998      	ldrh	r0, [r3, #12]
 8005d00:	f7fd fa67 	bl	80031d2 <lwip_htons>
 8005d04:	f010 0303 	ands.w	r3, r0, #3
 8005d08:	bf18      	it	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	442b      	add	r3, r5
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <tcp_receive+0x57c>)
 8005d12:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8005d14:	4a35      	ldr	r2, [pc, #212]	; (8005dec <tcp_receive+0x564>)
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	4413      	add	r3, r2
 8005d1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005d1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d1e:	440a      	add	r2, r1
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d0b7      	beq.n	8005c94 <tcp_receive+0x40c>
 8005d24:	4b32      	ldr	r3, [pc, #200]	; (8005df0 <tcp_receive+0x568>)
 8005d26:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8005d2a:	4937      	ldr	r1, [pc, #220]	; (8005e08 <tcp_receive+0x580>)
 8005d2c:	4832      	ldr	r0, [pc, #200]	; (8005df8 <tcp_receive+0x570>)
 8005d2e:	f004 f9af 	bl	800a090 <iprintf>
 8005d32:	e7af      	b.n	8005c94 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8005d34:	4e2c      	ldr	r6, [pc, #176]	; (8005de8 <tcp_receive+0x560>)
 8005d36:	68f3      	ldr	r3, [r6, #12]
 8005d38:	899d      	ldrh	r5, [r3, #12]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fd fa49 	bl	80031d2 <lwip_htons>
 8005d40:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8005d44:	f7fd fa45 	bl	80031d2 <lwip_htons>
 8005d48:	68f3      	ldr	r3, [r6, #12]
 8005d4a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8005d4e:	4305      	orrs	r5, r0
 8005d50:	819d      	strh	r5, [r3, #12]
 8005d52:	e7bf      	b.n	8005cd4 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 8005d54:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f000 81d8 	beq.w	800610c <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8005d5c:	4f23      	ldr	r7, [pc, #140]	; (8005dec <tcp_receive+0x564>)
 8005d5e:	4e29      	ldr	r6, [pc, #164]	; (8005e04 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8005d60:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005de8 <tcp_receive+0x560>
 8005d64:	e009      	b.n	8005d7a <tcp_receive+0x4f2>
              next = next->next;
 8005d66:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f7fe fca4 	bl	80046b8 <tcp_seg_free>
            while (next &&
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	f000 81ca 	beq.w	800610c <tcp_receive+0x884>
              next = next->next;
 8005d78:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 8005d7a:	f8d7 c000 	ldr.w	ip, [r7]
 8005d7e:	68e9      	ldr	r1, [r5, #12]
 8005d80:	6848      	ldr	r0, [r1, #4]
 8005d82:	8833      	ldrh	r3, [r6, #0]
 8005d84:	4463      	add	r3, ip
 8005d86:	1a1b      	subs	r3, r3, r0
 8005d88:	892a      	ldrh	r2, [r5, #8]
 8005d8a:	1a9a      	subs	r2, r3, r2
            while (next &&
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	f2c0 81bf 	blt.w	8006110 <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8005d92:	8988      	ldrh	r0, [r1, #12]
 8005d94:	f7fd fa1d 	bl	80031d2 <lwip_htons>
 8005d98:	f010 0f01 	tst.w	r0, #1
 8005d9c:	d0e3      	beq.n	8005d66 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8005d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005da2:	8998      	ldrh	r0, [r3, #12]
 8005da4:	f7fd fa15 	bl	80031d2 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8005da8:	f010 0f02 	tst.w	r0, #2
 8005dac:	d1db      	bne.n	8005d66 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8005dae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005db2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8005db6:	2001      	movs	r0, #1
 8005db8:	f7fd fa0b 	bl	80031d2 <lwip_htons>
 8005dbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005dc0:	ea49 0900 	orr.w	r9, r9, r0
 8005dc4:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8005dc8:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8005dcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005dd0:	8998      	ldrh	r0, [r3, #12]
 8005dd2:	f7fd f9fe 	bl	80031d2 <lwip_htons>
 8005dd6:	f010 0303 	ands.w	r3, r0, #3
 8005dda:	bf18      	it	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	444b      	add	r3, r9
 8005de0:	8033      	strh	r3, [r6, #0]
 8005de2:	e7c0      	b.n	8005d66 <tcp_receive+0x4de>
 8005de4:	2000a960 	.word	0x2000a960
 8005de8:	2000a974 	.word	0x2000a974
 8005dec:	2000a990 	.word	0x2000a990
 8005df0:	0800c040 	.word	0x0800c040
 8005df4:	0800c170 	.word	0x0800c170
 8005df8:	0800b1cc 	.word	0x0800b1cc
 8005dfc:	0800c180 	.word	0x0800c180
 8005e00:	0800c190 	.word	0x0800c190
 8005e04:	2000a9aa 	.word	0x2000a9aa
 8005e08:	0800c1a0 	.word	0x0800c1a0
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8005e0c:	4b81      	ldr	r3, [pc, #516]	; (8006014 <tcp_receive+0x78c>)
 8005e0e:	eba0 000c 	sub.w	r0, r0, ip
 8005e12:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	8998      	ldrh	r0, [r3, #12]
 8005e18:	f7fd f9db 	bl	80031d2 <lwip_htons>
 8005e1c:	f010 0f02 	tst.w	r0, #2
 8005e20:	d003      	beq.n	8005e2a <tcp_receive+0x5a2>
                inseg.len -= 1;
 8005e22:	4a7c      	ldr	r2, [pc, #496]	; (8006014 <tcp_receive+0x78c>)
 8005e24:	8913      	ldrh	r3, [r2, #8]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8005e2a:	4f7a      	ldr	r7, [pc, #488]	; (8006014 <tcp_receive+0x78c>)
 8005e2c:	8939      	ldrh	r1, [r7, #8]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fe f896 	bl	8003f60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8005e34:	893e      	ldrh	r6, [r7, #8]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8998      	ldrh	r0, [r3, #12]
 8005e3a:	f7fd f9ca 	bl	80031d2 <lwip_htons>
 8005e3e:	f010 0303 	ands.w	r3, r0, #3
 8005e42:	bf18      	it	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	4433      	add	r3, r6
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	4a73      	ldr	r2, [pc, #460]	; (8006018 <tcp_receive+0x790>)
 8005e4c:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8005e4e:	4a73      	ldr	r2, [pc, #460]	; (800601c <tcp_receive+0x794>)
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	68ea      	ldr	r2, [r5, #12]
 8005e56:	6852      	ldr	r2, [r2, #4]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	f000 815c 	beq.w	8006116 <tcp_receive+0x88e>
 8005e5e:	4b70      	ldr	r3, [pc, #448]	; (8006020 <tcp_receive+0x798>)
 8005e60:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8005e64:	496f      	ldr	r1, [pc, #444]	; (8006024 <tcp_receive+0x79c>)
 8005e66:	4870      	ldr	r0, [pc, #448]	; (8006028 <tcp_receive+0x7a0>)
 8005e68:	f004 f912 	bl	800a090 <iprintf>
 8005e6c:	e153      	b.n	8006116 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8005e6e:	4b6c      	ldr	r3, [pc, #432]	; (8006020 <tcp_receive+0x798>)
 8005e70:	f240 6207 	movw	r2, #1543	; 0x607
 8005e74:	496d      	ldr	r1, [pc, #436]	; (800602c <tcp_receive+0x7a4>)
 8005e76:	486c      	ldr	r0, [pc, #432]	; (8006028 <tcp_receive+0x7a0>)
 8005e78:	f004 f90a 	bl	800a090 <iprintf>
 8005e7c:	e156      	b.n	800612c <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005e7e:	4643      	mov	r3, r8
 8005e80:	f240 622b 	movw	r2, #1579	; 0x62b
 8005e84:	4639      	mov	r1, r7
 8005e86:	4868      	ldr	r0, [pc, #416]	; (8006028 <tcp_receive+0x7a0>)
 8005e88:	f004 f902 	bl	800a090 <iprintf>
 8005e8c:	e03e      	b.n	8005f0c <tcp_receive+0x684>
              recv_data = cseg->p;
 8005e8e:	4b68      	ldr	r3, [pc, #416]	; (8006030 <tcp_receive+0x7a8>)
 8005e90:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005e96:	68eb      	ldr	r3, [r5, #12]
 8005e98:	8998      	ldrh	r0, [r3, #12]
 8005e9a:	f7fd f99a 	bl	80031d2 <lwip_htons>
 8005e9e:	f010 0f01 	tst.w	r0, #1
 8005ea2:	d009      	beq.n	8005eb8 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 8005ea4:	4a63      	ldr	r2, [pc, #396]	; (8006034 <tcp_receive+0x7ac>)
 8005ea6:	7813      	ldrb	r3, [r2, #0]
 8005ea8:	f043 0320 	orr.w	r3, r3, #32
 8005eac:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8005eae:	7d23      	ldrb	r3, [r4, #20]
 8005eb0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8005eb2:	bf04      	itt	eq
 8005eb4:	2307      	moveq	r3, #7
 8005eb6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f7fe fbfb 	bl	80046b8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8005ec2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	d03d      	beq.n	8005f44 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8005ec8:	68ea      	ldr	r2, [r5, #12]
 8005eca:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8005ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ece:	428b      	cmp	r3, r1
 8005ed0:	d138      	bne.n	8005f44 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8005ed2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8005ed4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005ed8:	8990      	ldrh	r0, [r2, #12]
 8005eda:	f7fd f97a 	bl	80031d2 <lwip_htons>
 8005ede:	f010 0003 	ands.w	r0, r0, #3
 8005ee2:	bf18      	it	ne
 8005ee4:	2001      	movne	r0, #1
 8005ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee8:	4499      	add	r9, r3
 8005eea:	4448      	add	r0, r9
 8005eec:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8005eee:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 8005ef2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8005ef6:	68eb      	ldr	r3, [r5, #12]
 8005ef8:	8998      	ldrh	r0, [r3, #12]
 8005efa:	f7fd f96a 	bl	80031d2 <lwip_htons>
 8005efe:	f010 0003 	ands.w	r0, r0, #3
 8005f02:	bf18      	it	ne
 8005f04:	2001      	movne	r0, #1
 8005f06:	4450      	add	r0, sl
 8005f08:	4581      	cmp	r9, r0
 8005f0a:	d3b8      	bcc.n	8005e7e <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8005f0c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8005f10:	68eb      	ldr	r3, [r5, #12]
 8005f12:	8998      	ldrh	r0, [r3, #12]
 8005f14:	f7fd f95d 	bl	80031d2 <lwip_htons>
 8005f18:	f010 0003 	ands.w	r0, r0, #3
 8005f1c:	bf18      	it	ne
 8005f1e:	2001      	movne	r0, #1
 8005f20:	4448      	add	r0, r9
 8005f22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f24:	1a18      	subs	r0, r3, r0
 8005f26:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7fe fb4f 	bl	80045cc <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8005f2e:	6869      	ldr	r1, [r5, #4]
 8005f30:	890b      	ldrh	r3, [r1, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0af      	beq.n	8005e96 <tcp_receive+0x60e>
            if (recv_data) {
 8005f36:	4b3e      	ldr	r3, [pc, #248]	; (8006030 <tcp_receive+0x7a8>)
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0a7      	beq.n	8005e8e <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 8005f3e:	f7fe f893 	bl	8004068 <pbuf_cat>
 8005f42:	e7a6      	b.n	8005e92 <tcp_receive+0x60a>
        tcp_ack(pcb);
 8005f44:	8b63      	ldrh	r3, [r4, #26]
 8005f46:	f013 0f01 	tst.w	r3, #1
 8005f4a:	bf1a      	itte	ne
 8005f4c:	f023 0301 	bicne.w	r3, r3, #1
 8005f50:	f043 0302 	orrne.w	r3, r3, #2
 8005f54:	f043 0301 	orreq.w	r3, r3, #1
 8005f58:	8363      	strh	r3, [r4, #26]
 8005f5a:	e54a      	b.n	80059f2 <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8005f5c:	482d      	ldr	r0, [pc, #180]	; (8006014 <tcp_receive+0x78c>)
 8005f5e:	f7fe fbd5 	bl	800470c <tcp_seg_copy>
 8005f62:	6760      	str	r0, [r4, #116]	; 0x74
 8005f64:	e051      	b.n	800600a <tcp_receive+0x782>
              if (inseg.len > next->len) {
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <tcp_receive+0x78c>)
 8005f68:	891a      	ldrh	r2, [r3, #8]
 8005f6a:	892b      	ldrh	r3, [r5, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d94c      	bls.n	800600a <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8005f70:	4828      	ldr	r0, [pc, #160]	; (8006014 <tcp_receive+0x78c>)
 8005f72:	f7fe fbcb 	bl	800470c <tcp_seg_copy>
                if (cseg != NULL) {
 8005f76:	4603      	mov	r3, r0
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d046      	beq.n	800600a <tcp_receive+0x782>
                  if (prev != NULL) {
 8005f7c:	b12e      	cbz	r6, 8005f8a <tcp_receive+0x702>
                    prev->next = cseg;
 8005f7e:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8005f80:	4629      	mov	r1, r5
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fc28 	bl	80057d8 <tcp_oos_insert_segment>
 8005f88:	e03f      	b.n	800600a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8005f8a:	6760      	str	r0, [r4, #116]	; 0x74
 8005f8c:	e7f8      	b.n	8005f80 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8005f8e:	1a99      	subs	r1, r3, r2
 8005f90:	2900      	cmp	r1, #0
 8005f92:	db27      	blt.n	8005fe4 <tcp_receive+0x75c>
              if (next->next == NULL &&
 8005f94:	6829      	ldr	r1, [r5, #0]
 8005f96:	462e      	mov	r6, r5
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d033      	beq.n	8006004 <tcp_receive+0x77c>
 8005f9c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 8005f9e:	68e8      	ldr	r0, [r5, #12]
 8005fa0:	6842      	ldr	r2, [r0, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d0df      	beq.n	8005f66 <tcp_receive+0x6de>
              if (prev == NULL) {
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	d0f1      	beq.n	8005f8e <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8005faa:	68f1      	ldr	r1, [r6, #12]
 8005fac:	6849      	ldr	r1, [r1, #4]
 8005fae:	1a79      	subs	r1, r7, r1
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	dbef      	blt.n	8005f94 <tcp_receive+0x70c>
 8005fb4:	ebac 0102 	sub.w	r1, ip, r2
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	dceb      	bgt.n	8005f94 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8005fbc:	4815      	ldr	r0, [pc, #84]	; (8006014 <tcp_receive+0x78c>)
 8005fbe:	f7fe fba5 	bl	800470c <tcp_seg_copy>
                  if (cseg != NULL) {
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	b308      	cbz	r0, 800600a <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8005fc6:	68f3      	ldr	r3, [r6, #12]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <tcp_receive+0x794>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	8933      	ldrh	r3, [r6, #8]
 8005fd0:	440b      	add	r3, r1
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc0e      	bgt.n	8005ff6 <tcp_receive+0x76e>
                    prev->next = cseg;
 8005fd8:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f7ff fbfb 	bl	80057d8 <tcp_oos_insert_segment>
 8005fe2:	e012      	b.n	800600a <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8005fe4:	480b      	ldr	r0, [pc, #44]	; (8006014 <tcp_receive+0x78c>)
 8005fe6:	f7fe fb91 	bl	800470c <tcp_seg_copy>
                  if (cseg != NULL) {
 8005fea:	b170      	cbz	r0, 800600a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8005fec:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7ff fbf2 	bl	80057d8 <tcp_oos_insert_segment>
 8005ff4:	e009      	b.n	800600a <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8005ff6:	1a52      	subs	r2, r2, r1
 8005ff8:	b291      	uxth	r1, r2
 8005ffa:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8005ffc:	6870      	ldr	r0, [r6, #4]
 8005ffe:	f7fd ffaf 	bl	8003f60 <pbuf_realloc>
 8006002:	e7e9      	b.n	8005fd8 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8006004:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8006006:	2b00      	cmp	r3, #0
 8006008:	dc16      	bgt.n	8006038 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 800600a:	4620      	mov	r0, r4
 800600c:	f001 fec8 	bl	8007da0 <tcp_send_empty_ack>
 8006010:	e4ef      	b.n	80059f2 <tcp_receive+0x16a>
 8006012:	bf00      	nop
 8006014:	2000a974 	.word	0x2000a974
 8006018:	2000a9aa 	.word	0x2000a9aa
 800601c:	2000a990 	.word	0x2000a990
 8006020:	0800c040 	.word	0x0800c040
 8006024:	0800c1d8 	.word	0x0800c1d8
 8006028:	0800b1cc 	.word	0x0800b1cc
 800602c:	0800c214 	.word	0x0800c214
 8006030:	2000a988 	.word	0x2000a988
 8006034:	2000a98c 	.word	0x2000a98c
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006038:	8980      	ldrh	r0, [r0, #12]
 800603a:	f7fd f8ca 	bl	80031d2 <lwip_htons>
 800603e:	f010 0f01 	tst.w	r0, #1
 8006042:	d1e2      	bne.n	800600a <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 8006044:	484d      	ldr	r0, [pc, #308]	; (800617c <tcp_receive+0x8f4>)
 8006046:	f7fe fb61 	bl	800470c <tcp_seg_copy>
 800604a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800604c:	2800      	cmp	r0, #0
 800604e:	d0dc      	beq.n	800600a <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8006050:	68eb      	ldr	r3, [r5, #12]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <tcp_receive+0x8f8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	892a      	ldrh	r2, [r5, #8]
 800605a:	440a      	add	r2, r1
 800605c:	1ad2      	subs	r2, r2, r3
 800605e:	2a00      	cmp	r2, #0
 8006060:	dc3c      	bgt.n	80060dc <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8006062:	4b48      	ldr	r3, [pc, #288]	; (8006184 <tcp_receive+0x8fc>)
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	4a46      	ldr	r2, [pc, #280]	; (8006180 <tcp_receive+0x8f8>)
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	4413      	add	r3, r2
 800606c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	ddc8      	ble.n	800600a <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	8998      	ldrh	r0, [r3, #12]
 800607e:	f7fd f8a8 	bl	80031d2 <lwip_htons>
 8006082:	f010 0f01 	tst.w	r0, #1
 8006086:	d130      	bne.n	80060ea <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8006088:	682a      	ldr	r2, [r5, #0]
 800608a:	4e3d      	ldr	r6, [pc, #244]	; (8006180 <tcp_receive+0x8f8>)
 800608c:	6831      	ldr	r1, [r6, #0]
 800608e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006090:	1a5b      	subs	r3, r3, r1
 8006092:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006094:	440b      	add	r3, r1
 8006096:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	8919      	ldrh	r1, [r3, #8]
 800609c:	6858      	ldr	r0, [r3, #4]
 800609e:	f7fd ff5f 	bl	8003f60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	891d      	ldrh	r5, [r3, #8]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	8998      	ldrh	r0, [r3, #12]
 80060aa:	f7fd f892 	bl	80031d2 <lwip_htons>
 80060ae:	f010 0303 	ands.w	r3, r0, #3
 80060b2:	bf18      	it	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	442b      	add	r3, r5
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4a32      	ldr	r2, [pc, #200]	; (8006184 <tcp_receive+0x8fc>)
 80060bc:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80060be:	6832      	ldr	r2, [r6, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80060c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060c6:	440a      	add	r2, r1
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d09e      	beq.n	800600a <tcp_receive+0x782>
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <tcp_receive+0x900>)
 80060ce:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80060d2:	492e      	ldr	r1, [pc, #184]	; (800618c <tcp_receive+0x904>)
 80060d4:	482e      	ldr	r0, [pc, #184]	; (8006190 <tcp_receive+0x908>)
 80060d6:	f003 ffdb 	bl	800a090 <iprintf>
 80060da:	e796      	b.n	800600a <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80060dc:	1a5b      	subs	r3, r3, r1
 80060de:	b299      	uxth	r1, r3
 80060e0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80060e2:	6868      	ldr	r0, [r5, #4]
 80060e4:	f7fd ff3c 	bl	8003f60 <pbuf_realloc>
 80060e8:	e7bb      	b.n	8006062 <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	899e      	ldrh	r6, [r3, #12]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fd f86e 	bl	80031d2 <lwip_htons>
 80060f6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80060fa:	f7fd f86a 	bl	80031d2 <lwip_htons>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8006106:	4306      	orrs	r6, r0
 8006108:	819e      	strh	r6, [r3, #12]
 800610a:	e7bd      	b.n	8006088 <tcp_receive+0x800>
              next = next->next;
 800610c:	2500      	movs	r5, #0
 800610e:	e002      	b.n	8006116 <tcp_receive+0x88e>
            if (next &&
 8006110:	2b00      	cmp	r3, #0
 8006112:	f73f ae7b 	bgt.w	8005e0c <tcp_receive+0x584>
            pcb->ooseq = next;
 8006116:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 8006118:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <tcp_receive+0x8fc>)
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <tcp_receive+0x8f8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4413      	add	r3, r2
 8006122:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8006124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006126:	4293      	cmp	r3, r2
 8006128:	f4ff aea1 	bcc.w	8005e6e <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800612c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <tcp_receive+0x8fc>)
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8006136:	4620      	mov	r0, r4
 8006138:	f7fe fa48 	bl	80045cc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800613c:	4b0f      	ldr	r3, [pc, #60]	; (800617c <tcp_receive+0x8f4>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	891a      	ldrh	r2, [r3, #8]
 8006142:	b122      	cbz	r2, 800614e <tcp_receive+0x8c6>
          recv_data = inseg.p;
 8006144:	4a13      	ldr	r2, [pc, #76]	; (8006194 <tcp_receive+0x90c>)
 8006146:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <tcp_receive+0x8f4>)
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <tcp_receive+0x8f4>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	8998      	ldrh	r0, [r3, #12]
 8006154:	f7fd f83d 	bl	80031d2 <lwip_htons>
 8006158:	f010 0f01 	tst.w	r0, #1
 800615c:	d004      	beq.n	8006168 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800615e:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <tcp_receive+0x910>)
 8006160:	7813      	ldrb	r3, [r2, #0]
 8006162:	f043 0320 	orr.w	r3, r3, #32
 8006166:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8006168:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800616a:	2d00      	cmp	r5, #0
 800616c:	f43f aeea 	beq.w	8005f44 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8006170:	4e03      	ldr	r6, [pc, #12]	; (8006180 <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8006172:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8006188 <tcp_receive+0x900>
 8006176:	4f09      	ldr	r7, [pc, #36]	; (800619c <tcp_receive+0x914>)
 8006178:	e6a6      	b.n	8005ec8 <tcp_receive+0x640>
 800617a:	bf00      	nop
 800617c:	2000a974 	.word	0x2000a974
 8006180:	2000a990 	.word	0x2000a990
 8006184:	2000a9aa 	.word	0x2000a9aa
 8006188:	0800c040 	.word	0x0800c040
 800618c:	0800c1a0 	.word	0x0800c1a0
 8006190:	0800b1cc 	.word	0x0800b1cc
 8006194:	2000a988 	.word	0x2000a988
 8006198:	2000a98c 	.word	0x2000a98c
 800619c:	0800c234 	.word	0x0800c234

080061a0 <tcp_input>:
{
 80061a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80061a6:	4605      	mov	r5, r0
 80061a8:	b158      	cbz	r0, 80061c2 <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 80061aa:	686a      	ldr	r2, [r5, #4]
 80061ac:	4b77      	ldr	r3, [pc, #476]	; (800638c <tcp_input+0x1ec>)
 80061ae:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 80061b0:	896b      	ldrh	r3, [r5, #10]
 80061b2:	2b13      	cmp	r3, #19
 80061b4:	d80c      	bhi.n	80061d0 <tcp_input+0x30>
  pbuf_free(p);
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fd fdd8 	bl	8003d6c <pbuf_free>
}
 80061bc:	b005      	add	sp, #20
 80061be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80061c2:	4b73      	ldr	r3, [pc, #460]	; (8006390 <tcp_input+0x1f0>)
 80061c4:	2283      	movs	r2, #131	; 0x83
 80061c6:	4973      	ldr	r1, [pc, #460]	; (8006394 <tcp_input+0x1f4>)
 80061c8:	4873      	ldr	r0, [pc, #460]	; (8006398 <tcp_input+0x1f8>)
 80061ca:	f003 ff61 	bl	800a090 <iprintf>
 80061ce:	e7ec      	b.n	80061aa <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80061d0:	4b72      	ldr	r3, [pc, #456]	; (800639c <tcp_input+0x1fc>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	6958      	ldr	r0, [r3, #20]
 80061d6:	f003 f9a8 	bl	800952a <ip4_addr_isbroadcast_u32>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d1eb      	bne.n	80061b6 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80061de:	4b6f      	ldr	r3, [pc, #444]	; (800639c <tcp_input+0x1fc>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80061e6:	2be0      	cmp	r3, #224	; 0xe0
 80061e8:	d0e5      	beq.n	80061b6 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80061ea:	4b68      	ldr	r3, [pc, #416]	; (800638c <tcp_input+0x1ec>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	8998      	ldrh	r0, [r3, #12]
 80061f0:	f7fc ffef 	bl	80031d2 <lwip_htons>
 80061f4:	0a81      	lsrs	r1, r0, #10
 80061f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80061fa:	2913      	cmp	r1, #19
 80061fc:	d9db      	bls.n	80061b6 <tcp_input+0x16>
 80061fe:	b28b      	uxth	r3, r1
 8006200:	892a      	ldrh	r2, [r5, #8]
 8006202:	429a      	cmp	r2, r3
 8006204:	d3d7      	bcc.n	80061b6 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006206:	f1a3 0214 	sub.w	r2, r3, #20
 800620a:	b292      	uxth	r2, r2
 800620c:	4864      	ldr	r0, [pc, #400]	; (80063a0 <tcp_input+0x200>)
 800620e:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 8006210:	4864      	ldr	r0, [pc, #400]	; (80063a4 <tcp_input+0x204>)
 8006212:	2400      	movs	r4, #0
 8006214:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 8006216:	8968      	ldrh	r0, [r5, #10]
 8006218:	4298      	cmp	r0, r3
 800621a:	d22e      	bcs.n	800627a <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d068      	beq.n	80062f4 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 8006222:	2114      	movs	r1, #20
 8006224:	4628      	mov	r0, r5
 8006226:	f7fd fd61 	bl	8003cec <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800622a:	896c      	ldrh	r4, [r5, #10]
 800622c:	4b5e      	ldr	r3, [pc, #376]	; (80063a8 <tcp_input+0x208>)
 800622e:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006230:	4b5b      	ldr	r3, [pc, #364]	; (80063a0 <tcp_input+0x200>)
 8006232:	881f      	ldrh	r7, [r3, #0]
 8006234:	1b3e      	subs	r6, r7, r4
 8006236:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 8006238:	4621      	mov	r1, r4
 800623a:	4628      	mov	r0, r5
 800623c:	f7fd fd56 	bl	8003cec <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8006240:	6828      	ldr	r0, [r5, #0]
 8006242:	8943      	ldrh	r3, [r0, #10]
 8006244:	42b3      	cmp	r3, r6
 8006246:	d3b6      	bcc.n	80061b6 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006248:	6842      	ldr	r2, [r0, #4]
 800624a:	4b56      	ldr	r3, [pc, #344]	; (80063a4 <tcp_input+0x204>)
 800624c:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800624e:	4631      	mov	r1, r6
 8006250:	f7fd fd4c 	bl	8003cec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006254:	892b      	ldrh	r3, [r5, #8]
 8006256:	441c      	add	r4, r3
 8006258:	1be4      	subs	r4, r4, r7
 800625a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800625c:	896b      	ldrh	r3, [r5, #10]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d14f      	bne.n	8006302 <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	892a      	ldrh	r2, [r5, #8]
 8006266:	891b      	ldrh	r3, [r3, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	d00b      	beq.n	8006284 <tcp_input+0xe4>
 800626c:	4b48      	ldr	r3, [pc, #288]	; (8006390 <tcp_input+0x1f0>)
 800626e:	22e0      	movs	r2, #224	; 0xe0
 8006270:	494e      	ldr	r1, [pc, #312]	; (80063ac <tcp_input+0x20c>)
 8006272:	4849      	ldr	r0, [pc, #292]	; (8006398 <tcp_input+0x1f8>)
 8006274:	f003 ff0c 	bl	800a090 <iprintf>
 8006278:	e004      	b.n	8006284 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800627a:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <tcp_input+0x208>)
 800627c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800627e:	4628      	mov	r0, r5
 8006280:	f7fd fd34 	bl	8003cec <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006284:	4c41      	ldr	r4, [pc, #260]	; (800638c <tcp_input+0x1ec>)
 8006286:	6826      	ldr	r6, [r4, #0]
 8006288:	8830      	ldrh	r0, [r6, #0]
 800628a:	f7fc ffa2 	bl	80031d2 <lwip_htons>
 800628e:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006290:	6826      	ldr	r6, [r4, #0]
 8006292:	8870      	ldrh	r0, [r6, #2]
 8006294:	f7fc ff9d 	bl	80031d2 <lwip_htons>
 8006298:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800629a:	6826      	ldr	r6, [r4, #0]
 800629c:	6870      	ldr	r0, [r6, #4]
 800629e:	f7fc ff9d 	bl	80031dc <lwip_htonl>
 80062a2:	6070      	str	r0, [r6, #4]
 80062a4:	4b42      	ldr	r3, [pc, #264]	; (80063b0 <tcp_input+0x210>)
 80062a6:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80062a8:	6826      	ldr	r6, [r4, #0]
 80062aa:	68b0      	ldr	r0, [r6, #8]
 80062ac:	f7fc ff96 	bl	80031dc <lwip_htonl>
 80062b0:	60b0      	str	r0, [r6, #8]
 80062b2:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <tcp_input+0x214>)
 80062b4:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80062b6:	6826      	ldr	r6, [r4, #0]
 80062b8:	89f0      	ldrh	r0, [r6, #14]
 80062ba:	f7fc ff8a 	bl	80031d2 <lwip_htons>
 80062be:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	8998      	ldrh	r0, [r3, #12]
 80062c4:	f7fc ff85 	bl	80031d2 <lwip_htons>
 80062c8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80062cc:	4b3a      	ldr	r3, [pc, #232]	; (80063b8 <tcp_input+0x218>)
 80062ce:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80062d0:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80062d2:	f010 0f03 	tst.w	r0, #3
 80062d6:	d11b      	bne.n	8006310 <tcp_input+0x170>
  tcplen = p->tot_len;
 80062d8:	4b38      	ldr	r3, [pc, #224]	; (80063bc <tcp_input+0x21c>)
 80062da:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80062dc:	4b38      	ldr	r3, [pc, #224]	; (80063c0 <tcp_input+0x220>)
 80062de:	681c      	ldr	r4, [r3, #0]
 80062e0:	2c00      	cmp	r4, #0
 80062e2:	f000 8563 	beq.w	8006dac <tcp_input+0xc0c>
  prev = NULL;
 80062e6:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80062e8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006390 <tcp_input+0x1f0>
 80062ec:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80063d4 <tcp_input+0x234>
 80062f0:	4f29      	ldr	r7, [pc, #164]	; (8006398 <tcp_input+0x1f8>)
 80062f2:	e035      	b.n	8006360 <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <tcp_input+0x1f0>)
 80062f6:	22c2      	movs	r2, #194	; 0xc2
 80062f8:	4932      	ldr	r1, [pc, #200]	; (80063c4 <tcp_input+0x224>)
 80062fa:	4827      	ldr	r0, [pc, #156]	; (8006398 <tcp_input+0x1f8>)
 80062fc:	f003 fec8 	bl	800a090 <iprintf>
 8006300:	e78f      	b.n	8006222 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <tcp_input+0x1f0>)
 8006304:	22df      	movs	r2, #223	; 0xdf
 8006306:	4930      	ldr	r1, [pc, #192]	; (80063c8 <tcp_input+0x228>)
 8006308:	4823      	ldr	r0, [pc, #140]	; (8006398 <tcp_input+0x1f8>)
 800630a:	f003 fec1 	bl	800a090 <iprintf>
 800630e:	e7a8      	b.n	8006262 <tcp_input+0xc2>
    tcplen++;
 8006310:	1c53      	adds	r3, r2, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	4929      	ldr	r1, [pc, #164]	; (80063bc <tcp_input+0x21c>)
 8006316:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8006318:	429a      	cmp	r2, r3
 800631a:	d9df      	bls.n	80062dc <tcp_input+0x13c>
 800631c:	e74b      	b.n	80061b6 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800631e:	4643      	mov	r3, r8
 8006320:	22fb      	movs	r2, #251	; 0xfb
 8006322:	4649      	mov	r1, r9
 8006324:	4638      	mov	r0, r7
 8006326:	f003 feb3 	bl	800a090 <iprintf>
 800632a:	e01c      	b.n	8006366 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800632c:	4643      	mov	r3, r8
 800632e:	22fc      	movs	r2, #252	; 0xfc
 8006330:	4926      	ldr	r1, [pc, #152]	; (80063cc <tcp_input+0x22c>)
 8006332:	4638      	mov	r0, r7
 8006334:	f003 feac 	bl	800a090 <iprintf>
 8006338:	e018      	b.n	800636c <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800633a:	4643      	mov	r3, r8
 800633c:	22fd      	movs	r2, #253	; 0xfd
 800633e:	4924      	ldr	r1, [pc, #144]	; (80063d0 <tcp_input+0x230>)
 8006340:	4638      	mov	r0, r7
 8006342:	f003 fea5 	bl	800a090 <iprintf>
 8006346:	e014      	b.n	8006372 <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 8006348:	4b10      	ldr	r3, [pc, #64]	; (800638c <tcp_input+0x1ec>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	8b21      	ldrh	r1, [r4, #24]
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	4291      	cmp	r1, r2
 8006352:	d041      	beq.n	80063d8 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006354:	68e3      	ldr	r3, [r4, #12]
 8006356:	4626      	mov	r6, r4
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8527 	beq.w	8006dac <tcp_input+0xc0c>
 800635e:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006360:	7d23      	ldrb	r3, [r4, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0db      	beq.n	800631e <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006366:	7d23      	ldrb	r3, [r4, #20]
 8006368:	2b0a      	cmp	r3, #10
 800636a:	d0df      	beq.n	800632c <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800636c:	7d23      	ldrb	r3, [r4, #20]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d0e3      	beq.n	800633a <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006372:	7a22      	ldrb	r2, [r4, #8]
 8006374:	2a00      	cmp	r2, #0
 8006376:	d0e7      	beq.n	8006348 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <tcp_input+0x1fc>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006380:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006382:	b2db      	uxtb	r3, r3
 8006384:	429a      	cmp	r2, r3
 8006386:	d0df      	beq.n	8006348 <tcp_input+0x1a8>
 8006388:	e7e4      	b.n	8006354 <tcp_input+0x1b4>
 800638a:	bf00      	nop
 800638c:	2000a99c 	.word	0x2000a99c
 8006390:	0800c040 	.word	0x0800c040
 8006394:	0800c25c 	.word	0x0800c25c
 8006398:	0800b1cc 	.word	0x0800b1cc
 800639c:	20005220 	.word	0x20005220
 80063a0:	2000a9a8 	.word	0x2000a9a8
 80063a4:	2000a9a4 	.word	0x2000a9a4
 80063a8:	2000a9a0 	.word	0x2000a9a0
 80063ac:	0800c290 	.word	0x0800c290
 80063b0:	2000a990 	.word	0x2000a990
 80063b4:	2000a96c 	.word	0x2000a96c
 80063b8:	2000a970 	.word	0x2000a970
 80063bc:	2000a9aa 	.word	0x2000a9aa
 80063c0:	2000a950 	.word	0x2000a950
 80063c4:	0800c274 	.word	0x0800c274
 80063c8:	0800c284 	.word	0x0800c284
 80063cc:	0800c2d8 	.word	0x0800c2d8
 80063d0:	0800c304 	.word	0x0800c304
 80063d4:	0800c2b0 	.word	0x0800c2b0
    if (pcb->remote_port == tcphdr->src &&
 80063d8:	8ae2      	ldrh	r2, [r4, #22]
 80063da:	885b      	ldrh	r3, [r3, #2]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1b9      	bne.n	8006354 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	4b8f      	ldr	r3, [pc, #572]	; (8006620 <tcp_input+0x480>)
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d1b4      	bne.n	8006354 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	4b8c      	ldr	r3, [pc, #560]	; (8006620 <tcp_input+0x480>)
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d1af      	bne.n	8006354 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80063f4:	68e3      	ldr	r3, [r4, #12]
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	d04d      	beq.n	8006496 <tcp_input+0x2f6>
      if (prev != NULL) {
 80063fa:	b146      	cbz	r6, 800640e <tcp_input+0x26e>
        prev->next = pcb->next;
 80063fc:	68e3      	ldr	r3, [r4, #12]
 80063fe:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8006400:	4b88      	ldr	r3, [pc, #544]	; (8006624 <tcp_input+0x484>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 8006406:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006408:	68e3      	ldr	r3, [r4, #12]
 800640a:	42a3      	cmp	r3, r4
 800640c:	d04d      	beq.n	80064aa <tcp_input+0x30a>
    inseg.next = NULL;
 800640e:	4a86      	ldr	r2, [pc, #536]	; (8006628 <tcp_input+0x488>)
 8006410:	2300      	movs	r3, #0
 8006412:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8006414:	8929      	ldrh	r1, [r5, #8]
 8006416:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8006418:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800641a:	4984      	ldr	r1, [pc, #528]	; (800662c <tcp_input+0x48c>)
 800641c:	6809      	ldr	r1, [r1, #0]
 800641e:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 8006420:	4a83      	ldr	r2, [pc, #524]	; (8006630 <tcp_input+0x490>)
 8006422:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8006424:	4a83      	ldr	r2, [pc, #524]	; (8006634 <tcp_input+0x494>)
 8006426:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8006428:	4a83      	ldr	r2, [pc, #524]	; (8006638 <tcp_input+0x498>)
 800642a:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800642c:	4b83      	ldr	r3, [pc, #524]	; (800663c <tcp_input+0x49c>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f013 0f08 	tst.w	r3, #8
 8006434:	f040 817c 	bne.w	8006730 <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 8006438:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800643a:	b16b      	cbz	r3, 8006458 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800643c:	4620      	mov	r0, r4
 800643e:	f7fe fdbb 	bl	8004fb8 <tcp_process_refused_data>
 8006442:	f110 0f0d 	cmn.w	r0, #13
 8006446:	f000 8178 	beq.w	800673a <tcp_input+0x59a>
 800644a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800644c:	b123      	cbz	r3, 8006458 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800644e:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <tcp_input+0x4a0>)
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8171 	bne.w	800673a <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 8006458:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <tcp_input+0x4a4>)
 800645a:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800645c:	4b77      	ldr	r3, [pc, #476]	; (800663c <tcp_input+0x49c>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f013 0f04 	tst.w	r3, #4
 8006464:	f000 81aa 	beq.w	80067bc <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 8006468:	7d21      	ldrb	r1, [r4, #20]
 800646a:	2902      	cmp	r1, #2
 800646c:	f000 816b 	beq.w	8006746 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 8006470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006472:	4b75      	ldr	r3, [pc, #468]	; (8006648 <tcp_input+0x4a8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	f000 818e 	beq.w	8006798 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	f100 8167 	bmi.w	8006750 <tcp_input+0x5b0>
 8006482:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	f300 8162 	bgt.w	8006750 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800648c:	8b63      	ldrh	r3, [r4, #26]
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 8006494:	e15c      	b.n	8006750 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006496:	4b6d      	ldr	r3, [pc, #436]	; (800664c <tcp_input+0x4ac>)
 8006498:	f240 120d 	movw	r2, #269	; 0x10d
 800649c:	496c      	ldr	r1, [pc, #432]	; (8006650 <tcp_input+0x4b0>)
 800649e:	486d      	ldr	r0, [pc, #436]	; (8006654 <tcp_input+0x4b4>)
 80064a0:	f003 fdf6 	bl	800a090 <iprintf>
      if (prev != NULL) {
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	d1a9      	bne.n	80063fc <tcp_input+0x25c>
 80064a8:	e7ae      	b.n	8006408 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80064aa:	4b68      	ldr	r3, [pc, #416]	; (800664c <tcp_input+0x4ac>)
 80064ac:	f240 1215 	movw	r2, #277	; 0x115
 80064b0:	4969      	ldr	r1, [pc, #420]	; (8006658 <tcp_input+0x4b8>)
 80064b2:	4868      	ldr	r0, [pc, #416]	; (8006654 <tcp_input+0x4b4>)
 80064b4:	f003 fdec 	bl	800a090 <iprintf>
 80064b8:	e7a9      	b.n	800640e <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064ba:	4643      	mov	r3, r8
 80064bc:	f240 121f 	movw	r2, #287	; 0x11f
 80064c0:	4639      	mov	r1, r7
 80064c2:	4630      	mov	r0, r6
 80064c4:	f003 fde4 	bl	800a090 <iprintf>
 80064c8:	e00b      	b.n	80064e2 <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 80064ca:	4b58      	ldr	r3, [pc, #352]	; (800662c <tcp_input+0x48c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	8819      	ldrh	r1, [r3, #0]
 80064d0:	8b22      	ldrh	r2, [r4, #24]
 80064d2:	428a      	cmp	r2, r1
 80064d4:	d011      	beq.n	80064fa <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80064d6:	68e4      	ldr	r4, [r4, #12]
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d051      	beq.n	8006580 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064dc:	7d23      	ldrb	r3, [r4, #20]
 80064de:	2b0a      	cmp	r3, #10
 80064e0:	d1eb      	bne.n	80064ba <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80064e2:	7a22      	ldrb	r2, [r4, #8]
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	d0f0      	beq.n	80064ca <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80064e8:	4b4d      	ldr	r3, [pc, #308]	; (8006620 <tcp_input+0x480>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064f0:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d0e8      	beq.n	80064ca <tcp_input+0x32a>
 80064f8:	e7ed      	b.n	80064d6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 80064fa:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 80064fc:	8ae3      	ldrh	r3, [r4, #22]
 80064fe:	4283      	cmp	r3, r0
 8006500:	d1e9      	bne.n	80064d6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 8006502:	6862      	ldr	r2, [r4, #4]
 8006504:	4b46      	ldr	r3, [pc, #280]	; (8006620 <tcp_input+0x480>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d1e4      	bne.n	80064d6 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	4b44      	ldr	r3, [pc, #272]	; (8006620 <tcp_input+0x480>)
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	429a      	cmp	r2, r3
 8006514:	d1df      	bne.n	80064d6 <tcp_input+0x336>
  if (flags & TCP_RST) {
 8006516:	4b49      	ldr	r3, [pc, #292]	; (800663c <tcp_input+0x49c>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f013 0f04 	tst.w	r3, #4
 800651e:	d10e      	bne.n	800653e <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 8006520:	f013 0f02 	tst.w	r3, #2
 8006524:	d01d      	beq.n	8006562 <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006526:	4b48      	ldr	r3, [pc, #288]	; (8006648 <tcp_input+0x4a8>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	d403      	bmi.n	8006538 <tcp_input+0x398>
 8006530:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8006532:	1b9b      	subs	r3, r3, r6
 8006534:	2b00      	cmp	r3, #0
 8006536:	dd06      	ble.n	8006546 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 8006538:	4b41      	ldr	r3, [pc, #260]	; (8006640 <tcp_input+0x4a0>)
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b9c3      	cbnz	r3, 8006570 <tcp_input+0x3d0>
        pbuf_free(p);
 800653e:	4628      	mov	r0, r5
 8006540:	f7fd fc14 	bl	8003d6c <pbuf_free>
        return;
 8006544:	e63a      	b.n	80061bc <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006546:	4b45      	ldr	r3, [pc, #276]	; (800665c <tcp_input+0x4bc>)
 8006548:	4e3d      	ldr	r6, [pc, #244]	; (8006640 <tcp_input+0x4a0>)
 800654a:	8836      	ldrh	r6, [r6, #0]
 800654c:	9102      	str	r1, [sp, #8]
 800654e:	9001      	str	r0, [sp, #4]
 8006550:	1f19      	subs	r1, r3, #4
 8006552:	9100      	str	r1, [sp, #0]
 8006554:	4432      	add	r2, r6
 8006556:	4942      	ldr	r1, [pc, #264]	; (8006660 <tcp_input+0x4c0>)
 8006558:	6809      	ldr	r1, [r1, #0]
 800655a:	4620      	mov	r0, r4
 800655c:	f001 fbd8 	bl	8007d10 <tcp_rst>
      return;
 8006560:	e7ed      	b.n	800653e <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 8006562:	f013 0f01 	tst.w	r3, #1
 8006566:	d0e7      	beq.n	8006538 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 8006568:	4b3e      	ldr	r3, [pc, #248]	; (8006664 <tcp_input+0x4c4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6223      	str	r3, [r4, #32]
 800656e:	e7e3      	b.n	8006538 <tcp_input+0x398>
    tcp_ack_now(pcb);
 8006570:	8b63      	ldrh	r3, [r4, #26]
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8006578:	4620      	mov	r0, r4
 800657a:	f001 fc4b 	bl	8007e14 <tcp_output>
 800657e:	e7de      	b.n	800653e <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006580:	4b39      	ldr	r3, [pc, #228]	; (8006668 <tcp_input+0x4c8>)
 8006582:	f8d3 c000 	ldr.w	ip, [r3]
 8006586:	f1bc 0f00 	cmp.w	ip, #0
 800658a:	f000 8402 	beq.w	8006d92 <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <tcp_input+0x480>)
 8006590:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 8006592:	4a26      	ldr	r2, [pc, #152]	; (800662c <tcp_input+0x48c>)
 8006594:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006596:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006598:	4664      	mov	r4, ip
    prev = NULL;
 800659a:	2100      	movs	r1, #0
 800659c:	e009      	b.n	80065b2 <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800659e:	8ae2      	ldrh	r2, [r4, #22]
 80065a0:	8843      	ldrh	r3, [r0, #2]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d00f      	beq.n	80065c6 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	4621      	mov	r1, r4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 83f1 	beq.w	8006d92 <tcp_input+0xbf2>
 80065b0:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80065b2:	7a22      	ldrb	r2, [r4, #8]
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d0f2      	beq.n	800659e <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80065b8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80065bc:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d0ec      	beq.n	800659e <tcp_input+0x3fe>
 80065c4:	e7ef      	b.n	80065a6 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	42bb      	cmp	r3, r7
 80065ca:	d001      	beq.n	80065d0 <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1ea      	bne.n	80065a6 <tcp_input+0x406>
      if (prev != NULL) {
 80065d0:	b129      	cbz	r1, 80065de <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80065d6:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80065da:	4b23      	ldr	r3, [pc, #140]	; (8006668 <tcp_input+0x4c8>)
 80065dc:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 80065de:	4b17      	ldr	r3, [pc, #92]	; (800663c <tcp_input+0x49c>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f013 0f04 	tst.w	r3, #4
 80065e6:	d105      	bne.n	80065f4 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 80065e8:	f013 0f10 	tst.w	r3, #16
 80065ec:	d106      	bne.n	80065fc <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 80065ee:	f013 0f02 	tst.w	r3, #2
 80065f2:	d13b      	bne.n	800666c <tcp_input+0x4cc>
      pbuf_free(p);
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7fd fbb9 	bl	8003d6c <pbuf_free>
      return;
 80065fa:	e5df      	b.n	80061bc <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <tcp_input+0x4bc>)
 80065fe:	4a10      	ldr	r2, [pc, #64]	; (8006640 <tcp_input+0x4a0>)
 8006600:	8811      	ldrh	r1, [r2, #0]
 8006602:	4a11      	ldr	r2, [pc, #68]	; (8006648 <tcp_input+0x4a8>)
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	8806      	ldrh	r6, [r0, #0]
 8006608:	9602      	str	r6, [sp, #8]
 800660a:	8840      	ldrh	r0, [r0, #2]
 800660c:	9001      	str	r0, [sp, #4]
 800660e:	1f18      	subs	r0, r3, #4
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	440a      	add	r2, r1
 8006614:	4912      	ldr	r1, [pc, #72]	; (8006660 <tcp_input+0x4c0>)
 8006616:	6809      	ldr	r1, [r1, #0]
 8006618:	4620      	mov	r0, r4
 800661a:	f001 fb79 	bl	8007d10 <tcp_rst>
 800661e:	e7e9      	b.n	80065f4 <tcp_input+0x454>
 8006620:	20005220 	.word	0x20005220
 8006624:	2000a950 	.word	0x2000a950
 8006628:	2000a974 	.word	0x2000a974
 800662c:	2000a99c 	.word	0x2000a99c
 8006630:	2000a988 	.word	0x2000a988
 8006634:	2000a98c 	.word	0x2000a98c
 8006638:	2000a984 	.word	0x2000a984
 800663c:	2000a970 	.word	0x2000a970
 8006640:	2000a9aa 	.word	0x2000a9aa
 8006644:	2000a994 	.word	0x2000a994
 8006648:	2000a990 	.word	0x2000a990
 800664c:	0800c040 	.word	0x0800c040
 8006650:	0800c32c 	.word	0x0800c32c
 8006654:	0800b1cc 	.word	0x0800b1cc
 8006658:	0800c358 	.word	0x0800c358
 800665c:	20005234 	.word	0x20005234
 8006660:	2000a96c 	.word	0x2000a96c
 8006664:	2000a960 	.word	0x2000a960
 8006668:	2000a95c 	.word	0x2000a95c
    npcb = tcp_alloc(pcb->prio);
 800666c:	7d60      	ldrb	r0, [r4, #21]
 800666e:	f7fe faed 	bl	8004c4c <tcp_alloc>
    if (npcb == NULL) {
 8006672:	4606      	mov	r6, r0
 8006674:	2800      	cmp	r0, #0
 8006676:	d04c      	beq.n	8006712 <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006678:	4ba5      	ldr	r3, [pc, #660]	; (8006910 <tcp_input+0x770>)
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8006682:	8ae3      	ldrh	r3, [r4, #22]
 8006684:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8006686:	4fa3      	ldr	r7, [pc, #652]	; (8006914 <tcp_input+0x774>)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800668e:	2303      	movs	r3, #3
 8006690:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8006692:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8006950 <tcp_input+0x7b0>
 8006696:	f8d8 3000 	ldr.w	r3, [r8]
 800669a:	3301      	adds	r3, #1
 800669c:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800669e:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80066a0:	f7fe f8d4 	bl	800484c <tcp_next_iss>
    npcb->snd_wl2 = iss;
 80066a4:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 80066a6:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 80066a8:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 80066aa:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80066ac:	f8d8 3000 	ldr.w	r3, [r8]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 80066b8:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80066ba:	7a63      	ldrb	r3, [r4, #9]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 80066c2:	7a23      	ldrb	r3, [r4, #8]
 80066c4:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 80066c6:	4b94      	ldr	r3, [pc, #592]	; (8006918 <tcp_input+0x778>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	60f2      	str	r2, [r6, #12]
 80066cc:	601e      	str	r6, [r3, #0]
 80066ce:	f001 feb1 	bl	8008434 <tcp_timer_needed>
 80066d2:	4b92      	ldr	r3, [pc, #584]	; (800691c <tcp_input+0x77c>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80066d8:	4630      	mov	r0, r6
 80066da:	f7fe ff97 	bl	800560c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	89db      	ldrh	r3, [r3, #14]
 80066e2:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80066e6:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80066ea:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 80066ec:	1d34      	adds	r4, r6, #4
 80066ee:	4620      	mov	r0, r4
 80066f0:	f002 fd7a 	bl	80091e8 <ip4_route>
 80066f4:	4601      	mov	r1, r0
 80066f6:	4622      	mov	r2, r4
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7fe f8c3 	bl	8004884 <tcp_eff_send_mss_netif>
 80066fe:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006700:	2112      	movs	r1, #18
 8006702:	4630      	mov	r0, r6
 8006704:	f001 f956 	bl	80079b4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8006708:	b968      	cbnz	r0, 8006726 <tcp_input+0x586>
    tcp_output(npcb);
 800670a:	4630      	mov	r0, r6
 800670c:	f001 fb82 	bl	8007e14 <tcp_output>
 8006710:	e770      	b.n	80065f4 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006712:	69a3      	ldr	r3, [r4, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f43f af6d 	beq.w	80065f4 <tcp_input+0x454>
 800671a:	f04f 32ff 	mov.w	r2, #4294967295
 800671e:	2100      	movs	r1, #0
 8006720:	6920      	ldr	r0, [r4, #16]
 8006722:	4798      	blx	r3
 8006724:	e766      	b.n	80065f4 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 8006726:	2100      	movs	r1, #0
 8006728:	4630      	mov	r0, r6
 800672a:	f7fe f96d 	bl	8004a08 <tcp_abandon>
      return;
 800672e:	e761      	b.n	80065f4 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 8006730:	7b6b      	ldrb	r3, [r5, #13]
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	736b      	strb	r3, [r5, #13]
 8006738:	e67e      	b.n	8006438 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800673a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800673c:	b9e3      	cbnz	r3, 8006778 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800673e:	4620      	mov	r0, r4
 8006740:	f001 fb2e 	bl	8007da0 <tcp_send_empty_ack>
 8006744:	e018      	b.n	8006778 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 8006746:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006748:	4b75      	ldr	r3, [pc, #468]	; (8006920 <tcp_input+0x780>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d02b      	beq.n	80067a8 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 8006750:	4b74      	ldr	r3, [pc, #464]	; (8006924 <tcp_input+0x784>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f013 0f08 	tst.w	r3, #8
 8006758:	f000 8295 	beq.w	8006c86 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800675c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006760:	b11b      	cbz	r3, 800676a <tcp_input+0x5ca>
 8006762:	f06f 010d 	mvn.w	r1, #13
 8006766:	6920      	ldr	r0, [r4, #16]
 8006768:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800676a:	4621      	mov	r1, r4
 800676c:	486a      	ldr	r0, [pc, #424]	; (8006918 <tcp_input+0x778>)
 800676e:	f7fe f8e3 	bl	8004938 <tcp_pcb_remove>
        tcp_free(pcb);
 8006772:	4620      	mov	r0, r4
 8006774:	f7fd fe3e 	bl	80043f4 <tcp_free>
    tcp_input_pcb = NULL;
 8006778:	2300      	movs	r3, #0
 800677a:	4a6b      	ldr	r2, [pc, #428]	; (8006928 <tcp_input+0x788>)
 800677c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800677e:	4a6b      	ldr	r2, [pc, #428]	; (800692c <tcp_input+0x78c>)
 8006780:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 8006782:	4b6b      	ldr	r3, [pc, #428]	; (8006930 <tcp_input+0x790>)
 8006784:	6858      	ldr	r0, [r3, #4]
 8006786:	2800      	cmp	r0, #0
 8006788:	f43f ad18 	beq.w	80061bc <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800678c:	f7fd faee 	bl	8003d6c <pbuf_free>
      inseg.p = NULL;
 8006790:	4b67      	ldr	r3, [pc, #412]	; (8006930 <tcp_input+0x790>)
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e511      	b.n	80061bc <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006798:	b931      	cbnz	r1, 80067a8 <tcp_input+0x608>
 800679a:	4b66      	ldr	r3, [pc, #408]	; (8006934 <tcp_input+0x794>)
 800679c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80067a0:	4965      	ldr	r1, [pc, #404]	; (8006938 <tcp_input+0x798>)
 80067a2:	4866      	ldr	r0, [pc, #408]	; (800693c <tcp_input+0x79c>)
 80067a4:	f003 fc74 	bl	800a090 <iprintf>
      recv_flags |= TF_RESET;
 80067a8:	4a5e      	ldr	r2, [pc, #376]	; (8006924 <tcp_input+0x784>)
 80067aa:	7813      	ldrb	r3, [r2, #0]
 80067ac:	f043 0308 	orr.w	r3, r3, #8
 80067b0:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80067b2:	8b63      	ldrh	r3, [r4, #26]
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 80067ba:	e7c9      	b.n	8006750 <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80067bc:	f013 0f02 	tst.w	r3, #2
 80067c0:	d004      	beq.n	80067cc <tcp_input+0x62c>
 80067c2:	7d23      	ldrb	r3, [r4, #20]
 80067c4:	3b02      	subs	r3, #2
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d81c      	bhi.n	8006806 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80067cc:	8b63      	ldrh	r3, [r4, #26]
 80067ce:	f013 0f10 	tst.w	r3, #16
 80067d2:	d102      	bne.n	80067da <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 80067d4:	4b5a      	ldr	r3, [pc, #360]	; (8006940 <tcp_input+0x7a0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 80067e0:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7fe ff11 	bl	800560c <tcp_parseopt>
  switch (pcb->state) {
 80067ea:	7d23      	ldrb	r3, [r4, #20]
 80067ec:	3b02      	subs	r3, #2
 80067ee:	2b07      	cmp	r3, #7
 80067f0:	d8ae      	bhi.n	8006750 <tcp_input+0x5b0>
 80067f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80067f6:	000d      	.short	0x000d
 80067f8:	014f00d1 	.word	0x014f00d1
 80067fc:	01b1015f 	.word	0x01b1015f
 8006800:	01fd014f 	.word	0x01fd014f
 8006804:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 8006806:	8b63      	ldrh	r3, [r4, #26]
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800680e:	e79f      	b.n	8006750 <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006810:	4b4c      	ldr	r3, [pc, #304]	; (8006944 <tcp_input+0x7a4>)
 8006812:	781a      	ldrb	r2, [r3, #0]
 8006814:	f002 0312 	and.w	r3, r2, #18
 8006818:	2b12      	cmp	r3, #18
 800681a:	d020      	beq.n	800685e <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800681c:	f012 0f10 	tst.w	r2, #16
 8006820:	d096      	beq.n	8006750 <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006822:	4b3c      	ldr	r3, [pc, #240]	; (8006914 <tcp_input+0x774>)
 8006824:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006826:	4b48      	ldr	r3, [pc, #288]	; (8006948 <tcp_input+0x7a8>)
 8006828:	4a48      	ldr	r2, [pc, #288]	; (800694c <tcp_input+0x7ac>)
 800682a:	8810      	ldrh	r0, [r2, #0]
 800682c:	4a48      	ldr	r2, [pc, #288]	; (8006950 <tcp_input+0x7b0>)
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	880d      	ldrh	r5, [r1, #0]
 8006832:	9502      	str	r5, [sp, #8]
 8006834:	8849      	ldrh	r1, [r1, #2]
 8006836:	9101      	str	r1, [sp, #4]
 8006838:	1f19      	subs	r1, r3, #4
 800683a:	9100      	str	r1, [sp, #0]
 800683c:	4402      	add	r2, r0
 800683e:	4938      	ldr	r1, [pc, #224]	; (8006920 <tcp_input+0x780>)
 8006840:	6809      	ldr	r1, [r1, #0]
 8006842:	4620      	mov	r0, r4
 8006844:	f001 fa64 	bl	8007d10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006848:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800684c:	2b05      	cmp	r3, #5
 800684e:	f63f af7f 	bhi.w	8006750 <tcp_input+0x5b0>
          pcb->rtime = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006856:	4620      	mov	r0, r4
 8006858:	f001 fcc4 	bl	80081e4 <tcp_rexmit_rto>
 800685c:	e778      	b.n	8006750 <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800685e:	4b30      	ldr	r3, [pc, #192]	; (8006920 <tcp_input+0x780>)
 8006860:	6819      	ldr	r1, [r3, #0]
 8006862:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006864:	3301      	adds	r3, #1
 8006866:	428b      	cmp	r3, r1
 8006868:	d1d8      	bne.n	800681c <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800686a:	4b39      	ldr	r3, [pc, #228]	; (8006950 <tcp_input+0x7b0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006872:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 8006874:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <tcp_input+0x774>)
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	89d2      	ldrh	r2, [r2, #14]
 800687c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006880:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006884:	3b01      	subs	r3, #1
 8006886:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006888:	2304      	movs	r3, #4
 800688a:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800688c:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800688e:	18e5      	adds	r5, r4, r3
 8006890:	4628      	mov	r0, r5
 8006892:	f002 fca9 	bl	80091e8 <ip4_route>
 8006896:	4601      	mov	r1, r0
 8006898:	462a      	mov	r2, r5
 800689a:	4630      	mov	r0, r6
 800689c:	f7fd fff2 	bl	8004884 <tcp_eff_send_mss_netif>
 80068a0:	4603      	mov	r3, r0
 80068a2:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80068a4:	0041      	lsls	r1, r0, #1
 80068a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80068aa:	428a      	cmp	r2, r1
 80068ac:	bf38      	it	cc
 80068ae:	460a      	movcc	r2, r1
 80068b0:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 80068b4:	d94e      	bls.n	8006954 <tcp_input+0x7b4>
 80068b6:	0083      	lsls	r3, r0, #2
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80068be:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d04f      	beq.n	8006966 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 80068c6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80068ca:	3b01      	subs	r3, #1
 80068cc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 80068d0:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	d04f      	beq.n	8006976 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 80068da:	4628      	mov	r0, r5
 80068dc:	f7fd feec 	bl	80046b8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 80068e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d054      	beq.n	8006990 <tcp_input+0x7f0>
          pcb->rtime = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 80068ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80068ee:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80068f2:	b13b      	cbz	r3, 8006904 <tcp_input+0x764>
 80068f4:	2200      	movs	r2, #0
 80068f6:	4621      	mov	r1, r4
 80068f8:	6920      	ldr	r0, [r4, #16]
 80068fa:	4798      	blx	r3
        if (err == ERR_ABRT) {
 80068fc:	f110 0f0d 	cmn.w	r0, #13
 8006900:	f43f af3a 	beq.w	8006778 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 8006904:	8b63      	ldrh	r3, [r4, #26]
 8006906:	f043 0302 	orr.w	r3, r3, #2
 800690a:	8363      	strh	r3, [r4, #26]
 800690c:	e720      	b.n	8006750 <tcp_input+0x5b0>
 800690e:	bf00      	nop
 8006910:	20005220 	.word	0x20005220
 8006914:	2000a99c 	.word	0x2000a99c
 8006918:	2000a950 	.word	0x2000a950
 800691c:	2000a954 	.word	0x2000a954
 8006920:	2000a96c 	.word	0x2000a96c
 8006924:	2000a98c 	.word	0x2000a98c
 8006928:	2000a994 	.word	0x2000a994
 800692c:	2000a988 	.word	0x2000a988
 8006930:	2000a974 	.word	0x2000a974
 8006934:	0800c040 	.word	0x0800c040
 8006938:	0800c3b4 	.word	0x0800c3b4
 800693c:	0800b1cc 	.word	0x0800b1cc
 8006940:	2000a960 	.word	0x2000a960
 8006944:	2000a970 	.word	0x2000a970
 8006948:	20005234 	.word	0x20005234
 800694c:	2000a9aa 	.word	0x2000a9aa
 8006950:	2000a990 	.word	0x2000a990
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006954:	f241 121c 	movw	r2, #4380	; 0x111c
 8006958:	4291      	cmp	r1, r2
 800695a:	bf86      	itte	hi
 800695c:	0043      	lslhi	r3, r0, #1
 800695e:	b29b      	uxthhi	r3, r3
 8006960:	f241 131c 	movwls	r3, #4380	; 0x111c
 8006964:	e7a9      	b.n	80068ba <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006966:	4b92      	ldr	r3, [pc, #584]	; (8006bb0 <tcp_input+0xa10>)
 8006968:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800696c:	4991      	ldr	r1, [pc, #580]	; (8006bb4 <tcp_input+0xa14>)
 800696e:	4892      	ldr	r0, [pc, #584]	; (8006bb8 <tcp_input+0xa18>)
 8006970:	f003 fb8e 	bl	800a090 <iprintf>
 8006974:	e7a7      	b.n	80068c6 <tcp_input+0x726>
          rseg = pcb->unsent;
 8006976:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006978:	b115      	cbz	r5, 8006980 <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800697e:	e7ac      	b.n	80068da <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006980:	4b8b      	ldr	r3, [pc, #556]	; (8006bb0 <tcp_input+0xa10>)
 8006982:	f44f 725d 	mov.w	r2, #884	; 0x374
 8006986:	498d      	ldr	r1, [pc, #564]	; (8006bbc <tcp_input+0xa1c>)
 8006988:	488b      	ldr	r0, [pc, #556]	; (8006bb8 <tcp_input+0xa18>)
 800698a:	f003 fb81 	bl	800a090 <iprintf>
 800698e:	e7f4      	b.n	800697a <tcp_input+0x7da>
          pcb->rtime = -1;
 8006990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006994:	8623      	strh	r3, [r4, #48]	; 0x30
 8006996:	e7aa      	b.n	80068ee <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 8006998:	4b89      	ldr	r3, [pc, #548]	; (8006bc0 <tcp_input+0xa20>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f013 0f10 	tst.w	r3, #16
 80069a0:	d069      	beq.n	8006a76 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80069a2:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <tcp_input+0xa24>)
 80069a4:	6819      	ldr	r1, [r3, #0]
 80069a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069a8:	43db      	mvns	r3, r3
 80069aa:	42cb      	cmn	r3, r1
 80069ac:	d403      	bmi.n	80069b6 <tcp_input+0x816>
 80069ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80069b0:	1acb      	subs	r3, r1, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd11      	ble.n	80069da <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80069b6:	4b84      	ldr	r3, [pc, #528]	; (8006bc8 <tcp_input+0xa28>)
 80069b8:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80069ba:	4b84      	ldr	r3, [pc, #528]	; (8006bcc <tcp_input+0xa2c>)
 80069bc:	4a84      	ldr	r2, [pc, #528]	; (8006bd0 <tcp_input+0xa30>)
 80069be:	8815      	ldrh	r5, [r2, #0]
 80069c0:	4a84      	ldr	r2, [pc, #528]	; (8006bd4 <tcp_input+0xa34>)
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	8806      	ldrh	r6, [r0, #0]
 80069c6:	9602      	str	r6, [sp, #8]
 80069c8:	8840      	ldrh	r0, [r0, #2]
 80069ca:	9001      	str	r0, [sp, #4]
 80069cc:	1f18      	subs	r0, r3, #4
 80069ce:	9000      	str	r0, [sp, #0]
 80069d0:	442a      	add	r2, r5
 80069d2:	4620      	mov	r0, r4
 80069d4:	f001 f99c 	bl	8007d10 <tcp_rst>
 80069d8:	e6ba      	b.n	8006750 <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 80069da:	2304      	movs	r3, #4
 80069dc:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 80069de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03b      	beq.n	8006a5c <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	b34b      	cbz	r3, 8006a3c <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80069e8:	2200      	movs	r2, #0
 80069ea:	4621      	mov	r1, r4
 80069ec:	6920      	ldr	r0, [r4, #16]
 80069ee:	4798      	blx	r3
          if (err != ERR_OK) {
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d12f      	bne.n	8006a54 <tcp_input+0x8b4>
          tcp_receive(pcb);
 80069f4:	4620      	mov	r0, r4
 80069f6:	f7fe ff47 	bl	8005888 <tcp_receive>
          if (recv_acked != 0) {
 80069fa:	4b77      	ldr	r3, [pc, #476]	; (8006bd8 <tcp_input+0xa38>)
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b113      	cbz	r3, 8006a06 <tcp_input+0x866>
            recv_acked--;
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a75      	ldr	r2, [pc, #468]	; (8006bd8 <tcp_input+0xa38>)
 8006a04:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006a06:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006a08:	0059      	lsls	r1, r3, #1
 8006a0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8006a0e:	428a      	cmp	r2, r1
 8006a10:	bf38      	it	cc
 8006a12:	460a      	movcc	r2, r1
 8006a14:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8006a18:	d924      	bls.n	8006a64 <tcp_input+0x8c4>
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8006a22:	4b6e      	ldr	r3, [pc, #440]	; (8006bdc <tcp_input+0xa3c>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f013 0f20 	tst.w	r3, #32
 8006a2a:	f43f ae91 	beq.w	8006750 <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 8006a2e:	8b63      	ldrh	r3, [r4, #26]
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 8006a36:	2307      	movs	r3, #7
 8006a38:	7523      	strb	r3, [r4, #20]
 8006a3a:	e689      	b.n	8006750 <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006a3c:	4b5c      	ldr	r3, [pc, #368]	; (8006bb0 <tcp_input+0xa10>)
 8006a3e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8006a42:	4967      	ldr	r1, [pc, #412]	; (8006be0 <tcp_input+0xa40>)
 8006a44:	485c      	ldr	r0, [pc, #368]	; (8006bb8 <tcp_input+0xa18>)
 8006a46:	f003 fb23 	bl	800a090 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006a4a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ca      	bne.n	80069e8 <tcp_input+0x848>
 8006a52:	e003      	b.n	8006a5c <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 8006a54:	f110 0f0d 	cmn.w	r0, #13
 8006a58:	f43f ae8e 	beq.w	8006778 <tcp_input+0x5d8>
              tcp_abort(pcb);
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7fe f859 	bl	8004b14 <tcp_abort>
 8006a62:	e689      	b.n	8006778 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006a64:	f241 121c 	movw	r2, #4380	; 0x111c
 8006a68:	4291      	cmp	r1, r2
 8006a6a:	bf86      	itte	hi
 8006a6c:	005b      	lslhi	r3, r3, #1
 8006a6e:	b29b      	uxthhi	r3, r3
 8006a70:	f241 131c 	movwls	r3, #4380	; 0x111c
 8006a74:	e7d3      	b.n	8006a1e <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006a76:	f013 0f02 	tst.w	r3, #2
 8006a7a:	f43f ae69 	beq.w	8006750 <tcp_input+0x5b0>
 8006a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a54      	ldr	r2, [pc, #336]	; (8006bd4 <tcp_input+0xa34>)
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	4293      	cmp	r3, r2
 8006a88:	f47f ae62 	bne.w	8006750 <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f001 f8bb 	bl	8007c08 <tcp_rexmit>
 8006a92:	e65d      	b.n	8006750 <tcp_input+0x5b0>
      tcp_receive(pcb);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7fe fef7 	bl	8005888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006a9a:	4b50      	ldr	r3, [pc, #320]	; (8006bdc <tcp_input+0xa3c>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f013 0f20 	tst.w	r3, #32
 8006aa2:	f43f ae55 	beq.w	8006750 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8006aa6:	8b63      	ldrh	r3, [r4, #26]
 8006aa8:	f043 0302 	orr.w	r3, r3, #2
 8006aac:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8006aae:	2307      	movs	r3, #7
 8006ab0:	7523      	strb	r3, [r4, #20]
 8006ab2:	e64d      	b.n	8006750 <tcp_input+0x5b0>
      tcp_receive(pcb);
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7fe fee7 	bl	8005888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006aba:	4b48      	ldr	r3, [pc, #288]	; (8006bdc <tcp_input+0xa3c>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f013 0f20 	tst.w	r3, #32
 8006ac2:	d036      	beq.n	8006b32 <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ac4:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <tcp_input+0xa20>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f013 0f10 	tst.w	r3, #16
 8006acc:	d004      	beq.n	8006ad8 <tcp_input+0x938>
 8006ace:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006ad0:	4b3c      	ldr	r3, [pc, #240]	; (8006bc4 <tcp_input+0xa24>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d006      	beq.n	8006ae6 <tcp_input+0x946>
          tcp_ack_now(pcb);
 8006ad8:	8b63      	ldrh	r3, [r4, #26]
 8006ada:	f043 0302 	orr.w	r3, r3, #2
 8006ade:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	7523      	strb	r3, [r4, #20]
 8006ae4:	e634      	b.n	8006750 <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ae6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <tcp_input+0x938>
          tcp_ack_now(pcb);
 8006aec:	8b63      	ldrh	r3, [r4, #26]
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8006af4:	4620      	mov	r0, r4
 8006af6:	f7fd feef 	bl	80048d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8006afa:	4b3a      	ldr	r3, [pc, #232]	; (8006be4 <tcp_input+0xa44>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	d005      	beq.n	8006b0e <tcp_input+0x96e>
 8006b02:	b153      	cbz	r3, 8006b1a <tcp_input+0x97a>
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	42a2      	cmp	r2, r4
 8006b08:	d005      	beq.n	8006b16 <tcp_input+0x976>
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	e7f9      	b.n	8006b02 <tcp_input+0x962>
 8006b0e:	68e2      	ldr	r2, [r4, #12]
 8006b10:	4b34      	ldr	r3, [pc, #208]	; (8006be4 <tcp_input+0xa44>)
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e001      	b.n	8006b1a <tcp_input+0x97a>
 8006b16:	68e2      	ldr	r2, [r4, #12]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	4b33      	ldr	r3, [pc, #204]	; (8006be8 <tcp_input+0xa48>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8006b20:	230a      	movs	r3, #10
 8006b22:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8006b24:	4b31      	ldr	r3, [pc, #196]	; (8006bec <tcp_input+0xa4c>)
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	60e2      	str	r2, [r4, #12]
 8006b2a:	601c      	str	r4, [r3, #0]
 8006b2c:	f001 fc82 	bl	8008434 <tcp_timer_needed>
 8006b30:	e60e      	b.n	8006750 <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006b32:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <tcp_input+0xa20>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	f013 0f10 	tst.w	r3, #16
 8006b3a:	f43f ae09 	beq.w	8006750 <tcp_input+0x5b0>
 8006b3e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <tcp_input+0xa24>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	f47f ae03 	bne.w	8006750 <tcp_input+0x5b0>
 8006b4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f adff 	bne.w	8006750 <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 8006b52:	2306      	movs	r3, #6
 8006b54:	7523      	strb	r3, [r4, #20]
 8006b56:	e5fb      	b.n	8006750 <tcp_input+0x5b0>
      tcp_receive(pcb);
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7fe fe95 	bl	8005888 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8006b5e:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <tcp_input+0xa3c>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f013 0f20 	tst.w	r3, #32
 8006b66:	f43f adf3 	beq.w	8006750 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8006b6a:	8b63      	ldrh	r3, [r4, #26]
 8006b6c:	f043 0302 	orr.w	r3, r3, #2
 8006b70:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7fd feb0 	bl	80048d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <tcp_input+0xa44>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	d005      	beq.n	8006b8c <tcp_input+0x9ec>
 8006b80:	b153      	cbz	r3, 8006b98 <tcp_input+0x9f8>
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	42a2      	cmp	r2, r4
 8006b86:	d005      	beq.n	8006b94 <tcp_input+0x9f4>
 8006b88:	4613      	mov	r3, r2
 8006b8a:	e7f9      	b.n	8006b80 <tcp_input+0x9e0>
 8006b8c:	68e2      	ldr	r2, [r4, #12]
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <tcp_input+0xa44>)
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e001      	b.n	8006b98 <tcp_input+0x9f8>
 8006b94:	68e2      	ldr	r2, [r4, #12]
 8006b96:	60da      	str	r2, [r3, #12]
 8006b98:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <tcp_input+0xa48>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <tcp_input+0xa4c>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	60e2      	str	r2, [r4, #12]
 8006ba8:	601c      	str	r4, [r3, #0]
 8006baa:	f001 fc43 	bl	8008434 <tcp_timer_needed>
 8006bae:	e5cf      	b.n	8006750 <tcp_input+0x5b0>
 8006bb0:	0800c040 	.word	0x0800c040
 8006bb4:	0800c3d4 	.word	0x0800c3d4
 8006bb8:	0800b1cc 	.word	0x0800b1cc
 8006bbc:	0800c3ec 	.word	0x0800c3ec
 8006bc0:	2000a970 	.word	0x2000a970
 8006bc4:	2000a96c 	.word	0x2000a96c
 8006bc8:	2000a99c 	.word	0x2000a99c
 8006bcc:	20005234 	.word	0x20005234
 8006bd0:	2000a9aa 	.word	0x2000a9aa
 8006bd4:	2000a990 	.word	0x2000a990
 8006bd8:	2000a984 	.word	0x2000a984
 8006bdc:	2000a98c 	.word	0x2000a98c
 8006be0:	0800c400 	.word	0x0800c400
 8006be4:	2000a950 	.word	0x2000a950
 8006be8:	2000a954 	.word	0x2000a954
 8006bec:	2000a968 	.word	0x2000a968
      tcp_receive(pcb);
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7fe fe49 	bl	8005888 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006bf6:	4b73      	ldr	r3, [pc, #460]	; (8006dc4 <tcp_input+0xc24>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f013 0f10 	tst.w	r3, #16
 8006bfe:	f43f ada7 	beq.w	8006750 <tcp_input+0x5b0>
 8006c02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006c04:	4b70      	ldr	r3, [pc, #448]	; (8006dc8 <tcp_input+0xc28>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	f47f ada1 	bne.w	8006750 <tcp_input+0x5b0>
 8006c0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f47f ad9d 	bne.w	8006750 <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7fd fe5e 	bl	80048d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006c1c:	4b6b      	ldr	r3, [pc, #428]	; (8006dcc <tcp_input+0xc2c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d005      	beq.n	8006c30 <tcp_input+0xa90>
 8006c24:	b153      	cbz	r3, 8006c3c <tcp_input+0xa9c>
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	42a2      	cmp	r2, r4
 8006c2a:	d005      	beq.n	8006c38 <tcp_input+0xa98>
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	e7f9      	b.n	8006c24 <tcp_input+0xa84>
 8006c30:	68e2      	ldr	r2, [r4, #12]
 8006c32:	4b66      	ldr	r3, [pc, #408]	; (8006dcc <tcp_input+0xc2c>)
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e001      	b.n	8006c3c <tcp_input+0xa9c>
 8006c38:	68e2      	ldr	r2, [r4, #12]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	4b64      	ldr	r3, [pc, #400]	; (8006dd0 <tcp_input+0xc30>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006c42:	230a      	movs	r3, #10
 8006c44:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006c46:	4b63      	ldr	r3, [pc, #396]	; (8006dd4 <tcp_input+0xc34>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	60e2      	str	r2, [r4, #12]
 8006c4c:	601c      	str	r4, [r3, #0]
 8006c4e:	f001 fbf1 	bl	8008434 <tcp_timer_needed>
 8006c52:	e57d      	b.n	8006750 <tcp_input+0x5b0>
      tcp_receive(pcb);
 8006c54:	4620      	mov	r0, r4
 8006c56:	f7fe fe17 	bl	8005888 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006c5a:	4b5a      	ldr	r3, [pc, #360]	; (8006dc4 <tcp_input+0xc24>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f013 0f10 	tst.w	r3, #16
 8006c62:	f43f ad75 	beq.w	8006750 <tcp_input+0x5b0>
 8006c66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006c68:	4b57      	ldr	r3, [pc, #348]	; (8006dc8 <tcp_input+0xc28>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	f47f ad6f 	bne.w	8006750 <tcp_input+0x5b0>
 8006c72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f ad6b 	bne.w	8006750 <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 8006c7a:	4a57      	ldr	r2, [pc, #348]	; (8006dd8 <tcp_input+0xc38>)
 8006c7c:	7813      	ldrb	r3, [r2, #0]
 8006c7e:	f043 0310 	orr.w	r3, r3, #16
 8006c82:	7013      	strb	r3, [r2, #0]
 8006c84:	e564      	b.n	8006750 <tcp_input+0x5b0>
        if (recv_acked > 0) {
 8006c86:	4b55      	ldr	r3, [pc, #340]	; (8006ddc <tcp_input+0xc3c>)
 8006c88:	881a      	ldrh	r2, [r3, #0]
 8006c8a:	b162      	cbz	r2, 8006ca6 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006c8c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006c90:	b133      	cbz	r3, 8006ca0 <tcp_input+0xb00>
 8006c92:	4621      	mov	r1, r4
 8006c94:	6920      	ldr	r0, [r4, #16]
 8006c96:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8006c98:	f110 0f0d 	cmn.w	r0, #13
 8006c9c:	f43f ad6c 	beq.w	8006778 <tcp_input+0x5d8>
          recv_acked = 0;
 8006ca0:	4b4e      	ldr	r3, [pc, #312]	; (8006ddc <tcp_input+0xc3c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7fe fcfa 	bl	80056a0 <tcp_input_delayed_close>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f47f ad63 	bne.w	8006778 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 8006cb2:	4b4b      	ldr	r3, [pc, #300]	; (8006de0 <tcp_input+0xc40>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b1eb      	cbz	r3, 8006cf4 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006cb8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006cba:	b133      	cbz	r3, 8006cca <tcp_input+0xb2a>
 8006cbc:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <tcp_input+0xc44>)
 8006cbe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006cc2:	4949      	ldr	r1, [pc, #292]	; (8006de8 <tcp_input+0xc48>)
 8006cc4:	4849      	ldr	r0, [pc, #292]	; (8006dec <tcp_input+0xc4c>)
 8006cc6:	f003 f9e3 	bl	800a090 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006cca:	8b63      	ldrh	r3, [r4, #26]
 8006ccc:	f013 0f10 	tst.w	r3, #16
 8006cd0:	d128      	bne.n	8006d24 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006cd2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006cd6:	b36d      	cbz	r5, 8006d34 <tcp_input+0xb94>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4a41      	ldr	r2, [pc, #260]	; (8006de0 <tcp_input+0xc40>)
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	4621      	mov	r1, r4
 8006ce0:	6920      	ldr	r0, [r4, #16]
 8006ce2:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8006ce4:	f110 0f0d 	cmn.w	r0, #13
 8006ce8:	f43f ad46 	beq.w	8006778 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 8006cec:	b110      	cbz	r0, 8006cf4 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 8006cee:	4b3c      	ldr	r3, [pc, #240]	; (8006de0 <tcp_input+0xc40>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8006cf4:	4b38      	ldr	r3, [pc, #224]	; (8006dd8 <tcp_input+0xc38>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f013 0f20 	tst.w	r3, #32
 8006cfc:	d005      	beq.n	8006d0a <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 8006cfe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d00:	b303      	cbz	r3, 8006d44 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006d02:	7b5a      	ldrb	r2, [r3, #13]
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <tcp_input+0xc50>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7fe fcc5 	bl	80056a0 <tcp_input_delayed_close>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f47f ad2e 	bne.w	8006778 <tcp_input+0x5d8>
        tcp_output(pcb);
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f001 f879 	bl	8007e14 <tcp_output>
 8006d22:	e529      	b.n	8006778 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 8006d24:	4b2e      	ldr	r3, [pc, #184]	; (8006de0 <tcp_input+0xc40>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	f7fd f820 	bl	8003d6c <pbuf_free>
            tcp_abort(pcb);
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7fd fef1 	bl	8004b14 <tcp_abort>
            goto aborted;
 8006d32:	e521      	b.n	8006778 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006d34:	2300      	movs	r3, #0
 8006d36:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <tcp_input+0xc40>)
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe f917 	bl	8004f70 <tcp_recv_null>
 8006d42:	e7cf      	b.n	8006ce4 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8006d4a:	bf1c      	itt	ne
 8006d4c:	3301      	addne	r3, #1
 8006d4e:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8006d50:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8006d54:	2d00      	cmp	r5, #0
 8006d56:	d0d8      	beq.n	8006d0a <tcp_input+0xb6a>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	6920      	ldr	r0, [r4, #16]
 8006d60:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8006d62:	f110 0f0d 	cmn.w	r0, #13
 8006d66:	d1d0      	bne.n	8006d0a <tcp_input+0xb6a>
 8006d68:	e506      	b.n	8006778 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d6a:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <tcp_input+0xc54>)
 8006d6c:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <tcp_input+0xc58>)
 8006d70:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <tcp_input+0xc5c>)
 8006d72:	8810      	ldrh	r0, [r2, #0]
 8006d74:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <tcp_input+0xc60>)
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	880c      	ldrh	r4, [r1, #0]
 8006d7a:	9402      	str	r4, [sp, #8]
 8006d7c:	8849      	ldrh	r1, [r1, #2]
 8006d7e:	9101      	str	r1, [sp, #4]
 8006d80:	1f19      	subs	r1, r3, #4
 8006d82:	9100      	str	r1, [sp, #0]
 8006d84:	4402      	add	r2, r0
 8006d86:	4910      	ldr	r1, [pc, #64]	; (8006dc8 <tcp_input+0xc28>)
 8006d88:	6809      	ldr	r1, [r1, #0]
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f000 ffc0 	bl	8007d10 <tcp_rst>
 8006d90:	e007      	b.n	8006da2 <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <tcp_input+0xc54>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	8998      	ldrh	r0, [r3, #12]
 8006d98:	f7fc fa1b 	bl	80031d2 <lwip_htons>
 8006d9c:	f010 0f04 	tst.w	r0, #4
 8006da0:	d0e3      	beq.n	8006d6a <tcp_input+0xbca>
    pbuf_free(p);
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7fc ffe2 	bl	8003d6c <pbuf_free>
 8006da8:	f7ff ba08 	b.w	80061bc <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <tcp_input+0xc34>)
 8006dae:	681c      	ldr	r4, [r3, #0]
 8006db0:	2c00      	cmp	r4, #0
 8006db2:	f43f abe5 	beq.w	8006580 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006db6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8006de4 <tcp_input+0xc44>
 8006dba:	4f12      	ldr	r7, [pc, #72]	; (8006e04 <tcp_input+0xc64>)
 8006dbc:	4e0b      	ldr	r6, [pc, #44]	; (8006dec <tcp_input+0xc4c>)
 8006dbe:	f7ff bb8d 	b.w	80064dc <tcp_input+0x33c>
 8006dc2:	bf00      	nop
 8006dc4:	2000a970 	.word	0x2000a970
 8006dc8:	2000a96c 	.word	0x2000a96c
 8006dcc:	2000a950 	.word	0x2000a950
 8006dd0:	2000a954 	.word	0x2000a954
 8006dd4:	2000a968 	.word	0x2000a968
 8006dd8:	2000a98c 	.word	0x2000a98c
 8006ddc:	2000a984 	.word	0x2000a984
 8006de0:	2000a988 	.word	0x2000a988
 8006de4:	0800c040 	.word	0x0800c040
 8006de8:	0800c420 	.word	0x0800c420
 8006dec:	0800b1cc 	.word	0x0800b1cc
 8006df0:	2000a994 	.word	0x2000a994
 8006df4:	2000a99c 	.word	0x2000a99c
 8006df8:	20005234 	.word	0x20005234
 8006dfc:	2000a9aa 	.word	0x2000a9aa
 8006e00:	2000a990 	.word	0x2000a990
 8006e04:	0800c384 	.word	0x0800c384

08006e08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8006e08:	4a02      	ldr	r2, [pc, #8]	; (8006e14 <tcp_trigger_input_pcb_close+0xc>)
 8006e0a:	7813      	ldrb	r3, [r2, #0]
 8006e0c:	f043 0310 	orr.w	r3, r3, #16
 8006e10:	7013      	strb	r3, [r2, #0]
}
 8006e12:	4770      	bx	lr
 8006e14:	2000a98c 	.word	0x2000a98c

08006e18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8006e18:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	b128      	cbz	r0, 8006e2a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 8006e22:	3801      	subs	r0, #1
 8006e24:	bf18      	it	ne
 8006e26:	2001      	movne	r0, #1
 8006e28:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8006e2a:	4b04      	ldr	r3, [pc, #16]	; (8006e3c <tcp_output_segment_busy+0x24>)
 8006e2c:	f240 529a 	movw	r2, #1434	; 0x59a
 8006e30:	4903      	ldr	r1, [pc, #12]	; (8006e40 <tcp_output_segment_busy+0x28>)
 8006e32:	4804      	ldr	r0, [pc, #16]	; (8006e44 <tcp_output_segment_busy+0x2c>)
 8006e34:	f003 f92c 	bl	800a090 <iprintf>
 8006e38:	e7f1      	b.n	8006e1e <tcp_output_segment_busy+0x6>
 8006e3a:	bf00      	nop
 8006e3c:	0800c43c 	.word	0x0800c43c
 8006e40:	0800c470 	.word	0x0800c470
 8006e44:	0800b1cc 	.word	0x0800b1cc

08006e48 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8006e4c:	460d      	mov	r5, r1
 8006e4e:	b181      	cbz	r1, 8006e72 <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 8006e50:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8006e52:	00a4      	lsls	r4, r4, #2
 8006e54:	f004 0404 	and.w	r4, r4, #4
 8006e58:	3414      	adds	r4, #20
 8006e5a:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 8006e5c:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	d006      	beq.n	8006e70 <tcp_output_fill_options+0x28>
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <tcp_output_fill_options+0x3c>)
 8006e64:	f240 7275 	movw	r2, #1909	; 0x775
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <tcp_output_fill_options+0x40>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <tcp_output_fill_options+0x44>)
 8006e6c:	f003 f910 	bl	800a090 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8006e72:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <tcp_output_fill_options+0x3c>)
 8006e74:	f240 7256 	movw	r2, #1878	; 0x756
 8006e78:	4905      	ldr	r1, [pc, #20]	; (8006e90 <tcp_output_fill_options+0x48>)
 8006e7a:	4804      	ldr	r0, [pc, #16]	; (8006e8c <tcp_output_fill_options+0x44>)
 8006e7c:	f003 f908 	bl	800a090 <iprintf>
 8006e80:	e7e6      	b.n	8006e50 <tcp_output_fill_options+0x8>
 8006e82:	bf00      	nop
 8006e84:	0800c43c 	.word	0x0800c43c
 8006e88:	0800c4c0 	.word	0x0800c4c0
 8006e8c:	0800b1cc 	.word	0x0800b1cc
 8006e90:	0800c498 	.word	0x0800c498

08006e94 <tcp_pbuf_prealloc>:
{
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	4680      	mov	r8, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4615      	mov	r5, r2
 8006e9e:	9e08      	ldr	r6, [sp, #32]
 8006ea0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8006ea4:	461f      	mov	r7, r3
 8006ea6:	b1cb      	cbz	r3, 8006edc <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8006ea8:	b1fe      	cbz	r6, 8006eea <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 8006eaa:	42ac      	cmp	r4, r5
 8006eac:	d229      	bcs.n	8006f02 <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8006eae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8006eb2:	f013 0f02 	tst.w	r3, #2
 8006eb6:	d108      	bne.n	8006eca <tcp_pbuf_prealloc+0x36>
 8006eb8:	8b73      	ldrh	r3, [r6, #26]
 8006eba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ebe:	d139      	bne.n	8006f34 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 8006ec0:	f1b9 0f00 	cmp.w	r9, #0
 8006ec4:	d001      	beq.n	8006eca <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 8006ec6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8006ec8:	b1b3      	cbz	r3, 8006ef8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8006eca:	f204 211b 	addw	r1, r4, #539	; 0x21b
 8006ece:	f021 0103 	bic.w	r1, r1, #3
 8006ed2:	428d      	cmp	r5, r1
 8006ed4:	bf28      	it	cs
 8006ed6:	460d      	movcs	r5, r1
 8006ed8:	b2a9      	uxth	r1, r5
 8006eda:	e013      	b.n	8006f04 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8006edc:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <tcp_pbuf_prealloc+0xa4>)
 8006ede:	22e8      	movs	r2, #232	; 0xe8
 8006ee0:	4916      	ldr	r1, [pc, #88]	; (8006f3c <tcp_pbuf_prealloc+0xa8>)
 8006ee2:	4817      	ldr	r0, [pc, #92]	; (8006f40 <tcp_pbuf_prealloc+0xac>)
 8006ee4:	f003 f8d4 	bl	800a090 <iprintf>
 8006ee8:	e7de      	b.n	8006ea8 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8006eea:	4b13      	ldr	r3, [pc, #76]	; (8006f38 <tcp_pbuf_prealloc+0xa4>)
 8006eec:	22e9      	movs	r2, #233	; 0xe9
 8006eee:	4915      	ldr	r1, [pc, #84]	; (8006f44 <tcp_pbuf_prealloc+0xb0>)
 8006ef0:	4813      	ldr	r0, [pc, #76]	; (8006f40 <tcp_pbuf_prealloc+0xac>)
 8006ef2:	f003 f8cd 	bl	800a090 <iprintf>
 8006ef6:	e7d8      	b.n	8006eaa <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 8006ef8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 8006efe:	4621      	mov	r1, r4
 8006f00:	e000      	b.n	8006f04 <tcp_pbuf_prealloc+0x70>
 8006f02:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8006f04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006f08:	4640      	mov	r0, r8
 8006f0a:	f7fc ff99 	bl	8003e40 <pbuf_alloc>
  if (p == NULL) {
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b168      	cbz	r0, 8006f2e <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8006f12:	6803      	ldr	r3, [r0, #0]
 8006f14:	b133      	cbz	r3, 8006f24 <tcp_pbuf_prealloc+0x90>
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <tcp_pbuf_prealloc+0xa4>)
 8006f18:	f240 120b 	movw	r2, #267	; 0x10b
 8006f1c:	490a      	ldr	r1, [pc, #40]	; (8006f48 <tcp_pbuf_prealloc+0xb4>)
 8006f1e:	4808      	ldr	r0, [pc, #32]	; (8006f40 <tcp_pbuf_prealloc+0xac>)
 8006f20:	f003 f8b6 	bl	800a090 <iprintf>
  *oversize = p->len - length;
 8006f24:	896b      	ldrh	r3, [r5, #10]
 8006f26:	1b1b      	subs	r3, r3, r4
 8006f28:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 8006f2a:	812c      	strh	r4, [r5, #8]
 8006f2c:	816c      	strh	r4, [r5, #10]
}
 8006f2e:	4628      	mov	r0, r5
 8006f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 8006f34:	4621      	mov	r1, r4
 8006f36:	e7e5      	b.n	8006f04 <tcp_pbuf_prealloc+0x70>
 8006f38:	0800c43c 	.word	0x0800c43c
 8006f3c:	0800c4d4 	.word	0x0800c4d4
 8006f40:	0800b1cc 	.word	0x0800b1cc
 8006f44:	0800c4f8 	.word	0x0800c4f8
 8006f48:	0800c518 	.word	0x0800c518

08006f4c <tcp_create_segment>:
{
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	460e      	mov	r6, r1
 8006f52:	4617      	mov	r7, r2
 8006f54:	4698      	mov	r8, r3
 8006f56:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8006f5a:	4681      	mov	r9, r0
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d041      	beq.n	8006fe4 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	d046      	beq.n	8006ff2 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8006f64:	ea4f 058a 	mov.w	r5, sl, lsl #2
 8006f68:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8006f6c:	2003      	movs	r0, #3
 8006f6e:	f7fc fc0f 	bl	8003790 <memp_malloc>
 8006f72:	4604      	mov	r4, r0
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d043      	beq.n	8007000 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 8006f78:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8006f80:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8006f82:	fa1f fa85 	uxth.w	sl, r5
 8006f86:	8933      	ldrh	r3, [r6, #8]
 8006f88:	4553      	cmp	r3, sl
 8006f8a:	d33d      	bcc.n	8007008 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 8006f8c:	8931      	ldrh	r1, [r6, #8]
 8006f8e:	eba1 010a 	sub.w	r1, r1, sl
 8006f92:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8006f94:	2114      	movs	r1, #20
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7fc fea3 	bl	8003ce2 <pbuf_add_header>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d13a      	bne.n	8007016 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	685e      	ldr	r6, [r3, #4]
 8006fa4:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8006fa6:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8006faa:	f7fc f912 	bl	80031d2 <lwip_htons>
 8006fae:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8006fb0:	68e6      	ldr	r6, [r4, #12]
 8006fb2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8006fb6:	f7fc f90c 	bl	80031d2 <lwip_htons>
 8006fba:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8006fbc:	68e6      	ldr	r6, [r4, #12]
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	f7fc f90c 	bl	80031dc <lwip_htonl>
 8006fc4:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8006fc6:	68e6      	ldr	r6, [r4, #12]
 8006fc8:	02a8      	lsls	r0, r5, #10
 8006fca:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 8006fce:	4338      	orrs	r0, r7
 8006fd0:	f7fc f8ff 	bl	80031d2 <lwip_htons>
 8006fd4:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	749a      	strb	r2, [r3, #18]
 8006fdc:	74da      	strb	r2, [r3, #19]
}
 8006fde:	4620      	mov	r0, r4
 8006fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <tcp_create_segment+0xd4>)
 8006fe6:	22a3      	movs	r2, #163	; 0xa3
 8006fe8:	490e      	ldr	r1, [pc, #56]	; (8007024 <tcp_create_segment+0xd8>)
 8006fea:	480f      	ldr	r0, [pc, #60]	; (8007028 <tcp_create_segment+0xdc>)
 8006fec:	f003 f850 	bl	800a090 <iprintf>
 8006ff0:	e7b6      	b.n	8006f60 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <tcp_create_segment+0xd4>)
 8006ff4:	22a4      	movs	r2, #164	; 0xa4
 8006ff6:	490d      	ldr	r1, [pc, #52]	; (800702c <tcp_create_segment+0xe0>)
 8006ff8:	480b      	ldr	r0, [pc, #44]	; (8007028 <tcp_create_segment+0xdc>)
 8006ffa:	f003 f849 	bl	800a090 <iprintf>
 8006ffe:	e7b1      	b.n	8006f64 <tcp_create_segment+0x18>
    pbuf_free(p);
 8007000:	4630      	mov	r0, r6
 8007002:	f7fc feb3 	bl	8003d6c <pbuf_free>
    return NULL;
 8007006:	e7ea      	b.n	8006fde <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <tcp_create_segment+0xd4>)
 800700a:	22b0      	movs	r2, #176	; 0xb0
 800700c:	4908      	ldr	r1, [pc, #32]	; (8007030 <tcp_create_segment+0xe4>)
 800700e:	4806      	ldr	r0, [pc, #24]	; (8007028 <tcp_create_segment+0xdc>)
 8007010:	f003 f83e 	bl	800a090 <iprintf>
 8007014:	e7ba      	b.n	8006f8c <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 8007016:	4620      	mov	r0, r4
 8007018:	f7fd fb4e 	bl	80046b8 <tcp_seg_free>
    return NULL;
 800701c:	2400      	movs	r4, #0
 800701e:	e7de      	b.n	8006fde <tcp_create_segment+0x92>
 8007020:	0800c43c 	.word	0x0800c43c
 8007024:	0800c52c 	.word	0x0800c52c
 8007028:	0800b1cc 	.word	0x0800b1cc
 800702c:	0800c54c 	.word	0x0800c54c
 8007030:	0800c570 	.word	0x0800c570

08007034 <tcp_output_alloc_header_common>:
{
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	4607      	mov	r7, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800703e:	3214      	adds	r2, #20
 8007040:	4411      	add	r1, r2
 8007042:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007046:	b289      	uxth	r1, r1
 8007048:	2022      	movs	r0, #34	; 0x22
 800704a:	f7fc fef9 	bl	8003e40 <pbuf_alloc>
  if (p != NULL) {
 800704e:	4606      	mov	r6, r0
 8007050:	b348      	cbz	r0, 80070a6 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007052:	f104 0313 	add.w	r3, r4, #19
 8007056:	8942      	ldrh	r2, [r0, #10]
 8007058:	4293      	cmp	r3, r2
 800705a:	da27      	bge.n	80070ac <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800705c:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800705e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8007062:	f7fc f8b6 	bl	80031d2 <lwip_htons>
 8007066:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8007068:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800706c:	f7fc f8b1 	bl	80031d2 <lwip_htons>
 8007070:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 8007072:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8007076:	4638      	mov	r0, r7
 8007078:	f7fc f8b0 	bl	80031dc <lwip_htonl>
 800707c:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800707e:	08a4      	lsrs	r4, r4, #2
 8007080:	3405      	adds	r4, #5
 8007082:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8007086:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800708a:	b2a0      	uxth	r0, r4
 800708c:	f7fc f8a1 	bl	80031d2 <lwip_htons>
 8007090:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8007092:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8007096:	f7fc f89c 	bl	80031d2 <lwip_htons>
 800709a:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	742b      	strb	r3, [r5, #16]
 80070a0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 80070a2:	74ab      	strb	r3, [r5, #18]
 80070a4:	74eb      	strb	r3, [r5, #19]
}
 80070a6:	4630      	mov	r0, r6
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <tcp_output_alloc_header_common+0x88>)
 80070ae:	f240 7223 	movw	r2, #1827	; 0x723
 80070b2:	4903      	ldr	r1, [pc, #12]	; (80070c0 <tcp_output_alloc_header_common+0x8c>)
 80070b4:	4803      	ldr	r0, [pc, #12]	; (80070c4 <tcp_output_alloc_header_common+0x90>)
 80070b6:	f002 ffeb 	bl	800a090 <iprintf>
 80070ba:	e7cf      	b.n	800705c <tcp_output_alloc_header_common+0x28>
 80070bc:	0800c43c 	.word	0x0800c43c
 80070c0:	0800c588 	.word	0x0800c588
 80070c4:	0800b1cc 	.word	0x0800b1cc

080070c8 <tcp_output_alloc_header>:
{
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b085      	sub	sp, #20
 80070cc:	460d      	mov	r5, r1
 80070ce:	4616      	mov	r6, r2
 80070d0:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80070d2:	4604      	mov	r4, r0
 80070d4:	b1a0      	cbz	r0, 8007100 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80070d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80070d8:	9303      	str	r3, [sp, #12]
 80070da:	2310      	movs	r3, #16
 80070dc:	9302      	str	r3, [sp, #8]
 80070de:	8b23      	ldrh	r3, [r4, #24]
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	8ae3      	ldrh	r3, [r4, #22]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	463b      	mov	r3, r7
 80070e8:	4632      	mov	r2, r6
 80070ea:	4629      	mov	r1, r5
 80070ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070ee:	f7ff ffa1 	bl	8007034 <tcp_output_alloc_header_common>
  if (p != NULL) {
 80070f2:	b118      	cbz	r0, 80070fc <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80070f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80070f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f8:	4413      	add	r3, r2
 80070fa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80070fc:	b005      	add	sp, #20
 80070fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <tcp_output_alloc_header+0x48>)
 8007102:	f240 7242 	movw	r2, #1858	; 0x742
 8007106:	4903      	ldr	r1, [pc, #12]	; (8007114 <tcp_output_alloc_header+0x4c>)
 8007108:	4803      	ldr	r0, [pc, #12]	; (8007118 <tcp_output_alloc_header+0x50>)
 800710a:	f002 ffc1 	bl	800a090 <iprintf>
 800710e:	e7e2      	b.n	80070d6 <tcp_output_alloc_header+0xe>
 8007110:	0800c43c 	.word	0x0800c43c
 8007114:	0800c5b8 	.word	0x0800c5b8
 8007118:	0800b1cc 	.word	0x0800b1cc

0800711c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711e:	b085      	sub	sp, #20
 8007120:	4604      	mov	r4, r0
 8007122:	4616      	mov	r6, r2
 8007124:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8007126:	460f      	mov	r7, r1
 8007128:	b1c9      	cbz	r1, 800715e <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800712a:	b374      	cbz	r4, 800718a <tcp_output_control_segment+0x6e>
 800712c:	7a20      	ldrb	r0, [r4, #8]
 800712e:	b9f0      	cbnz	r0, 800716e <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 8007130:	4628      	mov	r0, r5
 8007132:	f002 f859 	bl	80091e8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 8007136:	4602      	mov	r2, r0
 8007138:	b308      	cbz	r0, 800717e <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800713a:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800713c:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800713e:	9202      	str	r2, [sp, #8]
 8007140:	2206      	movs	r2, #6
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	9100      	str	r1, [sp, #0]
 8007146:	462a      	mov	r2, r5
 8007148:	4631      	mov	r1, r6
 800714a:	4638      	mov	r0, r7
 800714c:	f002 f9d8 	bl	8009500 <ip4_output_if>
 8007150:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8007152:	4638      	mov	r0, r7
 8007154:	f7fc fe0a 	bl	8003d6c <pbuf_free>
  return err;
}
 8007158:	4620      	mov	r0, r4
 800715a:	b005      	add	sp, #20
 800715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <tcp_output_control_segment+0x80>)
 8007160:	f240 7287 	movw	r2, #1927	; 0x787
 8007164:	490e      	ldr	r1, [pc, #56]	; (80071a0 <tcp_output_control_segment+0x84>)
 8007166:	480f      	ldr	r0, [pc, #60]	; (80071a4 <tcp_output_control_segment+0x88>)
 8007168:	f002 ff92 	bl	800a090 <iprintf>
 800716c:	e7dd      	b.n	800712a <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800716e:	f7fc fd0d 	bl	8003b8c <netif_get_by_index>
  if (netif == NULL) {
 8007172:	4602      	mov	r2, r0
 8007174:	2800      	cmp	r0, #0
 8007176:	d1e0      	bne.n	800713a <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 8007178:	f06f 0403 	mvn.w	r4, #3
 800717c:	e7e9      	b.n	8007152 <tcp_output_control_segment+0x36>
 800717e:	f06f 0403 	mvn.w	r4, #3
 8007182:	e7e6      	b.n	8007152 <tcp_output_control_segment+0x36>
 8007184:	f06f 0403 	mvn.w	r4, #3
 8007188:	e7e3      	b.n	8007152 <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800718a:	4628      	mov	r0, r5
 800718c:	f002 f82c 	bl	80091e8 <ip4_route>
  if (netif == NULL) {
 8007190:	4602      	mov	r2, r0
 8007192:	2800      	cmp	r0, #0
 8007194:	d0f6      	beq.n	8007184 <tcp_output_control_segment+0x68>
      tos = 0;
 8007196:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 8007198:	23ff      	movs	r3, #255	; 0xff
 800719a:	e7d0      	b.n	800713e <tcp_output_control_segment+0x22>
 800719c:	0800c43c 	.word	0x0800c43c
 80071a0:	0800c5e0 	.word	0x0800c5e0
 80071a4:	0800b1cc 	.word	0x0800b1cc

080071a8 <tcp_write>:
{
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	b091      	sub	sp, #68	; 0x44
 80071ae:	9107      	str	r1, [sp, #28]
 80071b0:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80071b8:	b1c0      	cbz	r0, 80071ec <tcp_write+0x44>
 80071ba:	4692      	mov	sl, r2
 80071bc:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80071be:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80071c0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bf28      	it	cs
 80071ca:	4613      	movcs	r3, r2
 80071cc:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bf08      	it	eq
 80071d2:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	b19b      	cbz	r3, 8007200 <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 80071d8:	7d03      	ldrb	r3, [r0, #20]
 80071da:	2b07      	cmp	r3, #7
 80071dc:	d01a      	beq.n	8007214 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 80071de:	3b02      	subs	r3, #2
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d916      	bls.n	8007214 <tcp_write+0x6c>
    return ERR_CONN;
 80071e6:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 80071ea:	e203      	b.n	80075f4 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80071ec:	4ba5      	ldr	r3, [pc, #660]	; (8007484 <tcp_write+0x2dc>)
 80071ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80071f2:	49a5      	ldr	r1, [pc, #660]	; (8007488 <tcp_write+0x2e0>)
 80071f4:	48a5      	ldr	r0, [pc, #660]	; (800748c <tcp_write+0x2e4>)
 80071f6:	f002 ff4b 	bl	800a090 <iprintf>
 80071fa:	f06f 000f 	mvn.w	r0, #15
 80071fe:	e1f9      	b.n	80075f4 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8007200:	4ba0      	ldr	r3, [pc, #640]	; (8007484 <tcp_write+0x2dc>)
 8007202:	f240 12ad 	movw	r2, #429	; 0x1ad
 8007206:	49a2      	ldr	r1, [pc, #648]	; (8007490 <tcp_write+0x2e8>)
 8007208:	48a0      	ldr	r0, [pc, #640]	; (800748c <tcp_write+0x2e4>)
 800720a:	f002 ff41 	bl	800a090 <iprintf>
 800720e:	f06f 000f 	mvn.w	r0, #15
 8007212:	e1ef      	b.n	80075f4 <tcp_write+0x44c>
  } else if (len == 0) {
 8007214:	f1ba 0f00 	cmp.w	sl, #0
 8007218:	d039      	beq.n	800728e <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800721a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800721e:	4553      	cmp	r3, sl
 8007220:	d310      	bcc.n	8007244 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8007222:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 8007226:	2b08      	cmp	r3, #8
 8007228:	d815      	bhi.n	8007256 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800722a:	b32b      	cbz	r3, 8007278 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800722c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007230:	bb6b      	cbnz	r3, 800728e <tcp_write+0xe6>
 8007232:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8007236:	b1bb      	cbz	r3, 8007268 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 8007238:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800723c:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 8007240:	464b      	mov	r3, r9
 8007242:	e02c      	b.n	800729e <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007244:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8007248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724c:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e1ce      	b.n	80075f4 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007256:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	e1c5      	b.n	80075f4 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8007268:	4b86      	ldr	r3, [pc, #536]	; (8007484 <tcp_write+0x2dc>)
 800726a:	f240 1255 	movw	r2, #341	; 0x155
 800726e:	4989      	ldr	r1, [pc, #548]	; (8007494 <tcp_write+0x2ec>)
 8007270:	4886      	ldr	r0, [pc, #536]	; (800748c <tcp_write+0x2e4>)
 8007272:	f002 ff0d 	bl	800a090 <iprintf>
 8007276:	e00a      	b.n	800728e <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007278:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800727c:	2b00      	cmp	r3, #0
 800727e:	d04f      	beq.n	8007320 <tcp_write+0x178>
 8007280:	4b80      	ldr	r3, [pc, #512]	; (8007484 <tcp_write+0x2dc>)
 8007282:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8007286:	4984      	ldr	r1, [pc, #528]	; (8007498 <tcp_write+0x2f0>)
 8007288:	4880      	ldr	r0, [pc, #512]	; (800748c <tcp_write+0x2e4>)
 800728a:	f002 ff01 	bl	800a090 <iprintf>
  queuelen = pcb->snd_queuelen;
 800728e:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 8007292:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 8007296:	f1b9 0f00 	cmp.w	r9, #0
 800729a:	d047      	beq.n	800732c <tcp_write+0x184>
 800729c:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1fb      	bne.n	800729e <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80072a6:	4699      	mov	r9, r3
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	7a9c      	ldrb	r4, [r3, #10]
 80072ac:	00a4      	lsls	r4, r4, #2
 80072ae:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80072b2:	891b      	ldrh	r3, [r3, #8]
 80072b4:	4423      	add	r3, r4
 80072b6:	459b      	cmp	fp, r3
 80072b8:	db4f      	blt.n	800735a <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	891b      	ldrh	r3, [r3, #8]
 80072be:	ebab 0303 	sub.w	r3, fp, r3
 80072c2:	1b1c      	subs	r4, r3, r4
 80072c4:	b2a3      	uxth	r3, r4
 80072c6:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 80072c8:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 80072cc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d05b      	beq.n	800738c <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80072d4:	429c      	cmp	r4, r3
 80072d6:	d848      	bhi.n	800736a <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80072d8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80072dc:	461c      	mov	r4, r3
 80072de:	4553      	cmp	r3, sl
 80072e0:	bf28      	it	cs
 80072e2:	4654      	movcs	r4, sl
 80072e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072e6:	4294      	cmp	r4, r2
 80072e8:	bf28      	it	cs
 80072ea:	4614      	movcs	r4, r2
 80072ec:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 80072ee:	1b1b      	subs	r3, r3, r4
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80072f6:	1b12      	subs	r2, r2, r4
 80072f8:	b292      	uxth	r2, r2
 80072fa:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8082 	beq.w	8007406 <tcp_write+0x25e>
 8007302:	45a2      	cmp	sl, r4
 8007304:	d139      	bne.n	800737a <tcp_write+0x1d2>
 8007306:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 8007308:	2c00      	cmp	r4, #0
 800730a:	f000 8266 	beq.w	80077da <tcp_write+0x632>
 800730e:	46cb      	mov	fp, r9
 8007310:	2300      	movs	r3, #0
 8007312:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 8007314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007316:	685d      	ldr	r5, [r3, #4]
 8007318:	2d00      	cmp	r5, #0
 800731a:	f040 8187 	bne.w	800762c <tcp_write+0x484>
 800731e:	e198      	b.n	8007652 <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8007320:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1ab      	bne.n	8007280 <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 8007328:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800732c:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 8007330:	2c00      	cmp	r4, #0
 8007332:	f040 8094 	bne.w	800745e <tcp_write+0x2b6>
  u16_t extendlen = 0;
 8007336:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 8007338:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800733e:	4699      	mov	r9, r3
  while (pos < len) {
 8007340:	45a2      	cmp	sl, r4
 8007342:	f240 816e 	bls.w	8007622 <tcp_write+0x47a>
 8007346:	2300      	movs	r3, #0
 8007348:	9306      	str	r3, [sp, #24]
 800734a:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007358:	e110      	b.n	800757c <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800735a:	4b4a      	ldr	r3, [pc, #296]	; (8007484 <tcp_write+0x2dc>)
 800735c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007360:	494e      	ldr	r1, [pc, #312]	; (800749c <tcp_write+0x2f4>)
 8007362:	484a      	ldr	r0, [pc, #296]	; (800748c <tcp_write+0x2e4>)
 8007364:	f002 fe94 	bl	800a090 <iprintf>
 8007368:	e7a7      	b.n	80072ba <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800736a:	4b46      	ldr	r3, [pc, #280]	; (8007484 <tcp_write+0x2dc>)
 800736c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8007370:	494b      	ldr	r1, [pc, #300]	; (80074a0 <tcp_write+0x2f8>)
 8007372:	4846      	ldr	r0, [pc, #280]	; (800748c <tcp_write+0x2e4>)
 8007374:	f002 fe8c 	bl	800a090 <iprintf>
 8007378:	e7ae      	b.n	80072d8 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800737a:	4b42      	ldr	r3, [pc, #264]	; (8007484 <tcp_write+0x2dc>)
 800737c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007380:	4948      	ldr	r1, [pc, #288]	; (80074a4 <tcp_write+0x2fc>)
 8007382:	4842      	ldr	r0, [pc, #264]	; (800748c <tcp_write+0x2e4>)
 8007384:	f002 fe84 	bl	800a090 <iprintf>
 8007388:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800738a:	e000      	b.n	800738e <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800738c:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800738e:	45a2      	cmp	sl, r4
 8007390:	d9ba      	bls.n	8007308 <tcp_write+0x160>
 8007392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007394:	2a00      	cmp	r2, #0
 8007396:	d070      	beq.n	800747a <tcp_write+0x2d2>
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	891b      	ldrh	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d06e      	beq.n	800747e <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80073a0:	ebaa 0704 	sub.w	r7, sl, r4
 80073a4:	4297      	cmp	r7, r2
 80073a6:	bfa8      	it	ge
 80073a8:	4617      	movge	r7, r2
 80073aa:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80073ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ae:	f013 0f01 	tst.w	r3, #1
 80073b2:	d12a      	bne.n	800740a <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80073ba:	464a      	mov	r2, r9
 80073bc:	4613      	mov	r3, r2
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	d1fb      	bne.n	80073bc <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80073c4:	4691      	mov	r9, r2
 80073c6:	7b1a      	ldrb	r2, [r3, #12]
 80073c8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80073cc:	d105      	bne.n	80073da <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80073ce:	895a      	ldrh	r2, [r3, #10]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80073d4:	9a07      	ldr	r2, [sp, #28]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d035      	beq.n	8007446 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80073da:	2201      	movs	r2, #1
 80073dc:	4629      	mov	r1, r5
 80073de:	2000      	movs	r0, #0
 80073e0:	f7fc fd2e 	bl	8003e40 <pbuf_alloc>
 80073e4:	4681      	mov	r9, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f000 81d6 	beq.w	8007798 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	4423      	add	r3, r4
 80073f0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 80073f2:	f7fc fe15 	bl	8004020 <pbuf_clen>
 80073f6:	4406      	add	r6, r0
 80073f8:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 80073fe:	4425      	add	r5, r4
 8007400:	940d      	str	r4, [sp, #52]	; 0x34
 8007402:	b2ac      	uxth	r4, r5
 8007404:	e79c      	b.n	8007340 <tcp_write+0x198>
 8007406:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007408:	e7c1      	b.n	800738e <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800740a:	2301      	movs	r3, #1
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	f8cd 8000 	str.w	r8, [sp]
 8007416:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800741a:	4629      	mov	r1, r5
 800741c:	2000      	movs	r0, #0
 800741e:	f7ff fd39 	bl	8006e94 <tcp_pbuf_prealloc>
 8007422:	4681      	mov	r9, r0
 8007424:	2800      	cmp	r0, #0
 8007426:	f000 81b7 	beq.w	8007798 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800742a:	462a      	mov	r2, r5
 800742c:	9b07      	ldr	r3, [sp, #28]
 800742e:	1919      	adds	r1, r3, r4
 8007430:	6840      	ldr	r0, [r0, #4]
 8007432:	f002 fe17 	bl	800a064 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8007436:	4648      	mov	r0, r9
 8007438:	f7fc fdf2 	bl	8004020 <pbuf_clen>
 800743c:	4406      	add	r6, r0
 800743e:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	930b      	str	r3, [sp, #44]	; 0x2c
 8007444:	e7db      	b.n	80073fe <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8007446:	b90c      	cbnz	r4, 800744c <tcp_write+0x2a4>
          extendlen = seglen;
 8007448:	950b      	str	r5, [sp, #44]	; 0x2c
 800744a:	e7d8      	b.n	80073fe <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <tcp_write+0x2dc>)
 800744e:	f240 2231 	movw	r2, #561	; 0x231
 8007452:	4915      	ldr	r1, [pc, #84]	; (80074a8 <tcp_write+0x300>)
 8007454:	480d      	ldr	r0, [pc, #52]	; (800748c <tcp_write+0x2e4>)
 8007456:	f002 fe1b 	bl	800a090 <iprintf>
          extendlen = seglen;
 800745a:	950b      	str	r5, [sp, #44]	; 0x2c
 800745c:	e7cf      	b.n	80073fe <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <tcp_write+0x2dc>)
 8007460:	f240 224a 	movw	r2, #586	; 0x24a
 8007464:	4911      	ldr	r1, [pc, #68]	; (80074ac <tcp_write+0x304>)
 8007466:	4809      	ldr	r0, [pc, #36]	; (800748c <tcp_write+0x2e4>)
 8007468:	f002 fe12 	bl	800a090 <iprintf>
  u16_t extendlen = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 8007470:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 8007472:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007474:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 8007476:	4699      	mov	r9, r3
 8007478:	e762      	b.n	8007340 <tcp_write+0x198>
 800747a:	940d      	str	r4, [sp, #52]	; 0x34
 800747c:	e763      	b.n	8007346 <tcp_write+0x19e>
 800747e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007480:	940d      	str	r4, [sp, #52]	; 0x34
 8007482:	e760      	b.n	8007346 <tcp_write+0x19e>
 8007484:	0800c43c 	.word	0x0800c43c
 8007488:	0800c60c 	.word	0x0800c60c
 800748c:	0800b1cc 	.word	0x0800b1cc
 8007490:	0800c624 	.word	0x0800c624
 8007494:	0800c658 	.word	0x0800c658
 8007498:	0800c694 	.word	0x0800c694
 800749c:	0800c6c8 	.word	0x0800c6c8
 80074a0:	0800c6e0 	.word	0x0800c6e0
 80074a4:	0800c700 	.word	0x0800c700
 80074a8:	0800c720 	.word	0x0800c720
 80074ac:	0800c74c 	.word	0x0800c74c
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80074b0:	9b06      	ldr	r3, [sp, #24]
 80074b2:	fab3 f383 	clz	r3, r3
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	9302      	str	r3, [sp, #8]
 80074ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	f8cd 8000 	str.w	r8, [sp]
 80074c2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80074c6:	465a      	mov	r2, fp
 80074c8:	4629      	mov	r1, r5
 80074ca:	2036      	movs	r0, #54	; 0x36
 80074cc:	f7ff fce2 	bl	8006e94 <tcp_pbuf_prealloc>
 80074d0:	4607      	mov	r7, r0
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f000 8143 	beq.w	800775e <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80074d8:	8943      	ldrh	r3, [r0, #10]
 80074da:	42ab      	cmp	r3, r5
 80074dc:	d306      	bcc.n	80074ec <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80074de:	462a      	mov	r2, r5
 80074e0:	9b07      	ldr	r3, [sp, #28]
 80074e2:	1919      	adds	r1, r3, r4
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 fdbd 	bl	800a064 <memcpy>
 80074ea:	e026      	b.n	800753a <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80074ec:	4bae      	ldr	r3, [pc, #696]	; (80077a8 <tcp_write+0x600>)
 80074ee:	f240 2266 	movw	r2, #614	; 0x266
 80074f2:	49ae      	ldr	r1, [pc, #696]	; (80077ac <tcp_write+0x604>)
 80074f4:	48ae      	ldr	r0, [pc, #696]	; (80077b0 <tcp_write+0x608>)
 80074f6:	f002 fdcb 	bl	800a090 <iprintf>
 80074fa:	e7f0      	b.n	80074de <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80074fc:	4baa      	ldr	r3, [pc, #680]	; (80077a8 <tcp_write+0x600>)
 80074fe:	f240 2271 	movw	r2, #625	; 0x271
 8007502:	49ac      	ldr	r1, [pc, #688]	; (80077b4 <tcp_write+0x60c>)
 8007504:	48aa      	ldr	r0, [pc, #680]	; (80077b0 <tcp_write+0x608>)
 8007506:	f002 fdc3 	bl	800a090 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800750a:	2201      	movs	r2, #1
 800750c:	4629      	mov	r1, r5
 800750e:	2036      	movs	r0, #54	; 0x36
 8007510:	f7fc fc96 	bl	8003e40 <pbuf_alloc>
 8007514:	4681      	mov	r9, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	f000 8124 	beq.w	8007764 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	4423      	add	r3, r4
 8007520:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007522:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007526:	2100      	movs	r1, #0
 8007528:	2036      	movs	r0, #54	; 0x36
 800752a:	f7fc fc89 	bl	8003e40 <pbuf_alloc>
 800752e:	4607      	mov	r7, r0
 8007530:	2800      	cmp	r0, #0
 8007532:	d032      	beq.n	800759a <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 8007534:	4649      	mov	r1, r9
 8007536:	f7fc fd97 	bl	8004068 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800753a:	4638      	mov	r0, r7
 800753c:	f7fc fd70 	bl	8004020 <pbuf_clen>
 8007540:	4406      	add	r6, r0
 8007542:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8007544:	2e09      	cmp	r6, #9
 8007546:	d82e      	bhi.n	80075a6 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007548:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800754c:	2200      	movs	r2, #0
 800754e:	9200      	str	r2, [sp, #0]
 8007550:	4423      	add	r3, r4
 8007552:	4639      	mov	r1, r7
 8007554:	4640      	mov	r0, r8
 8007556:	f7ff fcf9 	bl	8006f4c <tcp_create_segment>
 800755a:	4607      	mov	r7, r0
 800755c:	2800      	cmp	r0, #0
 800755e:	f000 8104 	beq.w	800776a <tcp_write+0x5c2>
    if (queue == NULL) {
 8007562:	9b06      	ldr	r3, [sp, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d050      	beq.n	800760a <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d045      	beq.n	80075fa <tcp_write+0x452>
      prev_seg->next = seg;
 800756e:	9b05      	ldr	r3, [sp, #20]
 8007570:	601f      	str	r7, [r3, #0]
    pos += seglen;
 8007572:	442c      	add	r4, r5
 8007574:	b2a4      	uxth	r4, r4
  while (pos < len) {
 8007576:	45a2      	cmp	sl, r4
 8007578:	d949      	bls.n	800760e <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800757a:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800757c:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 8007580:	b2ad      	uxth	r5, r5
 8007582:	455d      	cmp	r5, fp
 8007584:	bf28      	it	cs
 8007586:	465d      	movcs	r5, fp
 8007588:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d18f      	bne.n	80074b0 <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8007590:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0b8      	beq.n	800750a <tcp_write+0x362>
 8007598:	e7b0      	b.n	80074fc <tcp_write+0x354>
        pbuf_free(p2);
 800759a:	4648      	mov	r0, r9
 800759c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80075a0:	f7fc fbe4 	bl	8003d6c <pbuf_free>
        goto memerr;
 80075a4:	e004      	b.n	80075b0 <tcp_write+0x408>
      pbuf_free(p);
 80075a6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7fc fbde 	bl	8003d6c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80075b0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80075b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b8:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	d002      	beq.n	80075c8 <tcp_write+0x420>
    pbuf_free(concat_p);
 80075c2:	4648      	mov	r0, r9
 80075c4:	f7fc fbd2 	bl	8003d6c <pbuf_free>
  if (queue != NULL) {
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	b113      	cbz	r3, 80075d2 <tcp_write+0x42a>
    tcp_segs_free(queue);
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fd f880 	bl	80046d2 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80075d2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80d8 	beq.w	800778c <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80075dc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 80d6 	bne.w	8007792 <tcp_write+0x5ea>
 80075e6:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80c0 	beq.w	8007770 <tcp_write+0x5c8>
  return ERR_MEM;
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80075f4:	b011      	add	sp, #68	; 0x44
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80075fa:	4b6b      	ldr	r3, [pc, #428]	; (80077a8 <tcp_write+0x600>)
 80075fc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007600:	496d      	ldr	r1, [pc, #436]	; (80077b8 <tcp_write+0x610>)
 8007602:	486b      	ldr	r0, [pc, #428]	; (80077b0 <tcp_write+0x608>)
 8007604:	f002 fd44 	bl	800a090 <iprintf>
 8007608:	e7b1      	b.n	800756e <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800760a:	9006      	str	r0, [sp, #24]
 800760c:	e7b1      	b.n	8007572 <tcp_write+0x3ca>
 800760e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 8007612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	d052      	beq.n	80076be <tcp_write+0x516>
 8007618:	461c      	mov	r4, r3
 800761a:	46cb      	mov	fp, r9
 800761c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007620:	e678      	b.n	8007314 <tcp_write+0x16c>
  while (pos < len) {
 8007622:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007624:	2300      	movs	r3, #0
 8007626:	9306      	str	r3, [sp, #24]
 8007628:	e7f3      	b.n	8007612 <tcp_write+0x46a>
  if (oversize_used > 0) {
 800762a:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800762c:	892b      	ldrh	r3, [r5, #8]
 800762e:	4423      	add	r3, r4
 8007630:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f8      	bne.n	800762a <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8007638:	896b      	ldrh	r3, [r5, #10]
 800763a:	6868      	ldr	r0, [r5, #4]
 800763c:	4622      	mov	r2, r4
 800763e:	9907      	ldr	r1, [sp, #28]
 8007640:	4418      	add	r0, r3
 8007642:	f002 fd0f 	bl	800a064 <memcpy>
        p->len += oversize_used;
 8007646:	896b      	ldrh	r3, [r5, #10]
 8007648:	4423      	add	r3, r4
 800764a:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1eb      	bne.n	800762a <tcp_write+0x482>
    last_unsent->len += oversize_used;
 8007652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007654:	8913      	ldrh	r3, [r2, #8]
 8007656:	441c      	add	r4, r3
 8007658:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800765a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800765e:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 8007662:	f1bb 0f00 	cmp.w	fp, #0
 8007666:	f000 80af 	beq.w	80077c8 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 800766a:	4659      	mov	r1, fp
 800766c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800766e:	6860      	ldr	r0, [r4, #4]
 8007670:	f7fc fcfa 	bl	8004068 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8007674:	8923      	ldrh	r3, [r4, #8]
 8007676:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800767a:	4413      	add	r3, r2
 800767c:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 8007684:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8007688:	4453      	add	r3, sl
 800768a:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800768e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8007692:	eba3 0a0a 	sub.w	sl, r3, sl
 8007696:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800769a:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800769e:	b11e      	cbz	r6, 80076a8 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 80076a0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d045      	beq.n	8007734 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80076a8:	2f00      	cmp	r7, #0
 80076aa:	d06b      	beq.n	8007784 <tcp_write+0x5dc>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d06a      	beq.n	8007788 <tcp_write+0x5e0>
 80076b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b4:	f012 0f02 	tst.w	r2, #2
 80076b8:	d048      	beq.n	800774c <tcp_write+0x5a4>
  return ERR_OK;
 80076ba:	2000      	movs	r0, #0
 80076bc:	e79a      	b.n	80075f4 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 80076be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80076c2:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 80076c6:	f1b9 0f00 	cmp.w	r9, #0
 80076ca:	d010      	beq.n	80076ee <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	b11b      	cbz	r3, 80076d8 <tcp_write+0x530>
 80076d0:	46cb      	mov	fp, r9
 80076d2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80076d6:	e7c8      	b.n	800766a <tcp_write+0x4c2>
 80076d8:	4b33      	ldr	r3, [pc, #204]	; (80077a8 <tcp_write+0x600>)
 80076da:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80076de:	4937      	ldr	r1, [pc, #220]	; (80077bc <tcp_write+0x614>)
 80076e0:	4833      	ldr	r0, [pc, #204]	; (80077b0 <tcp_write+0x608>)
 80076e2:	f002 fcd5 	bl	800a090 <iprintf>
 80076e6:	46cb      	mov	fp, r9
 80076e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80076ec:	e7bd      	b.n	800766a <tcp_write+0x4c2>
 80076ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80076f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80076f4:	e075      	b.n	80077e2 <tcp_write+0x63a>
 80076f6:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80076f8:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <tcp_write+0x600>)
 80076fa:	f240 22e6 	movw	r2, #742	; 0x2e6
 80076fe:	4930      	ldr	r1, [pc, #192]	; (80077c0 <tcp_write+0x618>)
 8007700:	482b      	ldr	r0, [pc, #172]	; (80077b0 <tcp_write+0x608>)
 8007702:	f002 fcc5 	bl	800a090 <iprintf>
 8007706:	e076      	b.n	80077f6 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007708:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800770a:	890b      	ldrh	r3, [r1, #8]
 800770c:	4403      	add	r3, r0
 800770e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007710:	6813      	ldr	r3, [r2, #0]
 8007712:	4611      	mov	r1, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f7      	bne.n	8007708 <tcp_write+0x560>
    p->tot_len += extendlen;
 8007718:	8913      	ldrh	r3, [r2, #8]
 800771a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771c:	440b      	add	r3, r1
 800771e:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8007720:	8953      	ldrh	r3, [r2, #10]
 8007722:	440b      	add	r3, r1
 8007724:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8007726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007728:	8913      	ldrh	r3, [r2, #8]
 800772a:	440b      	add	r3, r1
 800772c:	8113      	strh	r3, [r2, #8]
 800772e:	e7a6      	b.n	800767e <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007730:	460a      	mov	r2, r1
 8007732:	e7f1      	b.n	8007718 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 8007734:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1b5      	bne.n	80076a8 <tcp_write+0x500>
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <tcp_write+0x600>)
 800773e:	f240 3212 	movw	r2, #786	; 0x312
 8007742:	4920      	ldr	r1, [pc, #128]	; (80077c4 <tcp_write+0x61c>)
 8007744:	481a      	ldr	r0, [pc, #104]	; (80077b0 <tcp_write+0x608>)
 8007746:	f002 fca3 	bl	800a090 <iprintf>
 800774a:	e7ad      	b.n	80076a8 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800774c:	899c      	ldrh	r4, [r3, #12]
 800774e:	2008      	movs	r0, #8
 8007750:	f7fb fd3f 	bl	80031d2 <lwip_htons>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4304      	orrs	r4, r0
 8007758:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800775a:	2000      	movs	r0, #0
 800775c:	e74a      	b.n	80075f4 <tcp_write+0x44c>
 800775e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007762:	e725      	b.n	80075b0 <tcp_write+0x408>
 8007764:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007768:	e722      	b.n	80075b0 <tcp_write+0x408>
 800776a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800776e:	e71f      	b.n	80075b0 <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8007770:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <tcp_write+0x600>)
 8007772:	f240 3227 	movw	r2, #807	; 0x327
 8007776:	4913      	ldr	r1, [pc, #76]	; (80077c4 <tcp_write+0x61c>)
 8007778:	480d      	ldr	r0, [pc, #52]	; (80077b0 <tcp_write+0x608>)
 800777a:	f002 fc89 	bl	800a090 <iprintf>
  return ERR_MEM;
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	e737      	b.n	80075f4 <tcp_write+0x44c>
  return ERR_OK;
 8007784:	2000      	movs	r0, #0
 8007786:	e735      	b.n	80075f4 <tcp_write+0x44c>
 8007788:	2000      	movs	r0, #0
 800778a:	e733      	b.n	80075f4 <tcp_write+0x44c>
  return ERR_MEM;
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e730      	b.n	80075f4 <tcp_write+0x44c>
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	e72d      	b.n	80075f4 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007798:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800779c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a0:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 80077a4:	e715      	b.n	80075d2 <tcp_write+0x42a>
 80077a6:	bf00      	nop
 80077a8:	0800c43c 	.word	0x0800c43c
 80077ac:	0800c77c 	.word	0x0800c77c
 80077b0:	0800b1cc 	.word	0x0800b1cc
 80077b4:	0800c7bc 	.word	0x0800c7bc
 80077b8:	0800c7cc 	.word	0x0800c7cc
 80077bc:	0800c7e0 	.word	0x0800c7e0
 80077c0:	0800c818 	.word	0x0800c818
 80077c4:	0800c850 	.word	0x0800c850
  } else if (extendlen > 0) {
 80077c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ca:	b983      	cbnz	r3, 80077ee <tcp_write+0x646>
  if (last_unsent == NULL) {
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f af55 	bne.w	800767e <tcp_write+0x4d6>
    pcb->unsent = queue;
 80077d4:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 80077d8:	e754      	b.n	8007684 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 80077da:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80077de:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 80077e2:	2c00      	cmp	r4, #0
 80077e4:	d0f2      	beq.n	80077cc <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d084      	beq.n	80076f6 <tcp_write+0x54e>
 80077ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d080      	beq.n	80076f8 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	6859      	ldr	r1, [r3, #4]
 80077fa:	680a      	ldr	r2, [r1, #0]
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	d097      	beq.n	8007730 <tcp_write+0x588>
 8007800:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007802:	e782      	b.n	800770a <tcp_write+0x562>

08007804 <tcp_split_unsent_seg>:
{
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	b083      	sub	sp, #12
 800780a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800780c:	4607      	mov	r7, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	d037      	beq.n	8007882 <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 8007812:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 8007814:	2d00      	cmp	r5, #0
 8007816:	f000 80b7 	beq.w	8007988 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800781a:	2c00      	cmp	r4, #0
 800781c:	d039      	beq.n	8007892 <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 800781e:	892b      	ldrh	r3, [r5, #8]
 8007820:	42a3      	cmp	r3, r4
 8007822:	f240 80b4 	bls.w	800798e <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8007826:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007828:	42a3      	cmp	r3, r4
 800782a:	d33c      	bcc.n	80078a6 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 800782c:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007830:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8007834:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 8007838:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800783c:	ebaa 0604 	sub.w	r6, sl, r4
 8007840:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8007842:	eb06 010b 	add.w	r1, r6, fp
 8007846:	f44f 7220 	mov.w	r2, #640	; 0x280
 800784a:	b289      	uxth	r1, r1
 800784c:	2036      	movs	r0, #54	; 0x36
 800784e:	f7fc faf7 	bl	8003e40 <pbuf_alloc>
  if (p == NULL) {
 8007852:	4680      	mov	r8, r0
 8007854:	2800      	cmp	r0, #0
 8007856:	f000 809e 	beq.w	8007996 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 800785a:	6868      	ldr	r0, [r5, #4]
 800785c:	8903      	ldrh	r3, [r0, #8]
 800785e:	892a      	ldrh	r2, [r5, #8]
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8007864:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007868:	b29b      	uxth	r3, r3
 800786a:	4632      	mov	r2, r6
 800786c:	4459      	add	r1, fp
 800786e:	f7fc fce3 	bl	8004238 <pbuf_copy_partial>
 8007872:	42b0      	cmp	r0, r6
 8007874:	d029      	beq.n	80078ca <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 8007876:	4640      	mov	r0, r8
 8007878:	f7fc fa78 	bl	8003d6c <pbuf_free>
  return ERR_MEM;
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e086      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8007882:	4b46      	ldr	r3, [pc, #280]	; (800799c <tcp_split_unsent_seg+0x198>)
 8007884:	f240 324b 	movw	r2, #843	; 0x34b
 8007888:	4945      	ldr	r1, [pc, #276]	; (80079a0 <tcp_split_unsent_seg+0x19c>)
 800788a:	4846      	ldr	r0, [pc, #280]	; (80079a4 <tcp_split_unsent_seg+0x1a0>)
 800788c:	f002 fc00 	bl	800a090 <iprintf>
 8007890:	e7bf      	b.n	8007812 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8007892:	4b42      	ldr	r3, [pc, #264]	; (800799c <tcp_split_unsent_seg+0x198>)
 8007894:	f240 3253 	movw	r2, #851	; 0x353
 8007898:	4943      	ldr	r1, [pc, #268]	; (80079a8 <tcp_split_unsent_seg+0x1a4>)
 800789a:	4842      	ldr	r0, [pc, #264]	; (80079a4 <tcp_split_unsent_seg+0x1a0>)
 800789c:	f002 fbf8 	bl	800a090 <iprintf>
    return ERR_VAL;
 80078a0:	f06f 0005 	mvn.w	r0, #5
 80078a4:	e074      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80078a6:	4b3d      	ldr	r3, [pc, #244]	; (800799c <tcp_split_unsent_seg+0x198>)
 80078a8:	f240 325b 	movw	r2, #859	; 0x35b
 80078ac:	493f      	ldr	r1, [pc, #252]	; (80079ac <tcp_split_unsent_seg+0x1a8>)
 80078ae:	483d      	ldr	r0, [pc, #244]	; (80079a4 <tcp_split_unsent_seg+0x1a0>)
 80078b0:	f002 fbee 	bl	800a090 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80078b4:	892b      	ldrh	r3, [r5, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1b8      	bne.n	800782c <tcp_split_unsent_seg+0x28>
 80078ba:	4b38      	ldr	r3, [pc, #224]	; (800799c <tcp_split_unsent_seg+0x198>)
 80078bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80078c0:	493b      	ldr	r1, [pc, #236]	; (80079b0 <tcp_split_unsent_seg+0x1ac>)
 80078c2:	4838      	ldr	r0, [pc, #224]	; (80079a4 <tcp_split_unsent_seg+0x1a0>)
 80078c4:	f002 fbe4 	bl	800a090 <iprintf>
 80078c8:	e7b0      	b.n	800782c <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80078ca:	68eb      	ldr	r3, [r5, #12]
 80078cc:	8998      	ldrh	r0, [r3, #12]
 80078ce:	f7fb fc80 	bl	80031d2 <lwip_htons>
 80078d2:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 80078d4:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80078d8:	bf0e      	itee	eq
 80078da:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 80078de:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80078e2:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 80078e6:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 80078ea:	bf1c      	itt	ne
 80078ec:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 80078f0:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80078f4:	68eb      	ldr	r3, [r5, #12]
 80078f6:	6858      	ldr	r0, [r3, #4]
 80078f8:	f7fb fc70 	bl	80031dc <lwip_htonl>
 80078fc:	f8cd 9000 	str.w	r9, [sp]
 8007900:	1823      	adds	r3, r4, r0
 8007902:	465a      	mov	r2, fp
 8007904:	4641      	mov	r1, r8
 8007906:	4638      	mov	r0, r7
 8007908:	f7ff fb20 	bl	8006f4c <tcp_create_segment>
  if (seg == NULL) {
 800790c:	4681      	mov	r9, r0
 800790e:	2800      	cmp	r0, #0
 8007910:	d0b1      	beq.n	8007876 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8007912:	6868      	ldr	r0, [r5, #4]
 8007914:	f7fc fb84 	bl	8004020 <pbuf_clen>
 8007918:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800791c:	1a1b      	subs	r3, r3, r0
 800791e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8007922:	6868      	ldr	r0, [r5, #4]
 8007924:	eba4 040a 	sub.w	r4, r4, sl
 8007928:	b2a4      	uxth	r4, r4
 800792a:	8901      	ldrh	r1, [r0, #8]
 800792c:	4421      	add	r1, r4
 800792e:	b289      	uxth	r1, r1
 8007930:	f7fc fb16 	bl	8003f60 <pbuf_realloc>
  useg->len -= remainder;
 8007934:	892b      	ldrh	r3, [r5, #8]
 8007936:	441c      	add	r4, r3
 8007938:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800793a:	68eb      	ldr	r3, [r5, #12]
 800793c:	899c      	ldrh	r4, [r3, #12]
 800793e:	4630      	mov	r0, r6
 8007940:	f7fb fc47 	bl	80031d2 <lwip_htons>
 8007944:	68eb      	ldr	r3, [r5, #12]
 8007946:	4304      	orrs	r4, r0
 8007948:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800794a:	6868      	ldr	r0, [r5, #4]
 800794c:	f7fc fb68 	bl	8004020 <pbuf_clen>
 8007950:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007954:	4418      	add	r0, r3
 8007956:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800795a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800795e:	f7fc fb5f 	bl	8004020 <pbuf_clen>
 8007962:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007966:	4418      	add	r0, r3
 8007968:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 8007972:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 8007976:	f8d9 3000 	ldr.w	r3, [r9]
 800797a:	b10b      	cbz	r3, 8007980 <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800797c:	2000      	movs	r0, #0
 800797e:	e007      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 8007980:	2000      	movs	r0, #0
 8007982:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8007986:	e003      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e000      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800798e:	2000      	movs	r0, #0
}
 8007990:	b003      	add	sp, #12
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e7f9      	b.n	8007990 <tcp_split_unsent_seg+0x18c>
 800799c:	0800c43c 	.word	0x0800c43c
 80079a0:	0800c870 	.word	0x0800c870
 80079a4:	0800b1cc 	.word	0x0800b1cc
 80079a8:	0800c894 	.word	0x0800c894
 80079ac:	0800c8b8 	.word	0x0800c8b8
 80079b0:	0800c8c8 	.word	0x0800c8c8

080079b4 <tcp_enqueue_flags>:
{
 80079b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079b8:	b083      	sub	sp, #12
 80079ba:	4604      	mov	r4, r0
 80079bc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80079be:	f011 0703 	ands.w	r7, r1, #3
 80079c2:	d048      	beq.n	8007a56 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d04e      	beq.n	8007a66 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 80079c8:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80079cc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80079d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80079d4:	4641      	mov	r1, r8
 80079d6:	2036      	movs	r0, #54	; 0x36
 80079d8:	f7fc fa32 	bl	8003e40 <pbuf_alloc>
 80079dc:	4681      	mov	r9, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d049      	beq.n	8007a76 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80079e2:	8943      	ldrh	r3, [r0, #10]
 80079e4:	4543      	cmp	r3, r8
 80079e6:	d34d      	bcc.n	8007a84 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80079e8:	9600      	str	r6, [sp, #0]
 80079ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80079ec:	462a      	mov	r2, r5
 80079ee:	4649      	mov	r1, r9
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7ff faab 	bl	8006f4c <tcp_create_segment>
 80079f6:	4606      	mov	r6, r0
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d04b      	beq.n	8007a94 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80079fc:	68c3      	ldr	r3, [r0, #12]
 80079fe:	f013 0f03 	tst.w	r3, #3
 8007a02:	d14e      	bne.n	8007aa2 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007a04:	8933      	ldrh	r3, [r6, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d153      	bne.n	8007ab2 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 8007a0a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d058      	beq.n	8007ac2 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007a10:	461a      	mov	r2, r3
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1fb      	bne.n	8007a10 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 8007a18:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007a20:	b117      	cbz	r7, 8007a28 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 8007a22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007a24:	3301      	adds	r3, #1
 8007a26:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8007a28:	f015 0f01 	tst.w	r5, #1
 8007a2c:	d003      	beq.n	8007a36 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 8007a2e:	8b63      	ldrh	r3, [r4, #26]
 8007a30:	f043 0320 	orr.w	r3, r3, #32
 8007a34:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007a36:	6870      	ldr	r0, [r6, #4]
 8007a38:	f7fc faf2 	bl	8004020 <pbuf_clen>
 8007a3c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007a40:	4418      	add	r0, r3
 8007a42:	b280      	uxth	r0, r0
 8007a44:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d049      	beq.n	8007ae0 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007a4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d039      	beq.n	8007ac6 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 8007a52:	2000      	movs	r0, #0
 8007a54:	e045      	b.n	8007ae2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007a58:	f240 4211 	movw	r2, #1041	; 0x411
 8007a5c:	4923      	ldr	r1, [pc, #140]	; (8007aec <tcp_enqueue_flags+0x138>)
 8007a5e:	4824      	ldr	r0, [pc, #144]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007a60:	f002 fb16 	bl	800a090 <iprintf>
 8007a64:	e7ae      	b.n	80079c4 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007a68:	f240 4213 	movw	r2, #1043	; 0x413
 8007a6c:	4921      	ldr	r1, [pc, #132]	; (8007af4 <tcp_enqueue_flags+0x140>)
 8007a6e:	4820      	ldr	r0, [pc, #128]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007a70:	f002 fb0e 	bl	800a090 <iprintf>
 8007a74:	e7a8      	b.n	80079c8 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007a76:	8b63      	ldrh	r3, [r4, #26]
 8007a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a7c:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	e02e      	b.n	8007ae2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007a84:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007a86:	f240 4239 	movw	r2, #1081	; 0x439
 8007a8a:	491b      	ldr	r1, [pc, #108]	; (8007af8 <tcp_enqueue_flags+0x144>)
 8007a8c:	4818      	ldr	r0, [pc, #96]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007a8e:	f002 faff 	bl	800a090 <iprintf>
 8007a92:	e7a9      	b.n	80079e8 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007a94:	8b63      	ldrh	r3, [r4, #26]
 8007a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a9a:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	e01f      	b.n	8007ae2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007aa4:	f240 4242 	movw	r2, #1090	; 0x442
 8007aa8:	4914      	ldr	r1, [pc, #80]	; (8007afc <tcp_enqueue_flags+0x148>)
 8007aaa:	4811      	ldr	r0, [pc, #68]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007aac:	f002 faf0 	bl	800a090 <iprintf>
 8007ab0:	e7a8      	b.n	8007a04 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007ab4:	f240 4243 	movw	r2, #1091	; 0x443
 8007ab8:	4911      	ldr	r1, [pc, #68]	; (8007b00 <tcp_enqueue_flags+0x14c>)
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007abc:	f002 fae8 	bl	800a090 <iprintf>
 8007ac0:	e7a3      	b.n	8007a0a <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 8007ac2:	66e6      	str	r6, [r4, #108]	; 0x6c
 8007ac4:	e7a9      	b.n	8007a1a <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007ac6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007ac8:	b10b      	cbz	r3, 8007ace <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 8007aca:	2000      	movs	r0, #0
 8007acc:	e009      	b.n	8007ae2 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <tcp_enqueue_flags+0x134>)
 8007ad0:	f240 4265 	movw	r2, #1125	; 0x465
 8007ad4:	490b      	ldr	r1, [pc, #44]	; (8007b04 <tcp_enqueue_flags+0x150>)
 8007ad6:	4806      	ldr	r0, [pc, #24]	; (8007af0 <tcp_enqueue_flags+0x13c>)
 8007ad8:	f002 fada 	bl	800a090 <iprintf>
  return ERR_OK;
 8007adc:	2000      	movs	r0, #0
 8007ade:	e000      	b.n	8007ae2 <tcp_enqueue_flags+0x12e>
 8007ae0:	2000      	movs	r0, #0
}
 8007ae2:	b003      	add	sp, #12
 8007ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ae8:	0800c43c 	.word	0x0800c43c
 8007aec:	0800c8d8 	.word	0x0800c8d8
 8007af0:	0800b1cc 	.word	0x0800b1cc
 8007af4:	0800c930 	.word	0x0800c930
 8007af8:	0800c950 	.word	0x0800c950
 8007afc:	0800c98c 	.word	0x0800c98c
 8007b00:	0800c9a4 	.word	0x0800c9a4
 8007b04:	0800c9d0 	.word	0x0800c9d0

08007b08 <tcp_send_fin>:
{
 8007b08:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	b188      	cbz	r0, 8007b32 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 8007b0e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007b10:	b153      	cbz	r3, 8007b28 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8007b12:	461c      	mov	r4, r3
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1fb      	bne.n	8007b12 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	8998      	ldrh	r0, [r3, #12]
 8007b1e:	f7fb fb58 	bl	80031d2 <lwip_htons>
 8007b22:	f010 0f07 	tst.w	r0, #7
 8007b26:	d00c      	beq.n	8007b42 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff ff42 	bl	80079b4 <tcp_enqueue_flags>
}
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8007b32:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <tcp_send_fin+0x58>)
 8007b34:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8007b38:	490a      	ldr	r1, [pc, #40]	; (8007b64 <tcp_send_fin+0x5c>)
 8007b3a:	480b      	ldr	r0, [pc, #44]	; (8007b68 <tcp_send_fin+0x60>)
 8007b3c:	f002 faa8 	bl	800a090 <iprintf>
 8007b40:	e7e5      	b.n	8007b0e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	899e      	ldrh	r6, [r3, #12]
 8007b46:	2001      	movs	r0, #1
 8007b48:	f7fb fb43 	bl	80031d2 <lwip_htons>
 8007b4c:	68e3      	ldr	r3, [r4, #12]
 8007b4e:	4306      	orrs	r6, r0
 8007b50:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8007b52:	8b6b      	ldrh	r3, [r5, #26]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	e7e8      	b.n	8007b30 <tcp_send_fin+0x28>
 8007b5e:	bf00      	nop
 8007b60:	0800c43c 	.word	0x0800c43c
 8007b64:	0800c9f8 	.word	0x0800c9f8
 8007b68:	0800b1cc 	.word	0x0800b1cc

08007b6c <tcp_rexmit_rto_prepare>:
{
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8007b70:	4605      	mov	r5, r0
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d031      	beq.n	8007bda <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 8007b76:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8007b78:	2c00      	cmp	r4, #0
 8007b7a:	d036      	beq.n	8007bea <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	b143      	cbz	r3, 8007b92 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7ff f949 	bl	8006e18 <tcp_output_segment_busy>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d132      	bne.n	8007bf0 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8007b8a:	6824      	ldr	r4, [r4, #0]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f6      	bne.n	8007b80 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff f940 	bl	8006e18 <tcp_output_segment_busy>
 8007b98:	bb68      	cbnz	r0, 8007bf6 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 8007b9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007b9c:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 8007b9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007ba0:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 8007ba6:	8b6b      	ldrh	r3, [r5, #26]
 8007ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bac:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	6858      	ldr	r0, [r3, #4]
 8007bb2:	f7fb fb13 	bl	80031dc <lwip_htonl>
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8007bbc:	68e3      	ldr	r3, [r4, #12]
 8007bbe:	8998      	ldrh	r0, [r3, #12]
 8007bc0:	f7fb fb07 	bl	80031d2 <lwip_htons>
 8007bc4:	f010 0303 	ands.w	r3, r0, #3
 8007bc8:	bf18      	it	ne
 8007bca:	2301      	movne	r3, #1
 8007bcc:	4447      	add	r7, r8
 8007bce:	443b      	add	r3, r7
 8007bd0:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 8007bd2:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 8007bd4:	4630      	mov	r0, r6
}
 8007bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <tcp_rexmit_rto_prepare+0x90>)
 8007bdc:	f240 6263 	movw	r2, #1635	; 0x663
 8007be0:	4907      	ldr	r1, [pc, #28]	; (8007c00 <tcp_rexmit_rto_prepare+0x94>)
 8007be2:	4808      	ldr	r0, [pc, #32]	; (8007c04 <tcp_rexmit_rto_prepare+0x98>)
 8007be4:	f002 fa54 	bl	800a090 <iprintf>
 8007be8:	e7c5      	b.n	8007b76 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 8007bea:	f06f 0005 	mvn.w	r0, #5
 8007bee:	e7f2      	b.n	8007bd6 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 8007bf0:	f06f 0005 	mvn.w	r0, #5
 8007bf4:	e7ef      	b.n	8007bd6 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 8007bf6:	f06f 0005 	mvn.w	r0, #5
 8007bfa:	e7ec      	b.n	8007bd6 <tcp_rexmit_rto_prepare+0x6a>
 8007bfc:	0800c43c 	.word	0x0800c43c
 8007c00:	0800ca14 	.word	0x0800ca14
 8007c04:	0800b1cc 	.word	0x0800b1cc

08007c08 <tcp_rexmit>:
{
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d02c      	beq.n	8007c6a <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 8007c10:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d034      	beq.n	8007c80 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff f8fe 	bl	8006e18 <tcp_output_segment_busy>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d132      	bne.n	8007c86 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 8007c20:	6833      	ldr	r3, [r6, #0]
 8007c22:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 8007c24:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 8007c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2a:	b17b      	cbz	r3, 8007c4c <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	6858      	ldr	r0, [r3, #4]
 8007c30:	f7fb fad4 	bl	80031dc <lwip_htonl>
 8007c34:	4604      	mov	r4, r0
 8007c36:	68f3      	ldr	r3, [r6, #12]
 8007c38:	6858      	ldr	r0, [r3, #4]
 8007c3a:	f7fb facf 	bl	80031dc <lwip_htonl>
 8007c3e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	da03      	bge.n	8007c4c <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 8007c44:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1ef      	bne.n	8007c2c <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8007c50:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	b18b      	cbz	r3, 8007c7a <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 8007c56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007c5a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8007c5c:	bf1c      	itt	ne
 8007c5e:	3301      	addne	r3, #1
 8007c60:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 8007c64:	2000      	movs	r0, #0
 8007c66:	6378      	str	r0, [r7, #52]	; 0x34
}
 8007c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <tcp_rexmit+0x84>)
 8007c6c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8007c70:	4907      	ldr	r1, [pc, #28]	; (8007c90 <tcp_rexmit+0x88>)
 8007c72:	4808      	ldr	r0, [pc, #32]	; (8007c94 <tcp_rexmit+0x8c>)
 8007c74:	f002 fa0c 	bl	800a090 <iprintf>
 8007c78:	e7ca      	b.n	8007c10 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 8007c7a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007c7e:	e7ea      	b.n	8007c56 <tcp_rexmit+0x4e>
    return ERR_VAL;
 8007c80:	f06f 0005 	mvn.w	r0, #5
 8007c84:	e7f0      	b.n	8007c68 <tcp_rexmit+0x60>
    return ERR_VAL;
 8007c86:	f06f 0005 	mvn.w	r0, #5
 8007c8a:	e7ed      	b.n	8007c68 <tcp_rexmit+0x60>
 8007c8c:	0800c43c 	.word	0x0800c43c
 8007c90:	0800ca38 	.word	0x0800ca38
 8007c94:	0800b1cc 	.word	0x0800b1cc

08007c98 <tcp_rexmit_fast>:
{
 8007c98:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b130      	cbz	r0, 8007cac <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8007c9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007ca0:	b11b      	cbz	r3, 8007caa <tcp_rexmit_fast+0x12>
 8007ca2:	8b63      	ldrh	r3, [r4, #26]
 8007ca4:	f013 0f04 	tst.w	r3, #4
 8007ca8:	d008      	beq.n	8007cbc <tcp_rexmit_fast+0x24>
}
 8007caa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8007cac:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <tcp_rexmit_fast+0x6c>)
 8007cae:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8007cb2:	4915      	ldr	r1, [pc, #84]	; (8007d08 <tcp_rexmit_fast+0x70>)
 8007cb4:	4815      	ldr	r0, [pc, #84]	; (8007d0c <tcp_rexmit_fast+0x74>)
 8007cb6:	f002 f9eb 	bl	800a090 <iprintf>
 8007cba:	e7f0      	b.n	8007c9e <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7ff ffa3 	bl	8007c08 <tcp_rexmit>
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d1f1      	bne.n	8007caa <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8007cc6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8007cca:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bf28      	it	cs
 8007cd2:	461a      	movcs	r2, r3
 8007cd4:	1052      	asrs	r2, r2, #1
 8007cd6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8007cda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007cdc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 8007ce0:	bf3c      	itt	cc
 8007ce2:	005a      	lslcc	r2, r3, #1
 8007ce4:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8007ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007cec:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8007cf6:	8b63      	ldrh	r3, [r4, #26]
 8007cf8:	f043 0304 	orr.w	r3, r3, #4
 8007cfc:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8007d02:	e7d2      	b.n	8007caa <tcp_rexmit_fast+0x12>
 8007d04:	0800c43c 	.word	0x0800c43c
 8007d08:	0800ca50 	.word	0x0800ca50
 8007d0c:	0800b1cc 	.word	0x0800b1cc

08007d10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8007d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	4604      	mov	r4, r0
 8007d18:	460e      	mov	r6, r1
 8007d1a:	4615      	mov	r5, r2
 8007d1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8007d1e:	4698      	mov	r8, r3
 8007d20:	b32b      	cbz	r3, 8007d6e <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8007d22:	b367      	cbz	r7, 8007d7e <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8007d24:	4630      	mov	r0, r6
 8007d26:	f7fb fa59 	bl	80031dc <lwip_htonl>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f246 0208 	movw	r2, #24584	; 0x6008
 8007d30:	9203      	str	r2, [sp, #12]
 8007d32:	2214      	movs	r2, #20
 8007d34:	9202      	str	r2, [sp, #8]
 8007d36:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8007d3a:	9201      	str	r2, [sp, #4]
 8007d3c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8007d40:	9200      	str	r2, [sp, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	4611      	mov	r1, r2
 8007d46:	4628      	mov	r0, r5
 8007d48:	f7ff f974 	bl	8007034 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	b158      	cbz	r0, 8007d68 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8007d50:	2300      	movs	r3, #0
 8007d52:	461a      	mov	r2, r3
 8007d54:	4601      	mov	r1, r0
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7ff f876 	bl	8006e48 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	4642      	mov	r2, r8
 8007d60:	4629      	mov	r1, r5
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7ff f9da 	bl	800711c <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8007d68:	b004      	add	sp, #16
 8007d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8007d6e:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <tcp_rst+0x80>)
 8007d70:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <tcp_rst+0x84>)
 8007d76:	4808      	ldr	r0, [pc, #32]	; (8007d98 <tcp_rst+0x88>)
 8007d78:	f002 f98a 	bl	800a090 <iprintf>
 8007d7c:	e7d1      	b.n	8007d22 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <tcp_rst+0x80>)
 8007d80:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8007d84:	4905      	ldr	r1, [pc, #20]	; (8007d9c <tcp_rst+0x8c>)
 8007d86:	4804      	ldr	r0, [pc, #16]	; (8007d98 <tcp_rst+0x88>)
 8007d88:	f002 f982 	bl	800a090 <iprintf>
 8007d8c:	e7ca      	b.n	8007d24 <tcp_rst+0x14>
 8007d8e:	bf00      	nop
 8007d90:	0800c43c 	.word	0x0800c43c
 8007d94:	0800ca70 	.word	0x0800ca70
 8007d98:	0800b1cc 	.word	0x0800b1cc
 8007d9c:	0800ca8c 	.word	0x0800ca8c

08007da0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8007da0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8007da2:	4604      	mov	r4, r0
 8007da4:	b1e0      	cbz	r0, 8007de0 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8007da6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007da8:	f7fb fa18 	bl	80031dc <lwip_htonl>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2200      	movs	r2, #0
 8007db0:	4611      	mov	r1, r2
 8007db2:	4620      	mov	r0, r4
 8007db4:	f7ff f988 	bl	80070c8 <tcp_output_alloc_header>
  if (p == NULL) {
 8007db8:	4605      	mov	r5, r0
 8007dba:	b1c8      	cbz	r0, 8007df0 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f7ff f840 	bl	8006e48 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8007dc8:	1d23      	adds	r3, r4, #4
 8007dca:	4622      	mov	r2, r4
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7ff f9a4 	bl	800711c <tcp_output_control_segment>
  if (err != ERR_OK) {
 8007dd4:	b198      	cbz	r0, 8007dfe <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007dd6:	8b63      	ldrh	r3, [r4, #26]
 8007dd8:	f043 0303 	orr.w	r3, r3, #3
 8007ddc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <tcp_send_empty_ack+0x68>)
 8007de2:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8007de6:	4909      	ldr	r1, [pc, #36]	; (8007e0c <tcp_send_empty_ack+0x6c>)
 8007de8:	4809      	ldr	r0, [pc, #36]	; (8007e10 <tcp_send_empty_ack+0x70>)
 8007dea:	f002 f951 	bl	800a090 <iprintf>
 8007dee:	e7da      	b.n	8007da6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007df0:	8b63      	ldrh	r3, [r4, #26]
 8007df2:	f043 0303 	orr.w	r3, r3, #3
 8007df6:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8007df8:	f06f 0001 	mvn.w	r0, #1
 8007dfc:	e7ef      	b.n	8007dde <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007dfe:	8b63      	ldrh	r3, [r4, #26]
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	8363      	strh	r3, [r4, #26]
 8007e06:	e7ea      	b.n	8007dde <tcp_send_empty_ack+0x3e>
 8007e08:	0800c43c 	.word	0x0800c43c
 8007e0c:	0800caa8 	.word	0x0800caa8
 8007e10:	0800b1cc 	.word	0x0800b1cc

08007e14 <tcp_output>:
{
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d03a      	beq.n	8007e96 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007e20:	7d2b      	ldrb	r3, [r5, #20]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d03f      	beq.n	8007ea6 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 8007e26:	4b9b      	ldr	r3, [pc, #620]	; (8008094 <tcp_output+0x280>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	42ab      	cmp	r3, r5
 8007e2c:	f000 81b8 	beq.w	80081a0 <tcp_output+0x38c>
  seg = pcb->unsent;
 8007e30:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	d03f      	beq.n	8007eb6 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007e36:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 8007e3a:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8007e3e:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8007e42:	7a28      	ldrb	r0, [r5, #8]
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d148      	bne.n	8007eda <tcp_output+0xc6>
    return ip_route(src, dst);
 8007e48:	4650      	mov	r0, sl
 8007e4a:	f001 f9cd 	bl	80091e8 <ip4_route>
 8007e4e:	4681      	mov	r9, r0
  if (netif == NULL) {
 8007e50:	f1b9 0f00 	cmp.w	r9, #0
 8007e54:	f000 81a6 	beq.w	80081a4 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b913      	cbnz	r3, 8007e62 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007e5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007e60:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8007e62:	42b7      	cmp	r7, r6
 8007e64:	bf28      	it	cs
 8007e66:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8007e68:	68e3      	ldr	r3, [r4, #12]
 8007e6a:	6858      	ldr	r0, [r3, #4]
 8007e6c:	f7fb f9b6 	bl	80031dc <lwip_htonl>
 8007e70:	8923      	ldrh	r3, [r4, #8]
 8007e72:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	4403      	add	r3, r0
 8007e78:	42bb      	cmp	r3, r7
 8007e7a:	d941      	bls.n	8007f00 <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8007e7c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8007e80:	42bb      	cmp	r3, r7
 8007e82:	d02e      	beq.n	8007ee2 <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 8007e84:	8b6b      	ldrh	r3, [r5, #26]
 8007e86:	f013 0f02 	tst.w	r3, #2
 8007e8a:	d018      	beq.n	8007ebe <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f7ff ff87 	bl	8007da0 <tcp_send_empty_ack>
 8007e92:	4603      	mov	r3, r0
 8007e94:	e018      	b.n	8007ec8 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8007e96:	4b80      	ldr	r3, [pc, #512]	; (8008098 <tcp_output+0x284>)
 8007e98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007e9c:	497f      	ldr	r1, [pc, #508]	; (800809c <tcp_output+0x288>)
 8007e9e:	4880      	ldr	r0, [pc, #512]	; (80080a0 <tcp_output+0x28c>)
 8007ea0:	f002 f8f6 	bl	800a090 <iprintf>
 8007ea4:	e7bc      	b.n	8007e20 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8007ea6:	4b7c      	ldr	r3, [pc, #496]	; (8008098 <tcp_output+0x284>)
 8007ea8:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8007eac:	497d      	ldr	r1, [pc, #500]	; (80080a4 <tcp_output+0x290>)
 8007eae:	487c      	ldr	r0, [pc, #496]	; (80080a0 <tcp_output+0x28c>)
 8007eb0:	f002 f8ee 	bl	800a090 <iprintf>
 8007eb4:	e7b7      	b.n	8007e26 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 8007eb6:	8b6b      	ldrh	r3, [r5, #26]
 8007eb8:	f013 0f02 	tst.w	r3, #2
 8007ebc:	d108      	bne.n	8007ed0 <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8007ebe:	8b6b      	ldrh	r3, [r5, #26]
 8007ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ec4:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	b005      	add	sp, #20
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff ff65 	bl	8007da0 <tcp_send_empty_ack>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	e7f6      	b.n	8007ec8 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 8007eda:	f7fb fe57 	bl	8003b8c <netif_get_by_index>
 8007ede:	4681      	mov	r9, r0
 8007ee0:	e7b6      	b.n	8007e50 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8007ee2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1cd      	bne.n	8007e84 <tcp_output+0x70>
 8007ee8:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1c9      	bne.n	8007e84 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 8007ef0:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 8007efa:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 8007efe:	e7c1      	b.n	8007e84 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 8007f06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8147 	beq.w	800819c <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 8007f0e:	4698      	mov	r8, r3
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1fb      	bne.n	8007f0e <tcp_output+0xfa>
 8007f16:	e0d4      	b.n	80080c2 <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 8007f18:	4b5f      	ldr	r3, [pc, #380]	; (8008098 <tcp_output+0x284>)
 8007f1a:	f240 5236 	movw	r2, #1334	; 0x536
 8007f1e:	4962      	ldr	r1, [pc, #392]	; (80080a8 <tcp_output+0x294>)
 8007f20:	485f      	ldr	r0, [pc, #380]	; (80080a0 <tcp_output+0x28c>)
 8007f22:	f002 f8b5 	bl	800a090 <iprintf>
 8007f26:	e0df      	b.n	80080e8 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8007f28:	8911      	ldrh	r1, [r2, #8]
 8007f2a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8007f2c:	4291      	cmp	r1, r2
 8007f2e:	f080 80e9 	bcs.w	8008104 <tcp_output+0x2f0>
 8007f32:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	f000 80e4 	beq.w	8008104 <tcp_output+0x2f0>
 8007f3c:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 8007f40:	2a08      	cmp	r2, #8
 8007f42:	f200 80df 	bhi.w	8008104 <tcp_output+0x2f0>
 8007f46:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8007f4a:	f040 80db 	bne.w	8008104 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 8007f4e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1b4      	bne.n	8007ebe <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8007f5a:	e7b0      	b.n	8007ebe <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8007f5c:	68e3      	ldr	r3, [r4, #12]
 8007f5e:	899e      	ldrh	r6, [r3, #12]
 8007f60:	2010      	movs	r0, #16
 8007f62:	f7fb f936 	bl	80031d2 <lwip_htons>
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	4330      	orrs	r0, r6
 8007f6a:	8198      	strh	r0, [r3, #12]
 8007f6c:	e0ce      	b.n	800810c <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007f6e:	68e6      	ldr	r6, [r4, #12]
 8007f70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007f72:	f7fb f933 	bl	80031dc <lwip_htonl>
 8007f76:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8007f78:	68e6      	ldr	r6, [r4, #12]
 8007f7a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8007f7c:	f7fb f929 	bl	80031d2 <lwip_htons>
 8007f80:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007f82:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8007f84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f86:	4413      	add	r3, r2
 8007f88:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007f8a:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8007f8c:	7aa3      	ldrb	r3, [r4, #10]
 8007f8e:	f013 0f01 	tst.w	r3, #1
 8007f92:	d140      	bne.n	8008016 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8007f94:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 8007f96:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8007f9a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8007f9c:	bfbc      	itt	lt
 8007f9e:	2300      	movlt	r3, #0
 8007fa0:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 8007fa2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d043      	beq.n	8008030 <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8007fa8:	6862      	ldr	r2, [r4, #4]
 8007faa:	68e3      	ldr	r3, [r4, #12]
 8007fac:	6851      	ldr	r1, [r2, #4]
 8007fae:	1a5b      	subs	r3, r3, r1
 8007fb0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8007fb2:	8951      	ldrh	r1, [r2, #10]
 8007fb4:	1ac9      	subs	r1, r1, r3
 8007fb6:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8007fb8:	6861      	ldr	r1, [r4, #4]
 8007fba:	890a      	ldrh	r2, [r1, #8]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	68e3      	ldr	r3, [r4, #12]
 8007fc4:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	741a      	strb	r2, [r3, #16]
 8007fca:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8007fcc:	7aa3      	ldrb	r3, [r4, #10]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	68e2      	ldr	r2, [r4, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	429e      	cmp	r6, r3
 8007fdc:	d006      	beq.n	8007fec <tcp_output+0x1d8>
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <tcp_output+0x284>)
 8007fe0:	f240 621c 	movw	r2, #1564	; 0x61c
 8007fe4:	4931      	ldr	r1, [pc, #196]	; (80080ac <tcp_output+0x298>)
 8007fe6:	482e      	ldr	r0, [pc, #184]	; (80080a0 <tcp_output+0x28c>)
 8007fe8:	f002 f852 	bl	800a090 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8007fec:	6860      	ldr	r0, [r4, #4]
 8007fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ff2:	2306      	movs	r3, #6
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	7aab      	ldrb	r3, [r5, #10]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	7aeb      	ldrb	r3, [r5, #11]
 8007ffc:	4652      	mov	r2, sl
 8007ffe:	4629      	mov	r1, r5
 8008000:	f001 fa7e 	bl	8009500 <ip4_output_if>
    if (err != ERR_OK) {
 8008004:	4603      	mov	r3, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	f000 8086 	beq.w	8008118 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800800c:	8b6a      	ldrh	r2, [r5, #26]
 800800e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008012:	836a      	strh	r2, [r5, #26]
      return err;
 8008014:	e758      	b.n	8007ec8 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8008016:	4652      	mov	r2, sl
 8008018:	4649      	mov	r1, r9
 800801a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800801e:	f7fc fc31 	bl	8004884 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008022:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8008026:	f7fb f8d9 	bl	80031dc <lwip_htonl>
 800802a:	6170      	str	r0, [r6, #20]
    opts += 1;
 800802c:	3618      	adds	r6, #24
 800802e:	e7b2      	b.n	8007f96 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 8008030:	4b1f      	ldr	r3, [pc, #124]	; (80080b0 <tcp_output+0x29c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	6858      	ldr	r0, [r3, #4]
 800803a:	f7fb f8cf 	bl	80031dc <lwip_htonl>
 800803e:	63a8      	str	r0, [r5, #56]	; 0x38
 8008040:	e7b2      	b.n	8007fa8 <tcp_output+0x194>
        pcb->unacked = seg;
 8008042:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 8008044:	46a0      	mov	r8, r4
 8008046:	e038      	b.n	80080ba <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008048:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800804c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800804e:	b1d3      	cbz	r3, 8008086 <tcp_output+0x272>
 8008050:	4622      	mov	r2, r4
 8008052:	465c      	mov	r4, fp
 8008054:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	6858      	ldr	r0, [r3, #4]
 800805a:	f7fb f8bf 	bl	80031dc <lwip_htonl>
 800805e:	4606      	mov	r6, r0
 8008060:	f8db 300c 	ldr.w	r3, [fp, #12]
 8008064:	6858      	ldr	r0, [r3, #4]
 8008066:	f7fb f8b9 	bl	80031dc <lwip_htonl>
 800806a:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800806c:	2e00      	cmp	r6, #0
 800806e:	da07      	bge.n	8008080 <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 8008070:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1ee      	bne.n	8008056 <tcp_output+0x242>
 8008078:	465b      	mov	r3, fp
 800807a:	46a3      	mov	fp, r4
 800807c:	461c      	mov	r4, r3
 800807e:	e002      	b.n	8008086 <tcp_output+0x272>
 8008080:	465b      	mov	r3, fp
 8008082:	46a3      	mov	fp, r4
 8008084:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 8008086:	f8db 3000 	ldr.w	r3, [fp]
 800808a:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800808c:	f8cb 4000 	str.w	r4, [fp]
 8008090:	e013      	b.n	80080ba <tcp_output+0x2a6>
 8008092:	bf00      	nop
 8008094:	2000a994 	.word	0x2000a994
 8008098:	0800c43c 	.word	0x0800c43c
 800809c:	0800cac8 	.word	0x0800cac8
 80080a0:	0800b1cc 	.word	0x0800b1cc
 80080a4:	0800cae0 	.word	0x0800cae0
 80080a8:	0800cb08 	.word	0x0800cb08
 80080ac:	0800c4c0 	.word	0x0800c4c0
 80080b0:	2000a960 	.word	0x2000a960
      tcp_seg_free(seg);
 80080b4:	4620      	mov	r0, r4
 80080b6:	f7fc faff 	bl	80046b8 <tcp_seg_free>
    seg = pcb->unsent;
 80080ba:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 80080bc:	2c00      	cmp	r4, #0
 80080be:	f43f af49 	beq.w	8007f54 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80080c2:	68e3      	ldr	r3, [r4, #12]
 80080c4:	6858      	ldr	r0, [r3, #4]
 80080c6:	f7fb f889 	bl	80031dc <lwip_htonl>
 80080ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80080cc:	1ac0      	subs	r0, r0, r3
 80080ce:	8923      	ldrh	r3, [r4, #8]
 80080d0:	4418      	add	r0, r3
  while (seg != NULL &&
 80080d2:	42b8      	cmp	r0, r7
 80080d4:	f63f af3b 	bhi.w	8007f4e <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	8998      	ldrh	r0, [r3, #12]
 80080dc:	f7fb f879 	bl	80031d2 <lwip_htons>
 80080e0:	f010 0f04 	tst.w	r0, #4
 80080e4:	f47f af18 	bne.w	8007f18 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80080e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80080ea:	b15b      	cbz	r3, 8008104 <tcp_output+0x2f0>
 80080ec:	8b6b      	ldrh	r3, [r5, #26]
 80080ee:	f013 0f44 	tst.w	r3, #68	; 0x44
 80080f2:	d107      	bne.n	8008104 <tcp_output+0x2f0>
 80080f4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	f43f af1b 	beq.w	8007f32 <tcp_output+0x11e>
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	2900      	cmp	r1, #0
 8008100:	f43f af12 	beq.w	8007f28 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 8008104:	7d2b      	ldrb	r3, [r5, #20]
 8008106:	2b02      	cmp	r3, #2
 8008108:	f47f af28 	bne.w	8007f5c <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 800810c:	4620      	mov	r0, r4
 800810e:	f7fe fe83 	bl	8006e18 <tcp_output_segment_busy>
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f af2b 	beq.w	8007f6e <tcp_output+0x15a>
    pcb->unsent = seg->next;
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800811c:	7d2b      	ldrb	r3, [r5, #20]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d003      	beq.n	800812a <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008122:	8b6b      	ldrh	r3, [r5, #26]
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800812a:	68e3      	ldr	r3, [r4, #12]
 800812c:	6858      	ldr	r0, [r3, #4]
 800812e:	f7fb f855 	bl	80031dc <lwip_htonl>
 8008132:	4606      	mov	r6, r0
 8008134:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8008138:	68e3      	ldr	r3, [r4, #12]
 800813a:	8998      	ldrh	r0, [r3, #12]
 800813c:	f7fb f849 	bl	80031d2 <lwip_htons>
 8008140:	f010 0003 	ands.w	r0, r0, #3
 8008144:	bf18      	it	ne
 8008146:	2001      	movne	r0, #1
 8008148:	445e      	add	r6, fp
 800814a:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800814c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800814e:	1a1b      	subs	r3, r3, r0
 8008150:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8008152:	bfb8      	it	lt
 8008154:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8008156:	8926      	ldrh	r6, [r4, #8]
 8008158:	68e3      	ldr	r3, [r4, #12]
 800815a:	8998      	ldrh	r0, [r3, #12]
 800815c:	f7fb f839 	bl	80031d2 <lwip_htons>
 8008160:	f010 0003 	ands.w	r0, r0, #3
 8008164:	bf18      	it	ne
 8008166:	2001      	movne	r0, #1
 8008168:	42f0      	cmn	r0, r6
 800816a:	d0a3      	beq.n	80080b4 <tcp_output+0x2a0>
      seg->next = NULL;
 800816c:	2300      	movs	r3, #0
 800816e:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 8008170:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008172:	2b00      	cmp	r3, #0
 8008174:	f43f af65 	beq.w	8008042 <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008178:	68e3      	ldr	r3, [r4, #12]
 800817a:	6858      	ldr	r0, [r3, #4]
 800817c:	f7fb f82e 	bl	80031dc <lwip_htonl>
 8008180:	4606      	mov	r6, r0
 8008182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008186:	6858      	ldr	r0, [r3, #4]
 8008188:	f7fb f828 	bl	80031dc <lwip_htonl>
 800818c:	1a36      	subs	r6, r6, r0
 800818e:	2e00      	cmp	r6, #0
 8008190:	f6ff af5a 	blt.w	8008048 <tcp_output+0x234>
          useg->next = seg;
 8008194:	f8c8 4000 	str.w	r4, [r8]
 8008198:	46a0      	mov	r8, r4
 800819a:	e78e      	b.n	80080ba <tcp_output+0x2a6>
  useg = pcb->unacked;
 800819c:	4698      	mov	r8, r3
  while (seg != NULL &&
 800819e:	e790      	b.n	80080c2 <tcp_output+0x2ae>
    return ERR_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	e691      	b.n	8007ec8 <tcp_output+0xb4>
    return ERR_RTE;
 80081a4:	f06f 0303 	mvn.w	r3, #3
 80081a8:	e68e      	b.n	8007ec8 <tcp_output+0xb4>
 80081aa:	bf00      	nop

080081ac <tcp_rexmit_rto_commit>:
{
 80081ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80081ae:	4604      	mov	r4, r0
 80081b0:	b150      	cbz	r0, 80081c8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 80081b2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80081b6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80081b8:	bf1c      	itt	ne
 80081ba:	3301      	addne	r3, #1
 80081bc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7ff fe27 	bl	8007e14 <tcp_output>
}
 80081c6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80081c8:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <tcp_rexmit_rto_commit+0x2c>)
 80081ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80081ce:	4903      	ldr	r1, [pc, #12]	; (80081dc <tcp_rexmit_rto_commit+0x30>)
 80081d0:	4803      	ldr	r0, [pc, #12]	; (80081e0 <tcp_rexmit_rto_commit+0x34>)
 80081d2:	f001 ff5d 	bl	800a090 <iprintf>
 80081d6:	e7ec      	b.n	80081b2 <tcp_rexmit_rto_commit+0x6>
 80081d8:	0800c43c 	.word	0x0800c43c
 80081dc:	0800cb20 	.word	0x0800cb20
 80081e0:	0800b1cc 	.word	0x0800b1cc

080081e4 <tcp_rexmit_rto>:
{
 80081e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80081e6:	4604      	mov	r4, r0
 80081e8:	b120      	cbz	r0, 80081f4 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80081ea:	4620      	mov	r0, r4
 80081ec:	f7ff fcbe 	bl	8007b6c <tcp_rexmit_rto_prepare>
 80081f0:	b140      	cbz	r0, 8008204 <tcp_rexmit_rto+0x20>
}
 80081f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <tcp_rexmit_rto+0x28>)
 80081f6:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80081fa:	4905      	ldr	r1, [pc, #20]	; (8008210 <tcp_rexmit_rto+0x2c>)
 80081fc:	4805      	ldr	r0, [pc, #20]	; (8008214 <tcp_rexmit_rto+0x30>)
 80081fe:	f001 ff47 	bl	800a090 <iprintf>
 8008202:	e7f2      	b.n	80081ea <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff ffd1 	bl	80081ac <tcp_rexmit_rto_commit>
}
 800820a:	e7f2      	b.n	80081f2 <tcp_rexmit_rto+0xe>
 800820c:	0800c43c 	.word	0x0800c43c
 8008210:	0800cb44 	.word	0x0800cb44
 8008214:	0800b1cc 	.word	0x0800b1cc

08008218 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008218:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800821a:	4604      	mov	r4, r0
 800821c:	b1c0      	cbz	r0, 8008250 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800821e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008220:	3801      	subs	r0, #1
 8008222:	f7fa ffdb 	bl	80031dc <lwip_htonl>
 8008226:	4603      	mov	r3, r0
 8008228:	2200      	movs	r2, #0
 800822a:	4611      	mov	r1, r2
 800822c:	4620      	mov	r0, r4
 800822e:	f7fe ff4b 	bl	80070c8 <tcp_output_alloc_header>
  if (p == NULL) {
 8008232:	4605      	mov	r5, r0
 8008234:	b1a0      	cbz	r0, 8008260 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8008236:	2300      	movs	r3, #0
 8008238:	461a      	mov	r2, r3
 800823a:	4601      	mov	r1, r0
 800823c:	4620      	mov	r0, r4
 800823e:	f7fe fe03 	bl	8006e48 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008242:	1d23      	adds	r3, r4, #4
 8008244:	4622      	mov	r2, r4
 8008246:	4629      	mov	r1, r5
 8008248:	4620      	mov	r0, r4
 800824a:	f7fe ff67 	bl	800711c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800824e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <tcp_keepalive+0x50>)
 8008252:	f640 0224 	movw	r2, #2084	; 0x824
 8008256:	4905      	ldr	r1, [pc, #20]	; (800826c <tcp_keepalive+0x54>)
 8008258:	4805      	ldr	r0, [pc, #20]	; (8008270 <tcp_keepalive+0x58>)
 800825a:	f001 ff19 	bl	800a090 <iprintf>
 800825e:	e7de      	b.n	800821e <tcp_keepalive+0x6>
    return ERR_MEM;
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	e7f3      	b.n	800824e <tcp_keepalive+0x36>
 8008266:	bf00      	nop
 8008268:	0800c43c 	.word	0x0800c43c
 800826c:	0800cb60 	.word	0x0800cb60
 8008270:	0800b1cc 	.word	0x0800b1cc

08008274 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8008278:	4604      	mov	r4, r0
 800827a:	2800      	cmp	r0, #0
 800827c:	d03e      	beq.n	80082fc <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800827e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8008280:	2d00      	cmp	r5, #0
 8008282:	d043      	beq.n	800830c <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8008284:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008288:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800828a:	bf1c      	itt	ne
 800828c:	3301      	addne	r3, #1
 800828e:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008292:	68eb      	ldr	r3, [r5, #12]
 8008294:	8998      	ldrh	r0, [r3, #12]
 8008296:	f7fa ff9c 	bl	80031d2 <lwip_htons>
 800829a:	f010 0f01 	tst.w	r0, #1
 800829e:	d002      	beq.n	80082a6 <tcp_zero_window_probe+0x32>
 80082a0:	892b      	ldrh	r3, [r5, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d03a      	beq.n	800831c <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80082a6:	68eb      	ldr	r3, [r5, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	2100      	movs	r1, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7fe ff0a 	bl	80070c8 <tcp_output_alloc_header>
  if (p == NULL) {
 80082b4:	4606      	mov	r6, r0
 80082b6:	b370      	cbz	r0, 8008316 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80082b8:	6868      	ldr	r0, [r5, #4]
 80082ba:	8903      	ldrh	r3, [r0, #8]
 80082bc:	892a      	ldrh	r2, [r5, #8]
 80082be:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 80082c0:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2201      	movs	r2, #1
 80082c6:	3114      	adds	r1, #20
 80082c8:	f7fb ffb6 	bl	8004238 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80082cc:	68eb      	ldr	r3, [r5, #12]
 80082ce:	6858      	ldr	r0, [r3, #4]
 80082d0:	f7fa ff84 	bl	80031dc <lwip_htonl>
 80082d4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80082d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082d8:	1a1b      	subs	r3, r3, r0
 80082da:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 80082dc:	bfb8      	it	lt
 80082de:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80082e0:	2300      	movs	r3, #0
 80082e2:	461a      	mov	r2, r3
 80082e4:	4631      	mov	r1, r6
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7fe fdae 	bl	8006e48 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80082ec:	1d23      	adds	r3, r4, #4
 80082ee:	4622      	mov	r2, r4
 80082f0:	4631      	mov	r1, r6
 80082f2:	4620      	mov	r0, r4
 80082f4:	f7fe ff12 	bl	800711c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80082f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80082fc:	4b13      	ldr	r3, [pc, #76]	; (800834c <tcp_zero_window_probe+0xd8>)
 80082fe:	f640 024f 	movw	r2, #2127	; 0x84f
 8008302:	4913      	ldr	r1, [pc, #76]	; (8008350 <tcp_zero_window_probe+0xdc>)
 8008304:	4813      	ldr	r0, [pc, #76]	; (8008354 <tcp_zero_window_probe+0xe0>)
 8008306:	f001 fec3 	bl	800a090 <iprintf>
 800830a:	e7b8      	b.n	800827e <tcp_zero_window_probe+0xa>
    return ERR_OK;
 800830c:	2000      	movs	r0, #0
 800830e:	e7f3      	b.n	80082f8 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e7f0      	b.n	80082f8 <tcp_zero_window_probe+0x84>
 8008316:	f04f 30ff 	mov.w	r0, #4294967295
 800831a:	e7ed      	b.n	80082f8 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800831c:	68eb      	ldr	r3, [r5, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	4611      	mov	r1, r2
 8008324:	4620      	mov	r0, r4
 8008326:	f7fe fecf 	bl	80070c8 <tcp_output_alloc_header>
  if (p == NULL) {
 800832a:	4606      	mov	r6, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d0ef      	beq.n	8008310 <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 8008330:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008334:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8008338:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800833c:	2011      	movs	r0, #17
 800833e:	f7fa ff48 	bl	80031d2 <lwip_htons>
 8008342:	4307      	orrs	r7, r0
 8008344:	f8a8 700c 	strh.w	r7, [r8, #12]
 8008348:	e7c0      	b.n	80082cc <tcp_zero_window_probe+0x58>
 800834a:	bf00      	nop
 800834c:	0800c43c 	.word	0x0800c43c
 8008350:	0800cb7c 	.word	0x0800cb7c
 8008354:	0800b1cc 	.word	0x0800b1cc

08008358 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	4604      	mov	r4, r0
 800835c:	460f      	mov	r7, r1
 800835e:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008360:	2006      	movs	r0, #6
 8008362:	f7fb fa15 	bl	8003790 <memp_malloc>
  if (timeout == NULL) {
 8008366:	b180      	cbz	r0, 800838a <sys_timeout_abs+0x32>
 8008368:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800836e:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 8008370:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 8008372:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <sys_timeout_abs+0x5c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	b173      	cbz	r3, 8008398 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	1aa2      	subs	r2, r4, r2
 800837e:	2a00      	cmp	r2, #0
 8008380:	da0d      	bge.n	800839e <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 8008382:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 8008384:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <sys_timeout_abs+0x5c>)
 8008386:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 8008388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800838a:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <sys_timeout_abs+0x60>)
 800838c:	22be      	movs	r2, #190	; 0xbe
 800838e:	490b      	ldr	r1, [pc, #44]	; (80083bc <sys_timeout_abs+0x64>)
 8008390:	480b      	ldr	r0, [pc, #44]	; (80083c0 <sys_timeout_abs+0x68>)
 8008392:	f001 fe7d 	bl	800a090 <iprintf>
    return;
 8008396:	e7f7      	b.n	8008388 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <sys_timeout_abs+0x5c>)
 800839a:	6018      	str	r0, [r3, #0]
    return;
 800839c:	e7f4      	b.n	8008388 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800839e:	4619      	mov	r1, r3
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	b11b      	cbz	r3, 80083ac <sys_timeout_abs+0x54>
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	1aa2      	subs	r2, r4, r2
 80083a8:	2a00      	cmp	r2, #0
 80083aa:	daf8      	bge.n	800839e <sys_timeout_abs+0x46>
        timeout->next = t->next;
 80083ac:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 80083ae:	600d      	str	r5, [r1, #0]
        break;
 80083b0:	e7ea      	b.n	8008388 <sys_timeout_abs+0x30>
 80083b2:	bf00      	nop
 80083b4:	2000a9b0 	.word	0x2000a9b0
 80083b8:	0800cba0 	.word	0x0800cba0
 80083bc:	0800cbd4 	.word	0x0800cbd4
 80083c0:	0800b1cc 	.word	0x0800b1cc

080083c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80083c8:	6843      	ldr	r3, [r0, #4]
 80083ca:	4798      	blx	r3

  now = sys_now();
 80083cc:	f7fa fd38 	bl	8002e40 <sys_now>
 80083d0:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80083d2:	6825      	ldr	r5, [r4, #0]
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <lwip_cyclic_timer+0x2c>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80083da:	eba0 030c 	sub.w	r3, r0, ip
 80083de:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80083e0:	4622      	mov	r2, r4
 80083e2:	4904      	ldr	r1, [pc, #16]	; (80083f4 <lwip_cyclic_timer+0x30>)
 80083e4:	bfb8      	it	lt
 80083e6:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80083ea:	f7ff ffb5 	bl	8008358 <sys_timeout_abs>
#endif
  }
}
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	2000a9ac 	.word	0x2000a9ac
 80083f4:	080083c5 	.word	0x080083c5

080083f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	4604      	mov	r4, r0
 80083fc:	460d      	mov	r5, r1
 80083fe:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008400:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008404:	d207      	bcs.n	8008416 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8008406:	f7fa fd1b 	bl	8002e40 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800840a:	4632      	mov	r2, r6
 800840c:	4629      	mov	r1, r5
 800840e:	4420      	add	r0, r4
 8008410:	f7ff ffa2 	bl	8008358 <sys_timeout_abs>
#endif
}
 8008414:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <sys_timeout+0x30>)
 8008418:	f240 1229 	movw	r2, #297	; 0x129
 800841c:	4903      	ldr	r1, [pc, #12]	; (800842c <sys_timeout+0x34>)
 800841e:	4804      	ldr	r0, [pc, #16]	; (8008430 <sys_timeout+0x38>)
 8008420:	f001 fe36 	bl	800a090 <iprintf>
 8008424:	e7ef      	b.n	8008406 <sys_timeout+0xe>
 8008426:	bf00      	nop
 8008428:	0800cba0 	.word	0x0800cba0
 800842c:	0800cc14 	.word	0x0800cc14
 8008430:	0800b1cc 	.word	0x0800b1cc

08008434 <tcp_timer_needed>:
{
 8008434:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008436:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <tcp_timer_needed+0x2c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	b953      	cbnz	r3, 8008452 <tcp_timer_needed+0x1e>
 800843c:	4b09      	ldr	r3, [pc, #36]	; (8008464 <tcp_timer_needed+0x30>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	b143      	cbz	r3, 8008454 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <tcp_timer_needed+0x2c>)
 8008444:	2201      	movs	r2, #1
 8008446:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008448:	2200      	movs	r2, #0
 800844a:	4907      	ldr	r1, [pc, #28]	; (8008468 <tcp_timer_needed+0x34>)
 800844c:	20fa      	movs	r0, #250	; 0xfa
 800844e:	f7ff ffd3 	bl	80083f8 <sys_timeout>
}
 8008452:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <tcp_timer_needed+0x38>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f2      	bne.n	8008442 <tcp_timer_needed+0xe>
 800845c:	e7f9      	b.n	8008452 <tcp_timer_needed+0x1e>
 800845e:	bf00      	nop
 8008460:	2000a9b4 	.word	0x2000a9b4
 8008464:	2000a950 	.word	0x2000a950
 8008468:	08008471 	.word	0x08008471
 800846c:	2000a968 	.word	0x2000a968

08008470 <tcpip_tcp_timer>:
{
 8008470:	b508      	push	{r3, lr}
  tcp_tmr();
 8008472:	f7fd f89d 	bl	80055b0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008476:	4b08      	ldr	r3, [pc, #32]	; (8008498 <tcpip_tcp_timer+0x28>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	b12b      	cbz	r3, 8008488 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800847c:	2200      	movs	r2, #0
 800847e:	4907      	ldr	r1, [pc, #28]	; (800849c <tcpip_tcp_timer+0x2c>)
 8008480:	20fa      	movs	r0, #250	; 0xfa
 8008482:	f7ff ffb9 	bl	80083f8 <sys_timeout>
}
 8008486:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <tcpip_tcp_timer+0x30>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f5      	bne.n	800847c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <tcpip_tcp_timer+0x34>)
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
}
 8008496:	e7f6      	b.n	8008486 <tcpip_tcp_timer+0x16>
 8008498:	2000a950 	.word	0x2000a950
 800849c:	08008471 	.word	0x08008471
 80084a0:	2000a968 	.word	0x2000a968
 80084a4:	2000a9b4 	.word	0x2000a9b4

080084a8 <sys_timeouts_init>:
{
 80084a8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80084aa:	4d08      	ldr	r5, [pc, #32]	; (80084cc <sys_timeouts_init+0x24>)
 80084ac:	4c08      	ldr	r4, [pc, #32]	; (80084d0 <sys_timeouts_init+0x28>)
 80084ae:	f105 0208 	add.w	r2, r5, #8
 80084b2:	4621      	mov	r1, r4
 80084b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084b8:	f7ff ff9e 	bl	80083f8 <sys_timeout>
 80084bc:	f105 0210 	add.w	r2, r5, #16
 80084c0:	4621      	mov	r1, r4
 80084c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084c6:	f7ff ff97 	bl	80083f8 <sys_timeout>
}
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	0800cc4c 	.word	0x0800cc4c
 80084d0:	080083c5 	.word	0x080083c5

080084d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80084d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80084d8:	f7fa fcb2 	bl	8002e40 <sys_now>
 80084dc:	4606      	mov	r6, r0
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80084de:	4f11      	ldr	r7, [pc, #68]	; (8008524 <sys_check_timeouts+0x50>)

    tmptimeout = next_timeout;
 80084e0:	4c11      	ldr	r4, [pc, #68]	; (8008528 <sys_check_timeouts+0x54>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 80084e2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800852c <sys_check_timeouts+0x58>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80084e6:	f04f 0806 	mov.w	r8, #6
 80084ea:	e010      	b.n	800850e <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 80084ec:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 80084ee:	b1b9      	cbz	r1, 8008520 <sys_check_timeouts+0x4c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80084f0:	684b      	ldr	r3, [r1, #4]
 80084f2:	1af2      	subs	r2, r6, r3
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	db13      	blt.n	8008520 <sys_check_timeouts+0x4c>
    next_timeout = tmptimeout->next;
 80084f8:	680a      	ldr	r2, [r1, #0]
 80084fa:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 80084fc:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 80084fe:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 8008502:	f8c9 3000 	str.w	r3, [r9]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008506:	4640      	mov	r0, r8
 8008508:	f7fb f972 	bl	80037f0 <memp_free>
    if (handler != NULL) {
 800850c:	b92d      	cbnz	r5, 800851a <sys_check_timeouts+0x46>
    PBUF_CHECK_FREE_OOSEQ();
 800850e:	783b      	ldrb	r3, [r7, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0eb      	beq.n	80084ec <sys_check_timeouts+0x18>
 8008514:	f7fb fb8c 	bl	8003c30 <pbuf_free_ooseq>
 8008518:	e7e8      	b.n	80084ec <sys_check_timeouts+0x18>
      handler(arg);
 800851a:	4650      	mov	r0, sl
 800851c:	47a8      	blx	r5
 800851e:	e7f6      	b.n	800850e <sys_check_timeouts+0x3a>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	2000a94d 	.word	0x2000a94d
 8008528:	2000a9b0 	.word	0x2000a9b0
 800852c:	2000a9ac 	.word	0x2000a9ac

08008530 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008530:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008532:	f001 fdc5 	bl	800a0c0 <rand>
 8008536:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800853a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800853e:	4b01      	ldr	r3, [pc, #4]	; (8008544 <udp_init+0x14>)
 8008540:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 8008542:	bd08      	pop	{r3, pc}
 8008544:	20000026 	.word	0x20000026

08008548 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b085      	sub	sp, #20
 800854e:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008550:	4681      	mov	r9, r0
 8008552:	b300      	cbz	r0, 8008596 <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008554:	b336      	cbz	r6, 80085a4 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008556:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800855a:	2b07      	cmp	r3, #7
 800855c:	d929      	bls.n	80085b2 <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800855e:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008562:	4b68      	ldr	r3, [pc, #416]	; (8008704 <udp_input+0x1bc>)
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	6958      	ldr	r0, [r3, #20]
 8008568:	f000 ffdf 	bl	800952a <ip4_addr_isbroadcast_u32>
 800856c:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800856e:	8820      	ldrh	r0, [r4, #0]
 8008570:	f7fa fe2f 	bl	80031d2 <lwip_htons>
 8008574:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 8008576:	8860      	ldrh	r0, [r4, #2]
 8008578:	f7fa fe2b 	bl	80031d2 <lwip_htons>
 800857c:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800857e:	4b62      	ldr	r3, [pc, #392]	; (8008708 <udp_input+0x1c0>)
 8008580:	681c      	ldr	r4, [r3, #0]
 8008582:	2c00      	cmp	r4, #0
 8008584:	f000 8088 	beq.w	8008698 <udp_input+0x150>
  uncon_pcb = NULL;
 8008588:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800858c:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008590:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8008704 <udp_input+0x1bc>
 8008594:	e02c      	b.n	80085f0 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008596:	4b5d      	ldr	r3, [pc, #372]	; (800870c <udp_input+0x1c4>)
 8008598:	22cf      	movs	r2, #207	; 0xcf
 800859a:	495d      	ldr	r1, [pc, #372]	; (8008710 <udp_input+0x1c8>)
 800859c:	485d      	ldr	r0, [pc, #372]	; (8008714 <udp_input+0x1cc>)
 800859e:	f001 fd77 	bl	800a090 <iprintf>
 80085a2:	e7d7      	b.n	8008554 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80085a4:	4b59      	ldr	r3, [pc, #356]	; (800870c <udp_input+0x1c4>)
 80085a6:	22d0      	movs	r2, #208	; 0xd0
 80085a8:	495b      	ldr	r1, [pc, #364]	; (8008718 <udp_input+0x1d0>)
 80085aa:	485a      	ldr	r0, [pc, #360]	; (8008714 <udp_input+0x1cc>)
 80085ac:	f001 fd70 	bl	800a090 <iprintf>
 80085b0:	e7d1      	b.n	8008556 <udp_input+0xe>
    pbuf_free(p);
 80085b2:	4648      	mov	r0, r9
 80085b4:	f7fb fbda 	bl	8003d6c <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80085b8:	b005      	add	sp, #20
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80085be:	4b53      	ldr	r3, [pc, #332]	; (800870c <udp_input+0x1c4>)
 80085c0:	2288      	movs	r2, #136	; 0x88
 80085c2:	4956      	ldr	r1, [pc, #344]	; (800871c <udp_input+0x1d4>)
 80085c4:	4853      	ldr	r0, [pc, #332]	; (8008714 <udp_input+0x1cc>)
 80085c6:	f001 fd63 	bl	800a090 <iprintf>
 80085ca:	e016      	b.n	80085fa <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	b11b      	cbz	r3, 80085d8 <udp_input+0x90>
 80085d0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d106      	bne.n	80085e6 <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80085d8:	7c23      	ldrb	r3, [r4, #16]
 80085da:	f013 0f04 	tst.w	r3, #4
 80085de:	d025      	beq.n	800862c <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 80085e0:	8aa3      	ldrh	r3, [r4, #20]
 80085e2:	4553      	cmp	r3, sl
 80085e4:	d038      	beq.n	8008658 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80085e6:	68e3      	ldr	r3, [r4, #12]
 80085e8:	9403      	str	r4, [sp, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d051      	beq.n	8008692 <udp_input+0x14a>
 80085ee:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 80085f0:	8a63      	ldrh	r3, [r4, #18]
 80085f2:	42ab      	cmp	r3, r5
 80085f4:	d1f7      	bne.n	80085e6 <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d0e1      	beq.n	80085be <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085fa:	7a22      	ldrb	r2, [r4, #8]
 80085fc:	b13a      	cbz	r2, 800860e <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80085fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008606:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008608:	b2db      	uxtb	r3, r3
 800860a:	429a      	cmp	r2, r3
 800860c:	d1eb      	bne.n	80085e6 <udp_input+0x9e>
    if (broadcast != 0) {
 800860e:	2f00      	cmp	r7, #0
 8008610:	d0dc      	beq.n	80085cc <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0df      	beq.n	80085d8 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008618:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800861c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008620:	d0da      	beq.n	80085d8 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008622:	4053      	eors	r3, r2
 8008624:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008626:	4213      	tst	r3, r2
 8008628:	d1dd      	bne.n	80085e6 <udp_input+0x9e>
 800862a:	e7d5      	b.n	80085d8 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800862c:	f1bb 0f00 	cmp.w	fp, #0
 8008630:	d010      	beq.n	8008654 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008632:	2f00      	cmp	r7, #0
 8008634:	d0d4      	beq.n	80085e0 <udp_input+0x98>
 8008636:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863e:	d1cf      	bne.n	80085e0 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8008640:	6873      	ldr	r3, [r6, #4]
 8008642:	f8db 2000 	ldr.w	r2, [fp]
 8008646:	429a      	cmp	r2, r3
 8008648:	d0ca      	beq.n	80085e0 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	4293      	cmp	r3, r2
 800864e:	bf08      	it	eq
 8008650:	46a3      	moveq	fp, r4
 8008652:	e7c5      	b.n	80085e0 <udp_input+0x98>
 8008654:	46a3      	mov	fp, r4
 8008656:	e7c3      	b.n	80085e0 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008658:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800865a:	b11b      	cbz	r3, 8008664 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800865c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008660:	4293      	cmp	r3, r2
 8008662:	d1c0      	bne.n	80085e6 <udp_input+0x9e>
        if (prev != NULL) {
 8008664:	9a03      	ldr	r2, [sp, #12]
 8008666:	b12a      	cbz	r2, 8008674 <udp_input+0x12c>
          prev->next = pcb->next;
 8008668:	68e3      	ldr	r3, [r4, #12]
 800866a:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800866c:	4b26      	ldr	r3, [pc, #152]	; (8008708 <udp_input+0x1c0>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 8008672:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008674:	2108      	movs	r1, #8
 8008676:	4648      	mov	r0, r9
 8008678:	f7fb fb38 	bl	8003cec <pbuf_remove_header>
 800867c:	bb08      	cbnz	r0, 80086c2 <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800867e:	69a5      	ldr	r5, [r4, #24]
 8008680:	b355      	cbz	r5, 80086d8 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008682:	69e0      	ldr	r0, [r4, #28]
 8008684:	f8cd a000 	str.w	sl, [sp]
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <udp_input+0x1d8>)
 800868a:	464a      	mov	r2, r9
 800868c:	4621      	mov	r1, r4
 800868e:	47a8      	blx	r5
 8008690:	e792      	b.n	80085b8 <udp_input+0x70>
  if (pcb != NULL) {
 8008692:	f1bb 0f00 	cmp.w	fp, #0
 8008696:	d133      	bne.n	8008700 <udp_input+0x1b8>
  if (for_us) {
 8008698:	6872      	ldr	r2, [r6, #4]
 800869a:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <udp_input+0x1bc>)
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d12a      	bne.n	80086f8 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80086a2:	2108      	movs	r1, #8
 80086a4:	4648      	mov	r0, r9
 80086a6:	f7fb fb21 	bl	8003cec <pbuf_remove_header>
 80086aa:	b950      	cbnz	r0, 80086c2 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80086ac:	b92f      	cbnz	r7, 80086ba <udp_input+0x172>
 80086ae:	4b15      	ldr	r3, [pc, #84]	; (8008704 <udp_input+0x1bc>)
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086b6:	2be0      	cmp	r3, #224	; 0xe0
 80086b8:	d112      	bne.n	80086e0 <udp_input+0x198>
      pbuf_free(p);
 80086ba:	4648      	mov	r0, r9
 80086bc:	f7fb fb56 	bl	8003d6c <pbuf_free>
 80086c0:	e77a      	b.n	80085b8 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <udp_input+0x1c4>)
 80086c4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80086c8:	4916      	ldr	r1, [pc, #88]	; (8008724 <udp_input+0x1dc>)
 80086ca:	4812      	ldr	r0, [pc, #72]	; (8008714 <udp_input+0x1cc>)
 80086cc:	f001 fce0 	bl	800a090 <iprintf>
      pbuf_free(p);
 80086d0:	4648      	mov	r0, r9
 80086d2:	f7fb fb4b 	bl	8003d6c <pbuf_free>
      goto end;
 80086d6:	e76f      	b.n	80085b8 <udp_input+0x70>
        pbuf_free(p);
 80086d8:	4648      	mov	r0, r9
 80086da:	f7fb fb47 	bl	8003d6c <pbuf_free>
        goto end;
 80086de:	e76b      	b.n	80085b8 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <udp_input+0x1bc>)
 80086e2:	8999      	ldrh	r1, [r3, #12]
 80086e4:	3108      	adds	r1, #8
 80086e6:	b209      	sxth	r1, r1
 80086e8:	4648      	mov	r0, r9
 80086ea:	f7fb fb33 	bl	8003d54 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80086ee:	2103      	movs	r1, #3
 80086f0:	4648      	mov	r0, r9
 80086f2:	f000 fd51 	bl	8009198 <icmp_dest_unreach>
 80086f6:	e7e0      	b.n	80086ba <udp_input+0x172>
    pbuf_free(p);
 80086f8:	4648      	mov	r0, r9
 80086fa:	f7fb fb37 	bl	8003d6c <pbuf_free>
  return;
 80086fe:	e75b      	b.n	80085b8 <udp_input+0x70>
 8008700:	465c      	mov	r4, fp
 8008702:	e7b7      	b.n	8008674 <udp_input+0x12c>
 8008704:	20005220 	.word	0x20005220
 8008708:	2000a9b8 	.word	0x2000a9b8
 800870c:	0800cc64 	.word	0x0800cc64
 8008710:	0800cc94 	.word	0x0800cc94
 8008714:	0800b1cc 	.word	0x0800b1cc
 8008718:	0800ccac 	.word	0x0800ccac
 800871c:	0800ccc8 	.word	0x0800ccc8
 8008720:	20005230 	.word	0x20005230
 8008724:	0800ccf0 	.word	0x0800ccf0

08008728 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008728:	b1a8      	cbz	r0, 8008756 <udp_netif_ip_addr_changed+0x2e>
 800872a:	4602      	mov	r2, r0
 800872c:	6803      	ldr	r3, [r0, #0]
 800872e:	b193      	cbz	r3, 8008756 <udp_netif_ip_addr_changed+0x2e>
 8008730:	b189      	cbz	r1, 8008756 <udp_netif_ip_addr_changed+0x2e>
 8008732:	680b      	ldr	r3, [r1, #0]
 8008734:	b17b      	cbz	r3, 8008756 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008736:	4b08      	ldr	r3, [pc, #32]	; (8008758 <udp_netif_ip_addr_changed+0x30>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	b163      	cbz	r3, 8008756 <udp_netif_ip_addr_changed+0x2e>
{
 800873c:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800873e:	6810      	ldr	r0, [r2, #0]
 8008740:	681c      	ldr	r4, [r3, #0]
 8008742:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008744:	bf04      	itt	eq
 8008746:	6808      	ldreq	r0, [r1, #0]
 8008748:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1f6      	bne.n	800873e <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8008750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	4770      	bx	lr
 8008758:	2000a9b8 	.word	0x2000a9b8

0800875c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800875c:	b510      	push	{r4, lr}
 800875e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008760:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <etharp_free_entry+0x30>)
 8008766:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800876a:	b138      	cbz	r0, 800877c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800876c:	f7fb fafe 	bl	8003d6c <pbuf_free>
    arp_table[i].q = NULL;
 8008770:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	4a05      	ldr	r2, [pc, #20]	; (800878c <etharp_free_entry+0x30>)
 8008778:	2100      	movs	r1, #0
 800877a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800877c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008780:	4802      	ldr	r0, [pc, #8]	; (800878c <etharp_free_entry+0x30>)
 8008782:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8008786:	2300      	movs	r3, #0
 8008788:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800878a:	bd10      	pop	{r4, pc}
 800878c:	2000a9bc 	.word	0x2000a9bc

08008790 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	b085      	sub	sp, #20
 8008796:	4606      	mov	r6, r0
 8008798:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800879a:	4c4f      	ldr	r4, [pc, #316]	; (80088d8 <etharp_find_entry+0x148>)
{
 800879c:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800879e:	4699      	mov	r9, r3
 80087a0:	9302      	str	r3, [sp, #8]
 80087a2:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 80087a4:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 80087a6:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80087a8:	4680      	mov	r8, r0
 80087aa:	9003      	str	r0, [sp, #12]
 80087ac:	4682      	mov	sl, r0
 80087ae:	9101      	str	r1, [sp, #4]
 80087b0:	e007      	b.n	80087c2 <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80087b2:	f1bc 0f00 	cmp.w	ip, #0
 80087b6:	d10e      	bne.n	80087d6 <etharp_find_entry+0x46>
 80087b8:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80087ba:	3301      	adds	r3, #1
 80087bc:	3418      	adds	r4, #24
 80087be:	2b0a      	cmp	r3, #10
 80087c0:	d02e      	beq.n	8008820 <etharp_find_entry+0x90>
 80087c2:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 80087c6:	4622      	mov	r2, r4
 80087c8:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80087cc:	2d0a      	cmp	r5, #10
 80087ce:	d0f0      	beq.n	80087b2 <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 80087d0:	f1bc 0f00 	cmp.w	ip, #0
 80087d4:	d0f1      	beq.n	80087ba <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80087d6:	b11e      	cbz	r6, 80087e0 <etharp_find_entry+0x50>
 80087d8:	6831      	ldr	r1, [r6, #0]
 80087da:	6850      	ldr	r0, [r2, #4]
 80087dc:	4281      	cmp	r1, r0
 80087de:	d008      	beq.n	80087f2 <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80087e0:	f1bc 0f01 	cmp.w	ip, #1
 80087e4:	d00c      	beq.n	8008800 <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80087e6:	8a52      	ldrh	r2, [r2, #18]
 80087e8:	454a      	cmp	r2, r9
 80087ea:	d3e6      	bcc.n	80087ba <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 80087ec:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 80087ee:	46f0      	mov	r8, lr
 80087f0:	e7e3      	b.n	80087ba <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80087f2:	2f00      	cmp	r7, #0
 80087f4:	d064      	beq.n	80088c0 <etharp_find_entry+0x130>
 80087f6:	6891      	ldr	r1, [r2, #8]
 80087f8:	42b9      	cmp	r1, r7
 80087fa:	d1f1      	bne.n	80087e0 <etharp_find_entry+0x50>
 80087fc:	4675      	mov	r5, lr
 80087fe:	e031      	b.n	8008864 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 8008800:	6811      	ldr	r1, [r2, #0]
 8008802:	b129      	cbz	r1, 8008810 <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 8008804:	8a52      	ldrh	r2, [r2, #18]
 8008806:	455a      	cmp	r2, fp
 8008808:	d3d7      	bcc.n	80087ba <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 800880a:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800880c:	46f2      	mov	sl, lr
 800880e:	e7d4      	b.n	80087ba <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 8008810:	8a52      	ldrh	r2, [r2, #18]
 8008812:	9902      	ldr	r1, [sp, #8]
 8008814:	428a      	cmp	r2, r1
 8008816:	d3d0      	bcc.n	80087ba <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 8008818:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800881a:	f8cd e00c 	str.w	lr, [sp, #12]
 800881e:	e7cc      	b.n	80087ba <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008820:	4650      	mov	r0, sl
 8008822:	9901      	ldr	r1, [sp, #4]
 8008824:	f011 0f02 	tst.w	r1, #2
 8008828:	d14c      	bne.n	80088c4 <etharp_find_entry+0x134>
 800882a:	2d0a      	cmp	r5, #10
 800882c:	d01e      	beq.n	800886c <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800882e:	2d09      	cmp	r5, #9
 8008830:	dc1f      	bgt.n	8008872 <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008832:	462c      	mov	r4, r5
 8008834:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008838:	4a27      	ldr	r2, [pc, #156]	; (80088d8 <etharp_find_entry+0x148>)
 800883a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800883e:	7d1b      	ldrb	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d135      	bne.n	80088b0 <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008844:	b136      	cbz	r6, 8008854 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800884c:	4a22      	ldr	r2, [pc, #136]	; (80088d8 <etharp_find_entry+0x148>)
 800884e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008852:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8008854:	4b20      	ldr	r3, [pc, #128]	; (80088d8 <etharp_find_entry+0x148>)
 8008856:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800885a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800885e:	2100      	movs	r1, #0
 8008860:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008862:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8008864:	4628      	mov	r0, r5
 8008866:	b005      	add	sp, #20
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800886c:	f011 0f01 	tst.w	r1, #1
 8008870:	d02b      	beq.n	80088ca <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 8008872:	f1b8 0f09 	cmp.w	r8, #9
 8008876:	dc11      	bgt.n	800889c <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008878:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800887c:	4a16      	ldr	r2, [pc, #88]	; (80088d8 <etharp_find_entry+0x148>)
 800887e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008882:	b133      	cbz	r3, 8008892 <etharp_find_entry+0x102>
 8008884:	4b15      	ldr	r3, [pc, #84]	; (80088dc <etharp_find_entry+0x14c>)
 8008886:	f240 126d 	movw	r2, #365	; 0x16d
 800888a:	4915      	ldr	r1, [pc, #84]	; (80088e0 <etharp_find_entry+0x150>)
 800888c:	4815      	ldr	r0, [pc, #84]	; (80088e4 <etharp_find_entry+0x154>)
 800888e:	f001 fbff 	bl	800a090 <iprintf>
    etharp_free_entry(i);
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff ff62 	bl	800875c <etharp_free_entry>
 8008898:	4645      	mov	r5, r8
 800889a:	e7ca      	b.n	8008832 <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	2b09      	cmp	r3, #9
 80088a0:	dd16      	ble.n	80088d0 <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80088a2:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 80088a4:	bfc8      	it	gt
 80088a6:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 80088aa:	dcdb      	bgt.n	8008864 <etharp_find_entry+0xd4>
 80088ac:	4680      	mov	r8, r0
 80088ae:	e7f0      	b.n	8008892 <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <etharp_find_entry+0x14c>)
 80088b2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80088b6:	490c      	ldr	r1, [pc, #48]	; (80088e8 <etharp_find_entry+0x158>)
 80088b8:	480a      	ldr	r0, [pc, #40]	; (80088e4 <etharp_find_entry+0x154>)
 80088ba:	f001 fbe9 	bl	800a090 <iprintf>
 80088be:	e7c1      	b.n	8008844 <etharp_find_entry+0xb4>
 80088c0:	4675      	mov	r5, lr
 80088c2:	e7cf      	b.n	8008864 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 80088c4:	f04f 35ff 	mov.w	r5, #4294967295
 80088c8:	e7cc      	b.n	8008864 <etharp_find_entry+0xd4>
 80088ca:	f04f 35ff 	mov.w	r5, #4294967295
 80088ce:	e7c9      	b.n	8008864 <etharp_find_entry+0xd4>
 80088d0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088d4:	e7dd      	b.n	8008892 <etharp_find_entry+0x102>
 80088d6:	bf00      	nop
 80088d8:	2000a9bc 	.word	0x2000a9bc
 80088dc:	0800cd0c 	.word	0x0800cd0c
 80088e0:	0800cd44 	.word	0x0800cd44
 80088e4:	0800b1cc 	.word	0x0800b1cc
 80088e8:	0800cd5c 	.word	0x0800cd5c

080088ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	460f      	mov	r7, r1
 80088f4:	4690      	mov	r8, r2
 80088f6:	461d      	mov	r5, r3
 80088f8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80088fc:	4681      	mov	r9, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d042      	beq.n	8008988 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008902:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008906:	211c      	movs	r1, #28
 8008908:	200e      	movs	r0, #14
 800890a:	f7fb fa99 	bl	8003e40 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800890e:	4606      	mov	r6, r0
 8008910:	2800      	cmp	r0, #0
 8008912:	d051      	beq.n	80089b8 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008914:	8943      	ldrh	r3, [r0, #10]
 8008916:	2b1b      	cmp	r3, #27
 8008918:	d93e      	bls.n	8008998 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800891a:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800891c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008920:	f7fa fc57 	bl	80031d2 <lwip_htons>
 8008924:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008926:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800892a:	2b06      	cmp	r3, #6
 800892c:	d13c      	bne.n	80089a8 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	88ab      	ldrh	r3, [r5, #4]
 8008934:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008936:	f8da 3000 	ldr.w	r3, [sl]
 800893a:	f8c4 3012 	str.w	r3, [r4, #18]
 800893e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8008942:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800894c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008952:	2500      	movs	r5, #0
 8008954:	7025      	strb	r5, [r4, #0]
 8008956:	2301      	movs	r3, #1
 8008958:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800895a:	2308      	movs	r3, #8
 800895c:	70a3      	strb	r3, [r4, #2]
 800895e:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8008960:	2306      	movs	r3, #6
 8008962:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008964:	2304      	movs	r3, #4
 8008966:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008968:	f640 0306 	movw	r3, #2054	; 0x806
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4643      	mov	r3, r8
 8008970:	463a      	mov	r2, r7
 8008972:	4631      	mov	r1, r6
 8008974:	4648      	mov	r0, r9
 8008976:	f001 fb09 	bl	8009f8c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800897a:	4630      	mov	r0, r6
 800897c:	f7fb f9f6 	bl	8003d6c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8008980:	4628      	mov	r0, r5
}
 8008982:	b002      	add	sp, #8
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <etharp_raw+0xd4>)
 800898a:	f240 4257 	movw	r2, #1111	; 0x457
 800898e:	490d      	ldr	r1, [pc, #52]	; (80089c4 <etharp_raw+0xd8>)
 8008990:	480d      	ldr	r0, [pc, #52]	; (80089c8 <etharp_raw+0xdc>)
 8008992:	f001 fb7d 	bl	800a090 <iprintf>
 8008996:	e7b4      	b.n	8008902 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008998:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <etharp_raw+0xd4>)
 800899a:	f240 4262 	movw	r2, #1122	; 0x462
 800899e:	490b      	ldr	r1, [pc, #44]	; (80089cc <etharp_raw+0xe0>)
 80089a0:	4809      	ldr	r0, [pc, #36]	; (80089c8 <etharp_raw+0xdc>)
 80089a2:	f001 fb75 	bl	800a090 <iprintf>
 80089a6:	e7b8      	b.n	800891a <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <etharp_raw+0xd4>)
 80089aa:	f240 4269 	movw	r2, #1129	; 0x469
 80089ae:	4908      	ldr	r1, [pc, #32]	; (80089d0 <etharp_raw+0xe4>)
 80089b0:	4805      	ldr	r0, [pc, #20]	; (80089c8 <etharp_raw+0xdc>)
 80089b2:	f001 fb6d 	bl	800a090 <iprintf>
 80089b6:	e7ba      	b.n	800892e <etharp_raw+0x42>
    return ERR_MEM;
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e7e1      	b.n	8008982 <etharp_raw+0x96>
 80089be:	bf00      	nop
 80089c0:	0800cd0c 	.word	0x0800cd0c
 80089c4:	0800b210 	.word	0x0800b210
 80089c8:	0800b1cc 	.word	0x0800b1cc
 80089cc:	0800cd88 	.word	0x0800cd88
 80089d0:	0800cdbc 	.word	0x0800cdbc

080089d4 <etharp_cleanup_netif>:
{
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80089d8:	4c08      	ldr	r4, [pc, #32]	; (80089fc <etharp_cleanup_netif+0x28>)
 80089da:	2500      	movs	r5, #0
 80089dc:	e003      	b.n	80089e6 <etharp_cleanup_netif+0x12>
 80089de:	3501      	adds	r5, #1
 80089e0:	3418      	adds	r4, #24
 80089e2:	2d0a      	cmp	r5, #10
 80089e4:	d009      	beq.n	80089fa <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80089e6:	7d23      	ldrb	r3, [r4, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0f8      	beq.n	80089de <etharp_cleanup_netif+0xa>
 80089ec:	68a3      	ldr	r3, [r4, #8]
 80089ee:	42b3      	cmp	r3, r6
 80089f0:	d1f5      	bne.n	80089de <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 80089f2:	4628      	mov	r0, r5
 80089f4:	f7ff feb2 	bl	800875c <etharp_free_entry>
 80089f8:	e7f1      	b.n	80089de <etharp_cleanup_netif+0xa>
}
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	2000a9bc 	.word	0x2000a9bc

08008a00 <etharp_input>:
{
 8008a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a04:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008a06:	b1a9      	cbz	r1, 8008a34 <etharp_input+0x34>
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8008a0c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008a0e:	882b      	ldrh	r3, [r5, #0]
 8008a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a14:	d108      	bne.n	8008a28 <etharp_input+0x28>
 8008a16:	792b      	ldrb	r3, [r5, #4]
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	d105      	bne.n	8008a28 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008a1c:	796b      	ldrb	r3, [r5, #5]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d102      	bne.n	8008a28 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008a22:	886b      	ldrh	r3, [r5, #2]
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d00d      	beq.n	8008a44 <etharp_input+0x44>
    pbuf_free(p);
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7fb f99f 	bl	8003d6c <pbuf_free>
}
 8008a2e:	b007      	add	sp, #28
 8008a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008a34:	4b44      	ldr	r3, [pc, #272]	; (8008b48 <etharp_input+0x148>)
 8008a36:	f240 228a 	movw	r2, #650	; 0x28a
 8008a3a:	4944      	ldr	r1, [pc, #272]	; (8008b4c <etharp_input+0x14c>)
 8008a3c:	4844      	ldr	r0, [pc, #272]	; (8008b50 <etharp_input+0x150>)
 8008a3e:	f001 fb27 	bl	800a090 <iprintf>
 8008a42:	e7f4      	b.n	8008a2e <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008a44:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8008a48:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008a4a:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a4c:	684b      	ldr	r3, [r1, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d153      	bne.n	8008afa <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008a52:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 8008a56:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008a5a:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008a5e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8008a62:	2b06      	cmp	r3, #6
 8008a64:	d155      	bne.n	8008b12 <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 8008a66:	9805      	ldr	r0, [sp, #20]
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d03e      	beq.n	8008aea <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	f000 fd5c 	bl	800952a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d139      	bne.n	8008aea <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 8008a76:	9b05      	ldr	r3, [sp, #20]
 8008a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008a7c:	2be0      	cmp	r3, #224	; 0xe0
 8008a7e:	d034      	beq.n	8008aea <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 8008a80:	4632      	mov	r2, r6
 8008a82:	4641      	mov	r1, r8
 8008a84:	a805      	add	r0, sp, #20
 8008a86:	f7ff fe83 	bl	8008790 <etharp_find_entry>
  if (i < 0) {
 8008a8a:	1e03      	subs	r3, r0, #0
 8008a8c:	db2d      	blt.n	8008aea <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008a8e:	4931      	ldr	r1, [pc, #196]	; (8008b54 <etharp_input+0x154>)
 8008a90:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8008a94:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 8008a98:	2202      	movs	r2, #2
 8008a9a:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 8008a9e:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008aa2:	4672      	mov	r2, lr
 8008aa4:	00d2      	lsls	r2, r2, #3
 8008aa6:	320c      	adds	r2, #12
 8008aa8:	eb01 0802 	add.w	r8, r1, r2
 8008aac:	6838      	ldr	r0, [r7, #0]
 8008aae:	5088      	str	r0, [r1, r2]
 8008ab0:	88ba      	ldrh	r2, [r7, #4]
 8008ab2:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 8008abc:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	d011      	beq.n	8008aea <etharp_input+0xea>
    arp_table[i].q = NULL;
 8008ac6:	4673      	mov	r3, lr
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	460a      	mov	r2, r1
 8008acc:	2100      	movs	r1, #0
 8008ace:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	463b      	mov	r3, r7
 8008ad8:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8008adc:	4641      	mov	r1, r8
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f001 fa54 	bl	8009f8c <ethernet_output>
    pbuf_free(p);
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	f7fb f941 	bl	8003d6c <pbuf_free>
  switch (hdr->opcode) {
 8008aea:	88eb      	ldrh	r3, [r5, #6]
 8008aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af0:	d017      	beq.n	8008b22 <etharp_input+0x122>
  pbuf_free(p);
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7fb f93a 	bl	8003d6c <pbuf_free>
 8008af8:	e799      	b.n	8008a2e <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008afa:	f105 0708 	add.w	r7, r5, #8
 8008afe:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008b00:	bf19      	ittee	ne
 8008b02:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008b06:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008b0a:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008b0e:	46c8      	moveq	r8, r9
 8008b10:	e7a5      	b.n	8008a5e <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <etharp_input+0x148>)
 8008b14:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008b18:	490f      	ldr	r1, [pc, #60]	; (8008b58 <etharp_input+0x158>)
 8008b1a:	480d      	ldr	r0, [pc, #52]	; (8008b50 <etharp_input+0x150>)
 8008b1c:	f001 fab8 	bl	800a090 <iprintf>
 8008b20:	e7a1      	b.n	8008a66 <etharp_input+0x66>
      if (for_us) {
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d0e4      	beq.n	8008af2 <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008b28:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	9303      	str	r3, [sp, #12]
 8008b30:	ab05      	add	r3, sp, #20
 8008b32:	9302      	str	r3, [sp, #8]
 8008b34:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008b36:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff fed4 	bl	80088ec <etharp_raw>
 8008b44:	e7d5      	b.n	8008af2 <etharp_input+0xf2>
 8008b46:	bf00      	nop
 8008b48:	0800cd0c 	.word	0x0800cd0c
 8008b4c:	0800b210 	.word	0x0800b210
 8008b50:	0800b1cc 	.word	0x0800b1cc
 8008b54:	2000a9bc 	.word	0x2000a9bc
 8008b58:	0800ce20 	.word	0x0800ce20

08008b5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008b62:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8008b66:	2401      	movs	r4, #1
 8008b68:	9403      	str	r4, [sp, #12]
 8008b6a:	9102      	str	r1, [sp, #8]
 8008b6c:	4904      	ldr	r1, [pc, #16]	; (8008b80 <etharp_request+0x24>)
 8008b6e:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008b70:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008b72:	9200      	str	r2, [sp, #0]
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <etharp_request+0x28>)
 8008b76:	4619      	mov	r1, r3
 8008b78:	f7ff feb8 	bl	80088ec <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8008b7c:	b004      	add	sp, #16
 8008b7e:	bd10      	pop	{r4, pc}
 8008b80:	0800d1f4 	.word	0x0800d1f4
 8008b84:	0800d1ec 	.word	0x0800d1ec

08008b88 <etharp_tmr>:
{
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008b8a:	4c14      	ldr	r4, [pc, #80]	; (8008bdc <etharp_tmr+0x54>)
 8008b8c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008b8e:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008b90:	2604      	movs	r6, #4
 8008b92:	e008      	b.n	8008ba6 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d91b      	bls.n	8008bd0 <etharp_tmr+0x48>
        etharp_free_entry(i);
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f7ff fddf 	bl	800875c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008b9e:	3501      	adds	r5, #1
 8008ba0:	3418      	adds	r4, #24
 8008ba2:	2d0a      	cmp	r5, #10
 8008ba4:	d018      	beq.n	8008bd8 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d0f7      	beq.n	8008b9e <etharp_tmr+0x16>
      arp_table[i].ctime++;
 8008bae:	89e3      	ldrh	r3, [r4, #14]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008bb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008bba:	d2ed      	bcs.n	8008b98 <etharp_tmr+0x10>
 8008bbc:	2a01      	cmp	r2, #1
 8008bbe:	d0e9      	beq.n	8008b94 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8008bc0:	2a03      	cmp	r2, #3
 8008bc2:	d003      	beq.n	8008bcc <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008bc4:	2a04      	cmp	r2, #4
 8008bc6:	d1ea      	bne.n	8008b9e <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008bc8:	7427      	strb	r7, [r4, #16]
 8008bca:	e7e8      	b.n	8008b9e <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008bcc:	7426      	strb	r6, [r4, #16]
 8008bce:	e7e6      	b.n	8008b9e <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008bd0:	6860      	ldr	r0, [r4, #4]
 8008bd2:	f7ff ffc3 	bl	8008b5c <etharp_request>
 8008bd6:	e7e2      	b.n	8008b9e <etharp_tmr+0x16>
}
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000a9c0 	.word	0x2000a9c0

08008be0 <etharp_output_to_arp_index>:
{
 8008be0:	b570      	push	{r4, r5, r6, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	4605      	mov	r5, r0
 8008be6:	460e      	mov	r6, r1
 8008be8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008bea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008bee:	4b32      	ldr	r3, [pc, #200]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf4:	7d1b      	ldrb	r3, [r3, #20]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d919      	bls.n	8008c2e <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008bfa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008bfe:	4a2e      	ldr	r2, [pc, #184]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c04:	7d1b      	ldrb	r3, [r3, #20]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d019      	beq.n	8008c3e <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008c0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008c0e:	4b2a      	ldr	r3, [pc, #168]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008c10:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	f104 030c 	add.w	r3, r4, #12
 8008c1e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 8008c22:	4631      	mov	r1, r6
 8008c24:	4628      	mov	r0, r5
 8008c26:	f001 f9b1 	bl	8009f8c <ethernet_output>
}
 8008c2a:	b004      	add	sp, #16
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008c2e:	4b23      	ldr	r3, [pc, #140]	; (8008cbc <etharp_output_to_arp_index+0xdc>)
 8008c30:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008c34:	4922      	ldr	r1, [pc, #136]	; (8008cc0 <etharp_output_to_arp_index+0xe0>)
 8008c36:	4823      	ldr	r0, [pc, #140]	; (8008cc4 <etharp_output_to_arp_index+0xe4>)
 8008c38:	f001 fa2a 	bl	800a090 <iprintf>
 8008c3c:	e7dd      	b.n	8008bfa <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008c3e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008c42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c46:	8a5b      	ldrh	r3, [r3, #18]
 8008c48:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008c4c:	d822      	bhi.n	8008c94 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008c4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008c52:	d3da      	bcc.n	8008c0a <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c54:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008c58:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008c5a:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c5e:	4a16      	ldr	r2, [pc, #88]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008c60:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008c64:	2301      	movs	r3, #1
 8008c66:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c68:	3004      	adds	r0, #4
 8008c6a:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008c6c:	9002      	str	r0, [sp, #8]
 8008c6e:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <etharp_output_to_arp_index+0xe8>)
 8008c70:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008c72:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	460b      	mov	r3, r1
 8008c78:	4462      	add	r2, ip
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f7ff fe36 	bl	80088ec <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d1c2      	bne.n	8008c0a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008c84:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008c88:	4a0b      	ldr	r2, [pc, #44]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008c8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c8e:	2203      	movs	r2, #3
 8008c90:	751a      	strb	r2, [r3, #20]
 8008c92:	e7ba      	b.n	8008c0a <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008c94:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008c98:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8008c9c:	3104      	adds	r1, #4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7ff ff5c 	bl	8008b5c <etharp_request>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d1b0      	bne.n	8008c0a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008ca8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008cac:	4a02      	ldr	r2, [pc, #8]	; (8008cb8 <etharp_output_to_arp_index+0xd8>)
 8008cae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	751a      	strb	r2, [r3, #20]
 8008cb6:	e7a8      	b.n	8008c0a <etharp_output_to_arp_index+0x2a>
 8008cb8:	2000a9bc 	.word	0x2000a9bc
 8008cbc:	0800cd0c 	.word	0x0800cd0c
 8008cc0:	0800ce44 	.word	0x0800ce44
 8008cc4:	0800b1cc 	.word	0x0800b1cc
 8008cc8:	0800d1f4 	.word	0x0800d1f4

08008ccc <etharp_query>:
{
 8008ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008cd8:	4601      	mov	r1, r0
 8008cda:	6828      	ldr	r0, [r5, #0]
 8008cdc:	f000 fc25 	bl	800952a <ip4_addr_isbroadcast_u32>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d16b      	bne.n	8008dbc <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008cea:	2ae0      	cmp	r2, #224	; 0xe0
 8008cec:	d069      	beq.n	8008dc2 <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d06a      	beq.n	8008dc8 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008cf2:	4632      	mov	r2, r6
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff fd4a 	bl	8008790 <etharp_find_entry>
  if (i_err < 0) {
 8008cfc:	1e04      	subs	r4, r0, #0
 8008cfe:	db2b      	blt.n	8008d58 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008d00:	b2a3      	uxth	r3, r4
 8008d02:	2b7e      	cmp	r3, #126	; 0x7e
 8008d04:	d82a      	bhi.n	8008d5c <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 8008d06:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008d08:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008d0c:	4b46      	ldr	r3, [pc, #280]	; (8008e28 <etharp_query+0x15c>)
 8008d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d12:	7d1b      	ldrb	r3, [r3, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 8082 	bne.w	8008e1e <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	4a42      	ldr	r2, [pc, #264]	; (8008e28 <etharp_query+0x15c>)
 8008d1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d22:	2201      	movs	r2, #1
 8008d24:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 8008d26:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff ff16 	bl	8008b5c <etharp_request>
    if (q == NULL) {
 8008d30:	b36f      	cbz	r7, 8008d8e <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008d32:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008d36:	4a3c      	ldr	r2, [pc, #240]	; (8008e28 <etharp_query+0x15c>)
 8008d38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d3c:	7d1b      	ldrb	r3, [r3, #20]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d814      	bhi.n	8008d6c <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d123      	bne.n	8008d8e <etharp_query+0xc2>
    while (p) {
 8008d46:	2f00      	cmp	r7, #0
 8008d48:	d044      	beq.n	8008dd4 <etharp_query+0x108>
    p = q;
 8008d4a:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008d4c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8008e30 <etharp_query+0x164>
 8008d50:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008e3c <etharp_query+0x170>
 8008d54:	4e35      	ldr	r6, [pc, #212]	; (8008e2c <etharp_query+0x160>)
 8008d56:	e023      	b.n	8008da0 <etharp_query+0xd4>
    return (err_t)i_err;
 8008d58:	b260      	sxtb	r0, r4
 8008d5a:	e018      	b.n	8008d8e <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008d5c:	4b34      	ldr	r3, [pc, #208]	; (8008e30 <etharp_query+0x164>)
 8008d5e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008d62:	4934      	ldr	r1, [pc, #208]	; (8008e34 <etharp_query+0x168>)
 8008d64:	4831      	ldr	r0, [pc, #196]	; (8008e2c <etharp_query+0x160>)
 8008d66:	f001 f993 	bl	800a090 <iprintf>
 8008d6a:	e7cc      	b.n	8008d06 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 8008d6c:	4b32      	ldr	r3, [pc, #200]	; (8008e38 <etharp_query+0x16c>)
 8008d6e:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008d70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008d74:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <etharp_query+0x15c>)
 8008d76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d7e:	9200      	str	r2, [sp, #0]
 8008d80:	330c      	adds	r3, #12
 8008d82:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8008d86:	4639      	mov	r1, r7
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f001 f8ff 	bl	8009f8c <ethernet_output>
}
 8008d8e:	b003      	add	sp, #12
 8008d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 8008d94:	7b2b      	ldrb	r3, [r5, #12]
 8008d96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d9a:	d128      	bne.n	8008dee <etharp_query+0x122>
      p = p->next;
 8008d9c:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8008d9e:	b1cd      	cbz	r5, 8008dd4 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008da0:	896a      	ldrh	r2, [r5, #10]
 8008da2:	892b      	ldrh	r3, [r5, #8]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d1f5      	bne.n	8008d94 <etharp_query+0xc8>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b1e3      	cbz	r3, 8008de6 <etharp_query+0x11a>
 8008dac:	464b      	mov	r3, r9
 8008dae:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008db2:	4641      	mov	r1, r8
 8008db4:	4630      	mov	r0, r6
 8008db6:	f001 f96b 	bl	800a090 <iprintf>
 8008dba:	e7eb      	b.n	8008d94 <etharp_query+0xc8>
    return ERR_ARG;
 8008dbc:	f06f 000f 	mvn.w	r0, #15
 8008dc0:	e7e5      	b.n	8008d8e <etharp_query+0xc2>
 8008dc2:	f06f 000f 	mvn.w	r0, #15
 8008dc6:	e7e2      	b.n	8008d8e <etharp_query+0xc2>
 8008dc8:	f06f 000f 	mvn.w	r0, #15
 8008dcc:	e7df      	b.n	8008d8e <etharp_query+0xc2>
      result = ERR_MEM;
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	e7dc      	b.n	8008d8e <etharp_query+0xc2>
      pbuf_ref(p);
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7fb f92f 	bl	8004038 <pbuf_ref>
 8008dda:	e00f      	b.n	8008dfc <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff febc 	bl	8008b5c <etharp_request>
    if (q == NULL) {
 8008de4:	e7d3      	b.n	8008d8e <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 8008de6:	7b2b      	ldrb	r3, [r5, #12]
 8008de8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dec:	d0f2      	beq.n	8008dd4 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008dee:	463a      	mov	r2, r7
 8008df0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008df4:	200e      	movs	r0, #14
 8008df6:	f7fb fa6d 	bl	80042d4 <pbuf_clone>
 8008dfa:	4607      	mov	r7, r0
    if (p != NULL) {
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	d0e6      	beq.n	8008dce <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 8008e00:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008e04:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <etharp_query+0x15c>)
 8008e06:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008e0a:	b108      	cbz	r0, 8008e10 <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 8008e0c:	f7fa ffae 	bl	8003d6c <pbuf_free>
      arp_table[i].q = p;
 8008e10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008e14:	4a04      	ldr	r2, [pc, #16]	; (8008e28 <etharp_query+0x15c>)
 8008e16:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e7b7      	b.n	8008d8e <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	d0dc      	beq.n	8008ddc <etharp_query+0x110>
  err_t result = ERR_MEM;
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	e784      	b.n	8008d32 <etharp_query+0x66>
 8008e28:	2000a9bc 	.word	0x2000a9bc
 8008e2c:	0800b1cc 	.word	0x0800b1cc
 8008e30:	0800cd0c 	.word	0x0800cd0c
 8008e34:	0800ce74 	.word	0x0800ce74
 8008e38:	2000aaac 	.word	0x2000aaac
 8008e3c:	0800ce84 	.word	0x0800ce84

08008e40 <etharp_output>:
{
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	b085      	sub	sp, #20
 8008e44:	460e      	mov	r6, r1
 8008e46:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008e48:	4605      	mov	r5, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d032      	beq.n	8008eb4 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	d038      	beq.n	8008ec4 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	d03e      	beq.n	8008ed4 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008e56:	4629      	mov	r1, r5
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	f000 fb66 	bl	800952a <ip4_addr_isbroadcast_u32>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f040 8082 	bne.w	8008f68 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e6a:	2ae0      	cmp	r2, #224	; 0xe0
 8008e6c:	d03a      	beq.n	8008ee4 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e6e:	686a      	ldr	r2, [r5, #4]
 8008e70:	405a      	eors	r2, r3
 8008e72:	68a9      	ldr	r1, [r5, #8]
 8008e74:	420a      	tst	r2, r1
 8008e76:	d009      	beq.n	8008e8c <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 8008e78:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008e7a:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d004      	beq.n	8008e8c <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008e82:	68eb      	ldr	r3, [r5, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d07b      	beq.n	8008f80 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 8008e88:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e8c:	4b3e      	ldr	r3, [pc, #248]	; (8008f88 <etharp_output+0x148>)
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8008e94:	4b3d      	ldr	r3, [pc, #244]	; (8008f8c <etharp_output+0x14c>)
 8008e96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008e9a:	7d1b      	ldrb	r3, [r3, #20]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d906      	bls.n	8008eae <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	493a      	ldr	r1, [pc, #232]	; (8008f8c <etharp_output+0x14c>)
 8008ea4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	42ab      	cmp	r3, r5
 8008eac:	d030      	beq.n	8008f10 <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008eae:	4b37      	ldr	r3, [pc, #220]	; (8008f8c <etharp_output+0x14c>)
{
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e03f      	b.n	8008f34 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008eb4:	4b36      	ldr	r3, [pc, #216]	; (8008f90 <etharp_output+0x150>)
 8008eb6:	f240 321e 	movw	r2, #798	; 0x31e
 8008eba:	4936      	ldr	r1, [pc, #216]	; (8008f94 <etharp_output+0x154>)
 8008ebc:	4836      	ldr	r0, [pc, #216]	; (8008f98 <etharp_output+0x158>)
 8008ebe:	f001 f8e7 	bl	800a090 <iprintf>
 8008ec2:	e7c4      	b.n	8008e4e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008ec4:	4b32      	ldr	r3, [pc, #200]	; (8008f90 <etharp_output+0x150>)
 8008ec6:	f240 321f 	movw	r2, #799	; 0x31f
 8008eca:	4934      	ldr	r1, [pc, #208]	; (8008f9c <etharp_output+0x15c>)
 8008ecc:	4832      	ldr	r0, [pc, #200]	; (8008f98 <etharp_output+0x158>)
 8008ece:	f001 f8df 	bl	800a090 <iprintf>
 8008ed2:	e7be      	b.n	8008e52 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008ed4:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <etharp_output+0x150>)
 8008ed6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008eda:	4931      	ldr	r1, [pc, #196]	; (8008fa0 <etharp_output+0x160>)
 8008edc:	482e      	ldr	r0, [pc, #184]	; (8008f98 <etharp_output+0x158>)
 8008ede:	f001 f8d7 	bl	800a090 <iprintf>
 8008ee2:	e7b8      	b.n	8008e56 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008eea:	2300      	movs	r3, #0
 8008eec:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008ef0:	235e      	movs	r3, #94	; 0x5e
 8008ef2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008ef6:	7863      	ldrb	r3, [r4, #1]
 8008ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efc:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008f00:	78a3      	ldrb	r3, [r4, #2]
 8008f02:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008f06:	78e3      	ldrb	r3, [r4, #3]
 8008f08:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8008f0c:	ab02      	add	r3, sp, #8
 8008f0e:	e02c      	b.n	8008f6a <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008f10:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8008f14:	491d      	ldr	r1, [pc, #116]	; (8008f8c <etharp_output+0x14c>)
 8008f16:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008f1a:	6821      	ldr	r1, [r4, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	4299      	cmp	r1, r3
 8008f20:	d1c5      	bne.n	8008eae <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff fe5b 	bl	8008be0 <etharp_output_to_arp_index>
 8008f2a:	e027      	b.n	8008f7c <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	3318      	adds	r3, #24
 8008f30:	280a      	cmp	r0, #10
 8008f32:	d013      	beq.n	8008f5c <etharp_output+0x11c>
 8008f34:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008f36:	f893 c014 	ldrb.w	ip, [r3, #20]
 8008f3a:	f1bc 0f01 	cmp.w	ip, #1
 8008f3e:	d9f5      	bls.n	8008f2c <etharp_output+0xec>
 8008f40:	6899      	ldr	r1, [r3, #8]
 8008f42:	42a9      	cmp	r1, r5
 8008f44:	d1f2      	bne.n	8008f2c <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 8008f46:	6821      	ldr	r1, [r4, #0]
 8008f48:	685f      	ldr	r7, [r3, #4]
 8008f4a:	42b9      	cmp	r1, r7
 8008f4c:	d1ee      	bne.n	8008f2c <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <etharp_output+0x148>)
 8008f50:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7ff fe43 	bl	8008be0 <etharp_output_to_arp_index>
 8008f5a:	e00f      	b.n	8008f7c <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 8008f5c:	4632      	mov	r2, r6
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7ff feb3 	bl	8008ccc <etharp_query>
 8008f66:	e009      	b.n	8008f7c <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8008f68:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6e:	9200      	str	r2, [sp, #0]
 8008f70:	f105 0226 	add.w	r2, r5, #38	; 0x26
 8008f74:	4631      	mov	r1, r6
 8008f76:	4628      	mov	r0, r5
 8008f78:	f001 f808 	bl	8009f8c <ethernet_output>
}
 8008f7c:	b005      	add	sp, #20
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 8008f80:	f06f 0003 	mvn.w	r0, #3
 8008f84:	e7fa      	b.n	8008f7c <etharp_output+0x13c>
 8008f86:	bf00      	nop
 8008f88:	2000aaac 	.word	0x2000aaac
 8008f8c:	2000a9bc 	.word	0x2000a9bc
 8008f90:	0800cd0c 	.word	0x0800cd0c
 8008f94:	0800b210 	.word	0x0800b210
 8008f98:	0800b1cc 	.word	0x0800b1cc
 8008f9c:	0800cea0 	.word	0x0800cea0
 8008fa0:	0800ce00 	.word	0x0800ce00
 8008fa4:	0800d1ec 	.word	0x0800d1ec

08008fa8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fac:	b086      	sub	sp, #24
 8008fae:	4606      	mov	r6, r0
 8008fb0:	4688      	mov	r8, r1
 8008fb2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008fb4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008fb8:	2124      	movs	r1, #36	; 0x24
 8008fba:	2022      	movs	r0, #34	; 0x22
 8008fbc:	f7fa ff40 	bl	8003e40 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8008fc0:	b3a0      	cbz	r0, 800902c <icmp_send_response+0x84>
 8008fc2:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008fc4:	8943      	ldrh	r3, [r0, #10]
 8008fc6:	2b23      	cmp	r3, #35	; 0x23
 8008fc8:	d933      	bls.n	8009032 <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008fca:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008fce:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8008fd0:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8008fd4:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	7123      	strb	r3, [r4, #4]
 8008fda:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8008fdc:	71a3      	strb	r3, [r4, #6]
 8008fde:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008fe0:	686b      	ldr	r3, [r5, #4]
 8008fe2:	6872      	ldr	r2, [r6, #4]
 8008fe4:	6816      	ldr	r6, [r2, #0]
 8008fe6:	6850      	ldr	r0, [r2, #4]
 8008fe8:	6891      	ldr	r1, [r2, #8]
 8008fea:	68d7      	ldr	r7, [r2, #12]
 8008fec:	609e      	str	r6, [r3, #8]
 8008fee:	60d8      	str	r0, [r3, #12]
 8008ff0:	6119      	str	r1, [r3, #16]
 8008ff2:	615f      	str	r7, [r3, #20]
 8008ff4:	6916      	ldr	r6, [r2, #16]
 8008ff6:	6950      	ldr	r0, [r2, #20]
 8008ff8:	6991      	ldr	r1, [r2, #24]
 8008ffa:	619e      	str	r6, [r3, #24]
 8008ffc:	61d8      	str	r0, [r3, #28]
 8008ffe:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009000:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8009004:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009006:	a805      	add	r0, sp, #20
 8009008:	f000 f8ee 	bl	80091e8 <ip4_route>
#endif
  if (netif != NULL) {
 800900c:	b158      	cbz	r0, 8009026 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800900e:	2100      	movs	r1, #0
 8009010:	70a1      	strb	r1, [r4, #2]
 8009012:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009014:	9002      	str	r0, [sp, #8]
 8009016:	2301      	movs	r3, #1
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	9100      	str	r1, [sp, #0]
 800901c:	23ff      	movs	r3, #255	; 0xff
 800901e:	aa05      	add	r2, sp, #20
 8009020:	4628      	mov	r0, r5
 8009022:	f000 fa6d 	bl	8009500 <ip4_output_if>
  }
  pbuf_free(q);
 8009026:	4628      	mov	r0, r5
 8009028:	f7fa fea0 	bl	8003d6c <pbuf_free>
}
 800902c:	b006      	add	sp, #24
 800902e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009032:	4b04      	ldr	r3, [pc, #16]	; (8009044 <icmp_send_response+0x9c>)
 8009034:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009038:	4903      	ldr	r1, [pc, #12]	; (8009048 <icmp_send_response+0xa0>)
 800903a:	4804      	ldr	r0, [pc, #16]	; (800904c <icmp_send_response+0xa4>)
 800903c:	f001 f828 	bl	800a090 <iprintf>
 8009040:	e7c3      	b.n	8008fca <icmp_send_response+0x22>
 8009042:	bf00      	nop
 8009044:	0800ceac 	.word	0x0800ceac
 8009048:	0800cee4 	.word	0x0800cee4
 800904c:	0800b1cc 	.word	0x0800b1cc

08009050 <icmp_input>:
{
 8009050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009054:	b085      	sub	sp, #20
 8009056:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8009058:	4b4a      	ldr	r3, [pc, #296]	; (8009184 <icmp_input+0x134>)
 800905a:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800905c:	783b      	ldrb	r3, [r7, #0]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8009066:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 8009068:	2c13      	cmp	r4, #19
 800906a:	d915      	bls.n	8009098 <icmp_input+0x48>
 800906c:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800906e:	8943      	ldrh	r3, [r0, #10]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d911      	bls.n	8009098 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 8009074:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b08      	cmp	r3, #8
 800907a:	d161      	bne.n	8009140 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800907c:	4b41      	ldr	r3, [pc, #260]	; (8009184 <icmp_input+0x134>)
 800907e:	6958      	ldr	r0, [r3, #20]
 8009080:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009084:	2be0      	cmp	r3, #224	; 0xe0
 8009086:	d01a      	beq.n	80090be <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009088:	4b3e      	ldr	r3, [pc, #248]	; (8009184 <icmp_input+0x134>)
 800908a:	6819      	ldr	r1, [r3, #0]
 800908c:	f000 fa4d 	bl	800952a <ip4_addr_isbroadcast_u32>
 8009090:	b9a8      	cbnz	r0, 80090be <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009092:	892b      	ldrh	r3, [r5, #8]
 8009094:	2b07      	cmp	r3, #7
 8009096:	d805      	bhi.n	80090a4 <icmp_input+0x54>
  pbuf_free(p);
 8009098:	4628      	mov	r0, r5
 800909a:	f7fa fe67 	bl	8003d6c <pbuf_free>
}
 800909e:	b005      	add	sp, #20
 80090a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80090a4:	f108 090e 	add.w	r9, r8, #14
 80090a8:	4649      	mov	r1, r9
 80090aa:	4628      	mov	r0, r5
 80090ac:	f7fa fe19 	bl	8003ce2 <pbuf_add_header>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d03a      	beq.n	800912a <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80090b4:	892a      	ldrh	r2, [r5, #8]
 80090b6:	1913      	adds	r3, r2, r4
 80090b8:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 80090ba:	428a      	cmp	r2, r1
 80090bc:	d903      	bls.n	80090c6 <icmp_input+0x76>
  pbuf_free(p);
 80090be:	4628      	mov	r0, r5
 80090c0:	f7fa fe54 	bl	8003d6c <pbuf_free>
  return;
 80090c4:	e7eb      	b.n	800909e <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80090c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80090ca:	200e      	movs	r0, #14
 80090cc:	f7fa feb8 	bl	8003e40 <pbuf_alloc>
        if (r == NULL) {
 80090d0:	4604      	mov	r4, r0
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d0f3      	beq.n	80090be <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80090d6:	8942      	ldrh	r2, [r0, #10]
 80090d8:	f108 0308 	add.w	r3, r8, #8
 80090dc:	429a      	cmp	r2, r3
 80090de:	d313      	bcc.n	8009108 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 80090e0:	4642      	mov	r2, r8
 80090e2:	4639      	mov	r1, r7
 80090e4:	6840      	ldr	r0, [r0, #4]
 80090e6:	f000 ffbd 	bl	800a064 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80090ea:	4641      	mov	r1, r8
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7fa fdfd 	bl	8003cec <pbuf_remove_header>
 80090f2:	b960      	cbnz	r0, 800910e <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 80090f4:	4629      	mov	r1, r5
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fa fffc 	bl	80040f4 <pbuf_copy>
 80090fc:	b988      	cbnz	r0, 8009122 <icmp_input+0xd2>
        pbuf_free(p);
 80090fe:	4628      	mov	r0, r5
 8009100:	f7fa fe34 	bl	8003d6c <pbuf_free>
        p = r;
 8009104:	4625      	mov	r5, r4
 8009106:	e015      	b.n	8009134 <icmp_input+0xe4>
          pbuf_free(r);
 8009108:	f7fa fe30 	bl	8003d6c <pbuf_free>
          goto icmperr;
 800910c:	e7d7      	b.n	80090be <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800910e:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <icmp_input+0x138>)
 8009110:	22b6      	movs	r2, #182	; 0xb6
 8009112:	491e      	ldr	r1, [pc, #120]	; (800918c <icmp_input+0x13c>)
 8009114:	481e      	ldr	r0, [pc, #120]	; (8009190 <icmp_input+0x140>)
 8009116:	f000 ffbb 	bl	800a090 <iprintf>
          pbuf_free(r);
 800911a:	4620      	mov	r0, r4
 800911c:	f7fa fe26 	bl	8003d6c <pbuf_free>
          goto icmperr;
 8009120:	e7cd      	b.n	80090be <icmp_input+0x6e>
          pbuf_free(r);
 8009122:	4620      	mov	r0, r4
 8009124:	f7fa fe22 	bl	8003d6c <pbuf_free>
          goto icmperr;
 8009128:	e7c9      	b.n	80090be <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800912a:	4649      	mov	r1, r9
 800912c:	4628      	mov	r0, r5
 800912e:	f7fa fddd 	bl	8003cec <pbuf_remove_header>
 8009132:	b948      	cbnz	r0, 8009148 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009134:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8009136:	4641      	mov	r1, r8
 8009138:	4628      	mov	r0, r5
 800913a:	f7fa fdd2 	bl	8003ce2 <pbuf_add_header>
 800913e:	b150      	cbz	r0, 8009156 <icmp_input+0x106>
  pbuf_free(p);
 8009140:	4628      	mov	r0, r5
 8009142:	f7fa fe13 	bl	8003d6c <pbuf_free>
  return;
 8009146:	e7aa      	b.n	800909e <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <icmp_input+0x138>)
 800914a:	22c7      	movs	r2, #199	; 0xc7
 800914c:	4911      	ldr	r1, [pc, #68]	; (8009194 <icmp_input+0x144>)
 800914e:	4810      	ldr	r0, [pc, #64]	; (8009190 <icmp_input+0x140>)
 8009150:	f000 ff9e 	bl	800a090 <iprintf>
          goto icmperr;
 8009154:	e7b3      	b.n	80090be <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009156:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 8009158:	490a      	ldr	r1, [pc, #40]	; (8009184 <icmp_input+0x134>)
 800915a:	694b      	ldr	r3, [r1, #20]
 800915c:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800915e:	690b      	ldr	r3, [r1, #16]
 8009160:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009162:	2200      	movs	r2, #0
 8009164:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 8009166:	70a2      	strb	r2, [r4, #2]
 8009168:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800916a:	23ff      	movs	r3, #255	; 0xff
 800916c:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800916e:	7282      	strb	r2, [r0, #10]
 8009170:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009172:	9602      	str	r6, [sp, #8]
 8009174:	2001      	movs	r0, #1
 8009176:	9001      	str	r0, [sp, #4]
 8009178:	9200      	str	r2, [sp, #0]
 800917a:	3114      	adds	r1, #20
 800917c:	4628      	mov	r0, r5
 800917e:	f000 f9bf 	bl	8009500 <ip4_output_if>
        if (ret != ERR_OK) {
 8009182:	e7dd      	b.n	8009140 <icmp_input+0xf0>
 8009184:	20005220 	.word	0x20005220
 8009188:	0800ceac 	.word	0x0800ceac
 800918c:	0800cf10 	.word	0x0800cf10
 8009190:	0800b1cc 	.word	0x0800b1cc
 8009194:	0800cf48 	.word	0x0800cf48

08009198 <icmp_dest_unreach>:
{
 8009198:	b508      	push	{r3, lr}
 800919a:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800919c:	2103      	movs	r1, #3
 800919e:	f7ff ff03 	bl	8008fa8 <icmp_send_response>
}
 80091a2:	bd08      	pop	{r3, pc}

080091a4 <icmp_time_exceeded>:
{
 80091a4:	b508      	push	{r3, lr}
 80091a6:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80091a8:	210b      	movs	r1, #11
 80091aa:	f7ff fefd 	bl	8008fa8 <icmp_send_response>
}
 80091ae:	bd08      	pop	{r3, pc}

080091b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80091b0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80091b2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80091b6:	f013 0f01 	tst.w	r3, #1
 80091ba:	d00c      	beq.n	80091d6 <ip4_input_accept+0x26>
 80091bc:	4601      	mov	r1, r0
 80091be:	6843      	ldr	r3, [r0, #4]
 80091c0:	b15b      	cbz	r3, 80091da <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80091c2:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <ip4_input_accept+0x34>)
 80091c4:	6950      	ldr	r0, [r2, #20]
 80091c6:	4283      	cmp	r3, r0
 80091c8:	d009      	beq.n	80091de <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80091ca:	f000 f9ae 	bl	800952a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80091ce:	3800      	subs	r0, #0
 80091d0:	bf18      	it	ne
 80091d2:	2001      	movne	r0, #1
 80091d4:	e000      	b.n	80091d8 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80091d6:	2000      	movs	r0, #0
}
 80091d8:	bd08      	pop	{r3, pc}
  return 0;
 80091da:	2000      	movs	r0, #0
 80091dc:	e7fc      	b.n	80091d8 <ip4_input_accept+0x28>
      return 1;
 80091de:	2001      	movs	r0, #1
 80091e0:	e7fa      	b.n	80091d8 <ip4_input_accept+0x28>
 80091e2:	bf00      	nop
 80091e4:	20005220 	.word	0x20005220

080091e8 <ip4_route>:
{
 80091e8:	b410      	push	{r4}
 80091ea:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <ip4_route+0x70>)
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	b9a8      	cbnz	r0, 800921e <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80091f2:	4b1a      	ldr	r3, [pc, #104]	; (800925c <ip4_route+0x74>)
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	b160      	cbz	r0, 8009212 <ip4_route+0x2a>
 80091f8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80091fc:	f003 0305 	and.w	r3, r3, #5
 8009200:	2b05      	cmp	r3, #5
 8009202:	d124      	bne.n	800924e <ip4_route+0x66>
 8009204:	6843      	ldr	r3, [r0, #4]
 8009206:	b323      	cbz	r3, 8009252 <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009208:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800920c:	2b7f      	cmp	r3, #127	; 0x7f
 800920e:	bf08      	it	eq
 8009210:	2000      	moveq	r0, #0
}
 8009212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009216:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 8009218:	6800      	ldr	r0, [r0, #0]
 800921a:	2800      	cmp	r0, #0
 800921c:	d0e9      	beq.n	80091f2 <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800921e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009222:	f013 0f01 	tst.w	r3, #1
 8009226:	d0f7      	beq.n	8009218 <ip4_route+0x30>
 8009228:	f013 0f04 	tst.w	r3, #4
 800922c:	d0f4      	beq.n	8009218 <ip4_route+0x30>
 800922e:	6842      	ldr	r2, [r0, #4]
 8009230:	2a00      	cmp	r2, #0
 8009232:	d0f1      	beq.n	8009218 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009234:	f8dc 1000 	ldr.w	r1, [ip]
 8009238:	404a      	eors	r2, r1
 800923a:	6884      	ldr	r4, [r0, #8]
 800923c:	4222      	tst	r2, r4
 800923e:	d0e8      	beq.n	8009212 <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009240:	f013 0f02 	tst.w	r3, #2
 8009244:	d1e8      	bne.n	8009218 <ip4_route+0x30>
 8009246:	68c3      	ldr	r3, [r0, #12]
 8009248:	4299      	cmp	r1, r3
 800924a:	d1e5      	bne.n	8009218 <ip4_route+0x30>
 800924c:	e7e1      	b.n	8009212 <ip4_route+0x2a>
    return NULL;
 800924e:	2000      	movs	r0, #0
 8009250:	e7df      	b.n	8009212 <ip4_route+0x2a>
 8009252:	2000      	movs	r0, #0
 8009254:	e7dd      	b.n	8009212 <ip4_route+0x2a>
 8009256:	bf00      	nop
 8009258:	2000a948 	.word	0x2000a948
 800925c:	2000a944 	.word	0x2000a944

08009260 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009266:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800926a:	f898 3000 	ldrb.w	r3, [r8]
 800926e:	091a      	lsrs	r2, r3, #4
 8009270:	2a04      	cmp	r2, #4
 8009272:	d004      	beq.n	800927e <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009274:	f7fa fd7a 	bl	8003d6c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8009278:	2000      	movs	r0, #0
 800927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927e:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8009288:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800928a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800928e:	f7f9 ffa0 	bl	80031d2 <lwip_htons>
 8009292:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 8009294:	8923      	ldrh	r3, [r4, #8]
 8009296:	4283      	cmp	r3, r0
 8009298:	d860      	bhi.n	800935c <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800929a:	8963      	ldrh	r3, [r4, #10]
 800929c:	42ab      	cmp	r3, r5
 800929e:	d362      	bcc.n	8009366 <ip4_input+0x106>
 80092a0:	8923      	ldrh	r3, [r4, #8]
 80092a2:	42b3      	cmp	r3, r6
 80092a4:	d35f      	bcc.n	8009366 <ip4_input+0x106>
 80092a6:	2d13      	cmp	r5, #19
 80092a8:	d95d      	bls.n	8009366 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80092aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80092ae:	4a52      	ldr	r2, [pc, #328]	; (80093f8 <ip4_input+0x198>)
 80092b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80092b2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80092b6:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80092b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092bc:	2be0      	cmp	r3, #224	; 0xe0
 80092be:	d156      	bne.n	800936e <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80092c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80092c4:	f013 0f01 	tst.w	r3, #1
 80092c8:	d068      	beq.n	800939c <ip4_input+0x13c>
 80092ca:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	bf14      	ite	ne
 80092d0:	463d      	movne	r5, r7
 80092d2:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80092d4:	4639      	mov	r1, r7
 80092d6:	4b48      	ldr	r3, [pc, #288]	; (80093f8 <ip4_input+0x198>)
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f000 f926 	bl	800952a <ip4_addr_isbroadcast_u32>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d162      	bne.n	80093a8 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80092e2:	4b45      	ldr	r3, [pc, #276]	; (80093f8 <ip4_input+0x198>)
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80092ea:	2be0      	cmp	r3, #224	; 0xe0
 80092ec:	d05c      	beq.n	80093a8 <ip4_input+0x148>
  if (netif == NULL) {
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	d05e      	beq.n	80093b0 <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80092f2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80092f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	b13b      	cbz	r3, 800930e <ip4_input+0xae>
    p = ip4_reass(p);
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fac2 	bl	8009888 <ip4_reass>
    if (p == NULL) {
 8009304:	4604      	mov	r4, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0b6      	beq.n	8009278 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800930a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800930e:	4a3a      	ldr	r2, [pc, #232]	; (80093f8 <ip4_input+0x198>)
 8009310:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 8009312:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009314:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009318:	f898 3000 	ldrb.w	r3, [r8]
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009324:	4649      	mov	r1, r9
 8009326:	4620      	mov	r0, r4
 8009328:	f7fa fce0 	bl	8003cec <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800932c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8009330:	2b06      	cmp	r3, #6
 8009332:	d04e      	beq.n	80093d2 <ip4_input+0x172>
 8009334:	2b11      	cmp	r3, #17
 8009336:	d03f      	beq.n	80093b8 <ip4_input+0x158>
 8009338:	2b01      	cmp	r3, #1
 800933a:	d04f      	beq.n	80093dc <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800933c:	4629      	mov	r1, r5
 800933e:	4b2e      	ldr	r3, [pc, #184]	; (80093f8 <ip4_input+0x198>)
 8009340:	6958      	ldr	r0, [r3, #20]
 8009342:	f000 f8f2 	bl	800952a <ip4_addr_isbroadcast_u32>
 8009346:	b928      	cbnz	r0, 8009354 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009348:	4b2b      	ldr	r3, [pc, #172]	; (80093f8 <ip4_input+0x198>)
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009350:	2be0      	cmp	r3, #224	; 0xe0
 8009352:	d148      	bne.n	80093e6 <ip4_input+0x186>
        pbuf_free(p);
 8009354:	4620      	mov	r0, r4
 8009356:	f7fa fd09 	bl	8003d6c <pbuf_free>
        break;
 800935a:	e031      	b.n	80093c0 <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800935c:	4601      	mov	r1, r0
 800935e:	4620      	mov	r0, r4
 8009360:	f7fa fdfe 	bl	8003f60 <pbuf_realloc>
 8009364:	e799      	b.n	800929a <ip4_input+0x3a>
    pbuf_free(p);
 8009366:	4620      	mov	r0, r4
 8009368:	f7fa fd00 	bl	8003d6c <pbuf_free>
    return ERR_OK;
 800936c:	e784      	b.n	8009278 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800936e:	4638      	mov	r0, r7
 8009370:	f7ff ff1e 	bl	80091b0 <ip4_input_accept>
 8009374:	b9a0      	cbnz	r0, 80093a0 <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009376:	4b20      	ldr	r3, [pc, #128]	; (80093f8 <ip4_input+0x198>)
 8009378:	7d1b      	ldrb	r3, [r3, #20]
 800937a:	2b7f      	cmp	r3, #127	; 0x7f
 800937c:	d012      	beq.n	80093a4 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800937e:	4b1f      	ldr	r3, [pc, #124]	; (80093fc <ip4_input+0x19c>)
 8009380:	681d      	ldr	r5, [r3, #0]
 8009382:	b91d      	cbnz	r5, 800938c <ip4_input+0x12c>
 8009384:	e7a6      	b.n	80092d4 <ip4_input+0x74>
 8009386:	682d      	ldr	r5, [r5, #0]
 8009388:	2d00      	cmp	r5, #0
 800938a:	d0a3      	beq.n	80092d4 <ip4_input+0x74>
          if (netif == inp) {
 800938c:	42af      	cmp	r7, r5
 800938e:	d0fa      	beq.n	8009386 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 8009390:	4628      	mov	r0, r5
 8009392:	f7ff ff0d 	bl	80091b0 <ip4_input_accept>
 8009396:	2800      	cmp	r0, #0
 8009398:	d0f5      	beq.n	8009386 <ip4_input+0x126>
 800939a:	e79b      	b.n	80092d4 <ip4_input+0x74>
      netif = NULL;
 800939c:	2500      	movs	r5, #0
 800939e:	e799      	b.n	80092d4 <ip4_input+0x74>
      netif = inp;
 80093a0:	463d      	mov	r5, r7
 80093a2:	e797      	b.n	80092d4 <ip4_input+0x74>
      netif = NULL;
 80093a4:	2500      	movs	r5, #0
 80093a6:	e795      	b.n	80092d4 <ip4_input+0x74>
      pbuf_free(p);
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7fa fcdf 	bl	8003d6c <pbuf_free>
      return ERR_OK;
 80093ae:	e763      	b.n	8009278 <ip4_input+0x18>
    pbuf_free(p);
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7fa fcdb 	bl	8003d6c <pbuf_free>
    return ERR_OK;
 80093b6:	e75f      	b.n	8009278 <ip4_input+0x18>
        udp_input(p, inp);
 80093b8:	4639      	mov	r1, r7
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff f8c4 	bl	8008548 <udp_input>
  ip_data.current_netif = NULL;
 80093c0:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <ip4_input+0x198>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80093c6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80093c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80093ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80093cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80093ce:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 80093d0:	e752      	b.n	8009278 <ip4_input+0x18>
        tcp_input(p, inp);
 80093d2:	4639      	mov	r1, r7
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7fc fee3 	bl	80061a0 <tcp_input>
        break;
 80093da:	e7f1      	b.n	80093c0 <ip4_input+0x160>
        icmp_input(p, inp);
 80093dc:	4639      	mov	r1, r7
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff fe36 	bl	8009050 <icmp_input>
        break;
 80093e4:	e7ec      	b.n	80093c0 <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80093e6:	4649      	mov	r1, r9
 80093e8:	4620      	mov	r0, r4
 80093ea:	f7fa fcb3 	bl	8003d54 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80093ee:	2102      	movs	r1, #2
 80093f0:	4620      	mov	r0, r4
 80093f2:	f7ff fed1 	bl	8009198 <icmp_dest_unreach>
 80093f6:	e7ad      	b.n	8009354 <ip4_input+0xf4>
 80093f8:	20005220 	.word	0x20005220
 80093fc:	2000a948 	.word	0x2000a948

08009400 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009404:	b083      	sub	sp, #12
 8009406:	4604      	mov	r4, r0
 8009408:	460f      	mov	r7, r1
 800940a:	4616      	mov	r6, r2
 800940c:	4699      	mov	r9, r3
 800940e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009412:	7b82      	ldrb	r2, [r0, #14]
 8009414:	2a01      	cmp	r2, #1
 8009416:	d13f      	bne.n	8009498 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009418:	2e00      	cmp	r6, #0
 800941a:	d050      	beq.n	80094be <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800941c:	2114      	movs	r1, #20
 800941e:	4620      	mov	r0, r4
 8009420:	f7fa fc5f 	bl	8003ce2 <pbuf_add_header>
 8009424:	2800      	cmp	r0, #0
 8009426:	d158      	bne.n	80094da <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009428:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800942a:	8963      	ldrh	r3, [r4, #10]
 800942c:	2b13      	cmp	r3, #19
 800942e:	d93b      	bls.n	80094a8 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009430:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009434:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8009438:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800943a:	6833      	ldr	r3, [r6, #0]
 800943c:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800943e:	2345      	movs	r3, #69	; 0x45
 8009440:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8009442:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009446:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009448:	8920      	ldrh	r0, [r4, #8]
 800944a:	f7f9 fec2 	bl	80031d2 <lwip_htons>
 800944e:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009450:	2300      	movs	r3, #0
 8009452:	71ab      	strb	r3, [r5, #6]
 8009454:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009456:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80094fc <ip4_output_if_src+0xfc>
 800945a:	f8b9 0000 	ldrh.w	r0, [r9]
 800945e:	f7f9 feb8 	bl	80031d2 <lwip_htons>
 8009462:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009464:	f8b9 3000 	ldrh.w	r3, [r9]
 8009468:	3301      	adds	r3, #1
 800946a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800946e:	b31f      	cbz	r7, 80094b8 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009474:	2300      	movs	r3, #0
 8009476:	72ab      	strb	r3, [r5, #10]
 8009478:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800947a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800947e:	b113      	cbz	r3, 8009486 <ip4_output_if_src+0x86>
 8009480:	8922      	ldrh	r2, [r4, #8]
 8009482:	429a      	cmp	r2, r3
 8009484:	d823      	bhi.n	80094ce <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009486:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800948a:	4632      	mov	r2, r6
 800948c:	4621      	mov	r1, r4
 800948e:	4640      	mov	r0, r8
 8009490:	4798      	blx	r3
}
 8009492:	b003      	add	sp, #12
 8009494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009498:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <ip4_output_if_src+0xe8>)
 800949a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800949e:	4913      	ldr	r1, [pc, #76]	; (80094ec <ip4_output_if_src+0xec>)
 80094a0:	4813      	ldr	r0, [pc, #76]	; (80094f0 <ip4_output_if_src+0xf0>)
 80094a2:	f000 fdf5 	bl	800a090 <iprintf>
 80094a6:	e7b7      	b.n	8009418 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <ip4_output_if_src+0xe8>)
 80094aa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80094ae:	4911      	ldr	r1, [pc, #68]	; (80094f4 <ip4_output_if_src+0xf4>)
 80094b0:	480f      	ldr	r0, [pc, #60]	; (80094f0 <ip4_output_if_src+0xf0>)
 80094b2:	f000 fded 	bl	800a090 <iprintf>
 80094b6:	e7bb      	b.n	8009430 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <ip4_output_if_src+0xf8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	e7d9      	b.n	8009472 <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 80094be:	8963      	ldrh	r3, [r4, #10]
 80094c0:	2b13      	cmp	r3, #19
 80094c2:	d90d      	bls.n	80094e0 <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80094c4:	6863      	ldr	r3, [r4, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80094ca:	ae01      	add	r6, sp, #4
 80094cc:	e7d5      	b.n	800947a <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 80094ce:	4632      	mov	r2, r6
 80094d0:	4641      	mov	r1, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fc02 	bl	8009cdc <ip4_frag>
 80094d8:	e7db      	b.n	8009492 <ip4_output_if_src+0x92>
      return ERR_BUF;
 80094da:	f06f 0001 	mvn.w	r0, #1
 80094de:	e7d8      	b.n	8009492 <ip4_output_if_src+0x92>
      return ERR_BUF;
 80094e0:	f06f 0001 	mvn.w	r0, #1
 80094e4:	e7d5      	b.n	8009492 <ip4_output_if_src+0x92>
 80094e6:	bf00      	nop
 80094e8:	0800cf7c 	.word	0x0800cf7c
 80094ec:	0800cfb0 	.word	0x0800cfb0
 80094f0:	0800b1cc 	.word	0x0800b1cc
 80094f4:	0800cfbc 	.word	0x0800cfbc
 80094f8:	0800cfec 	.word	0x0800cfec
 80094fc:	2000aaae 	.word	0x2000aaae

08009500 <ip4_output_if>:
{
 8009500:	b510      	push	{r4, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 8009506:	4694      	mov	ip, r2
 8009508:	b11a      	cbz	r2, 8009512 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800950a:	b109      	cbz	r1, 8009510 <ip4_output_if+0x10>
 800950c:	680a      	ldr	r2, [r1, #0]
 800950e:	b902      	cbnz	r2, 8009512 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8009510:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009512:	9402      	str	r4, [sp, #8]
 8009514:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009518:	9201      	str	r2, [sp, #4]
 800951a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800951e:	9200      	str	r2, [sp, #0]
 8009520:	4662      	mov	r2, ip
 8009522:	f7ff ff6d 	bl	8009400 <ip4_output_if_src>
}
 8009526:	b004      	add	sp, #16
 8009528:	bd10      	pop	{r4, pc}

0800952a <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800952a:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800952c:	1e42      	subs	r2, r0, #1
 800952e:	f112 0f03 	cmn.w	r2, #3
 8009532:	d813      	bhi.n	800955c <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009534:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 8009538:	f010 0002 	ands.w	r0, r0, #2
 800953c:	d013      	beq.n	8009566 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800953e:	684a      	ldr	r2, [r1, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d00d      	beq.n	8009560 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009544:	6889      	ldr	r1, [r1, #8]
 8009546:	405a      	eors	r2, r3
 8009548:	420a      	tst	r2, r1
 800954a:	d10b      	bne.n	8009564 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800954c:	43c8      	mvns	r0, r1
 800954e:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009552:	4283      	cmp	r3, r0
 8009554:	bf14      	ite	ne
 8009556:	2000      	movne	r0, #0
 8009558:	2001      	moveq	r0, #1
 800955a:	4770      	bx	lr
    return 1;
 800955c:	2001      	movs	r0, #1
 800955e:	4770      	bx	lr
    return 0;
 8009560:	2000      	movs	r0, #0
 8009562:	4770      	bx	lr
    return 0;
 8009564:	2000      	movs	r0, #0
  }
}
 8009566:	4770      	bx	lr

08009568 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8009568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	b085      	sub	sp, #20
 800956e:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8009570:	6803      	ldr	r3, [r0, #0]
 8009572:	9303      	str	r3, [sp, #12]

  rp = buf;
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 8009574:	f10d 090c 	add.w	r9, sp, #12
 8009578:	f10d 0b10 	add.w	fp, sp, #16
  rp = buf;
 800957c:	468e      	mov	lr, r1
  int len = 0;
 800957e:	f04f 0a00 	mov.w	sl, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8009582:	4f24      	ldr	r7, [pc, #144]	; (8009614 <ip4addr_ntoa_r+0xac>)
 8009584:	ae02      	add	r6, sp, #8
 8009586:	f102 0801 	add.w	r8, r2, #1
 800958a:	f819 4b01 	ldrb.w	r4, [r9], #1
    i = 0;
 800958e:	2000      	movs	r0, #0
      rem = *ap % (u8_t)10;
 8009590:	fba7 3104 	umull	r3, r1, r7, r4
 8009594:	08c9      	lsrs	r1, r1, #3
 8009596:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800959a:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
      *ap /= (u8_t)10;
 800959e:	4625      	mov	r5, r4
 80095a0:	b2cc      	uxtb	r4, r1
      inv[i++] = (char)('0' + rem);
 80095a2:	4601      	mov	r1, r0
 80095a4:	3001      	adds	r0, #1
 80095a6:	b2c0      	uxtb	r0, r0
 80095a8:	f101 0c10 	add.w	ip, r1, #16
 80095ac:	44ec      	add	ip, sp
 80095ae:	3330      	adds	r3, #48	; 0x30
 80095b0:	f80c 3c08 	strb.w	r3, [ip, #-8]
    } while (*ap);
 80095b4:	2d09      	cmp	r5, #9
 80095b6:	d8eb      	bhi.n	8009590 <ip4addr_ntoa_r+0x28>
 80095b8:	f809 4c01 	strb.w	r4, [r9, #-1]
    while (i--) {
 80095bc:	b190      	cbz	r0, 80095e4 <ip4addr_ntoa_r+0x7c>
      if (len++ >= buflen) {
 80095be:	f10a 0001 	add.w	r0, sl, #1
 80095c2:	4552      	cmp	r2, sl
 80095c4:	dd21      	ble.n	800960a <ip4addr_ntoa_r+0xa2>
 80095c6:	1873      	adds	r3, r6, r1
        return NULL;
      }
      *rp++ = inv[i];
 80095c8:	781c      	ldrb	r4, [r3, #0]
 80095ca:	f80e 4b01 	strb.w	r4, [lr], #1
    while (i--) {
 80095ce:	42b3      	cmp	r3, r6
 80095d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80095d4:	d007      	beq.n	80095e6 <ip4addr_ntoa_r+0x7e>
      if (len++ >= buflen) {
 80095d6:	3001      	adds	r0, #1
 80095d8:	4540      	cmp	r0, r8
 80095da:	d1f5      	bne.n	80095c8 <ip4addr_ntoa_r+0x60>
        return NULL;
 80095dc:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
 80095de:	b005      	add	sp, #20
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (i--) {
 80095e4:	4650      	mov	r0, sl
    if (len++ >= buflen) {
 80095e6:	f100 0a01 	add.w	sl, r0, #1
 80095ea:	4282      	cmp	r2, r0
 80095ec:	dd0f      	ble.n	800960e <ip4addr_ntoa_r+0xa6>
    *rp++ = '.';
 80095ee:	4673      	mov	r3, lr
 80095f0:	f04f 012e 	mov.w	r1, #46	; 0x2e
 80095f4:	f803 1b01 	strb.w	r1, [r3], #1
  for (n = 0; n < 4; n++) {
 80095f8:	45d9      	cmp	r9, fp
 80095fa:	d001      	beq.n	8009600 <ip4addr_ntoa_r+0x98>
    *rp++ = '.';
 80095fc:	469e      	mov	lr, r3
 80095fe:	e7c4      	b.n	800958a <ip4addr_ntoa_r+0x22>
  *--rp = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	f88e 3000 	strb.w	r3, [lr]
  return buf;
 8009606:	9801      	ldr	r0, [sp, #4]
 8009608:	e7e9      	b.n	80095de <ip4addr_ntoa_r+0x76>
        return NULL;
 800960a:	2000      	movs	r0, #0
 800960c:	e7e7      	b.n	80095de <ip4addr_ntoa_r+0x76>
      return NULL;
 800960e:	2000      	movs	r0, #0
 8009610:	e7e5      	b.n	80095de <ip4addr_ntoa_r+0x76>
 8009612:	bf00      	nop
 8009614:	cccccccd 	.word	0xcccccccd

08009618 <ip4addr_ntoa>:
{
 8009618:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800961a:	2210      	movs	r2, #16
 800961c:	4901      	ldr	r1, [pc, #4]	; (8009624 <ip4addr_ntoa+0xc>)
 800961e:	f7ff ffa3 	bl	8009568 <ip4addr_ntoa_r>
}
 8009622:	bd08      	pop	{r3, pc}
 8009624:	2000aab0 	.word	0x2000aab0

08009628 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800962c:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <ip_reass_dequeue_datagram+0x38>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4283      	cmp	r3, r0
 8009632:	d008      	beq.n	8009646 <ip_reass_dequeue_datagram+0x1e>
 8009634:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009636:	b151      	cbz	r1, 800964e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800963c:	4621      	mov	r1, r4
 800963e:	2004      	movs	r0, #4
 8009640:	f7fa f8d6 	bl	80037f0 <memp_free>
}
 8009644:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8009646:	6802      	ldr	r2, [r0, #0]
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <ip_reass_dequeue_datagram+0x38>)
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	e7f6      	b.n	800963c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <ip_reass_dequeue_datagram+0x3c>)
 8009650:	f240 1245 	movw	r2, #325	; 0x145
 8009654:	4904      	ldr	r1, [pc, #16]	; (8009668 <ip_reass_dequeue_datagram+0x40>)
 8009656:	4805      	ldr	r0, [pc, #20]	; (800966c <ip_reass_dequeue_datagram+0x44>)
 8009658:	f000 fd1a 	bl	800a090 <iprintf>
 800965c:	e7ec      	b.n	8009638 <ip_reass_dequeue_datagram+0x10>
 800965e:	bf00      	nop
 8009660:	2000aac4 	.word	0x2000aac4
 8009664:	0800cff0 	.word	0x0800cff0
 8009668:	0800d02c 	.word	0x0800d02c
 800966c:	0800b1cc 	.word	0x0800b1cc

08009670 <ip_reass_free_complete_datagram>:
{
 8009670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	4680      	mov	r8, r0
 8009676:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009678:	4281      	cmp	r1, r0
 800967a:	d017      	beq.n	80096ac <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800967c:	f1b9 0f00 	cmp.w	r9, #0
 8009680:	d009      	beq.n	8009696 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009682:	f8d9 3000 	ldr.w	r3, [r9]
 8009686:	4543      	cmp	r3, r8
 8009688:	d005      	beq.n	8009696 <ip_reass_free_complete_datagram+0x26>
 800968a:	4b34      	ldr	r3, [pc, #208]	; (800975c <ip_reass_free_complete_datagram+0xec>)
 800968c:	22ad      	movs	r2, #173	; 0xad
 800968e:	4934      	ldr	r1, [pc, #208]	; (8009760 <ip_reass_free_complete_datagram+0xf0>)
 8009690:	4834      	ldr	r0, [pc, #208]	; (8009764 <ip_reass_free_complete_datagram+0xf4>)
 8009692:	f000 fcfd 	bl	800a090 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009696:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800969a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800969c:	889a      	ldrh	r2, [r3, #4]
 800969e:	b162      	cbz	r2, 80096ba <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 80096a0:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80096a2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800975c <ip_reass_free_complete_datagram+0xec>
 80096a6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009774 <ip_reass_free_complete_datagram+0x104>
 80096aa:	e03e      	b.n	800972a <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80096ac:	4b2b      	ldr	r3, [pc, #172]	; (800975c <ip_reass_free_complete_datagram+0xec>)
 80096ae:	22ab      	movs	r2, #171	; 0xab
 80096b0:	492d      	ldr	r1, [pc, #180]	; (8009768 <ip_reass_free_complete_datagram+0xf8>)
 80096b2:	482c      	ldr	r0, [pc, #176]	; (8009764 <ip_reass_free_complete_datagram+0xf4>)
 80096b4:	f000 fcec 	bl	800a090 <iprintf>
 80096b8:	e7e0      	b.n	800967c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80096c0:	6873      	ldr	r3, [r6, #4]
 80096c2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80096c6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80096ca:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80096ce:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	605c      	str	r4, [r3, #4]
 80096d6:	6098      	str	r0, [r3, #8]
 80096d8:	60d9      	str	r1, [r3, #12]
 80096da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80096de:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80096e0:	2101      	movs	r1, #1
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff fd5e 	bl	80091a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7fa fc99 	bl	8004020 <pbuf_clen>
 80096ee:	4604      	mov	r4, r0
    pbuf_free(p);
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7fa fb3b 	bl	8003d6c <pbuf_free>
  p = ipr->p;
 80096f6:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d1d1      	bne.n	80096a2 <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 80096fe:	4649      	mov	r1, r9
 8009700:	4640      	mov	r0, r8
 8009702:	f7ff ff91 	bl	8009628 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <ip_reass_free_complete_datagram+0xfc>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	42a3      	cmp	r3, r4
 800970c:	d31f      	bcc.n	800974e <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800970e:	4a17      	ldr	r2, [pc, #92]	; (800976c <ip_reass_free_complete_datagram+0xfc>)
 8009710:	8813      	ldrh	r3, [r2, #0]
 8009712:	1b1b      	subs	r3, r3, r4
 8009714:	8013      	strh	r3, [r2, #0]
}
 8009716:	4620      	mov	r0, r4
 8009718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800971c:	4425      	add	r5, r4
 800971e:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 8009720:	4638      	mov	r0, r7
 8009722:	f7fa fb23 	bl	8003d6c <pbuf_free>
  while (p != NULL) {
 8009726:	2e00      	cmp	r6, #0
 8009728:	d0e9      	beq.n	80096fe <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800972a:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800972c:	4637      	mov	r7, r6
 800972e:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 8009730:	4638      	mov	r0, r7
 8009732:	f7fa fc75 	bl	8004020 <pbuf_clen>
 8009736:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009738:	1823      	adds	r3, r4, r0
 800973a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973e:	dbed      	blt.n	800971c <ip_reass_free_complete_datagram+0xac>
 8009740:	465b      	mov	r3, fp
 8009742:	22cc      	movs	r2, #204	; 0xcc
 8009744:	4651      	mov	r1, sl
 8009746:	4807      	ldr	r0, [pc, #28]	; (8009764 <ip_reass_free_complete_datagram+0xf4>)
 8009748:	f000 fca2 	bl	800a090 <iprintf>
 800974c:	e7e6      	b.n	800971c <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <ip_reass_free_complete_datagram+0xec>)
 8009750:	22d2      	movs	r2, #210	; 0xd2
 8009752:	4907      	ldr	r1, [pc, #28]	; (8009770 <ip_reass_free_complete_datagram+0x100>)
 8009754:	4803      	ldr	r0, [pc, #12]	; (8009764 <ip_reass_free_complete_datagram+0xf4>)
 8009756:	f000 fc9b 	bl	800a090 <iprintf>
 800975a:	e7d8      	b.n	800970e <ip_reass_free_complete_datagram+0x9e>
 800975c:	0800cff0 	.word	0x0800cff0
 8009760:	0800d054 	.word	0x0800d054
 8009764:	0800b1cc 	.word	0x0800b1cc
 8009768:	0800d048 	.word	0x0800d048
 800976c:	2000aac0 	.word	0x2000aac0
 8009770:	0800d088 	.word	0x0800d088
 8009774:	0800d068 	.word	0x0800d068

08009778 <ip_reass_remove_oldest_datagram>:
{
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	4605      	mov	r5, r0
 800977e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009780:	2600      	movs	r6, #0
    r = reassdatagrams;
 8009782:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80097f4 <ip_reass_remove_oldest_datagram+0x7c>
 8009786:	e027      	b.n	80097d8 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 8009788:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800978a:	b1d0      	cbz	r0, 80097c2 <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800978c:	f893 901f 	ldrb.w	r9, [r3, #31]
 8009790:	7fc2      	ldrb	r2, [r0, #31]
 8009792:	4591      	cmp	r9, r2
 8009794:	bf98      	it	ls
 8009796:	4661      	movls	r1, ip
 8009798:	4591      	cmp	r9, r2
 800979a:	bf98      	it	ls
 800979c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	469c      	mov	ip, r3
 80097a2:	b18a      	cbz	r2, 80097c8 <ip_reass_remove_oldest_datagram+0x50>
 80097a4:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80097a6:	695a      	ldr	r2, [r3, #20]
 80097a8:	4572      	cmp	r2, lr
 80097aa:	d1ed      	bne.n	8009788 <ip_reass_remove_oldest_datagram+0x10>
 80097ac:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	454a      	cmp	r2, r9
 80097b4:	d1e8      	bne.n	8009788 <ip_reass_remove_oldest_datagram+0x10>
 80097b6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80097ba:	88aa      	ldrh	r2, [r5, #4]
 80097bc:	4591      	cmp	r9, r2
 80097be:	d1e3      	bne.n	8009788 <ip_reass_remove_oldest_datagram+0x10>
 80097c0:	e7ed      	b.n	800979e <ip_reass_remove_oldest_datagram+0x26>
 80097c2:	4661      	mov	r1, ip
 80097c4:	4618      	mov	r0, r3
 80097c6:	e7ea      	b.n	800979e <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 80097c8:	b110      	cbz	r0, 80097d0 <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80097ca:	f7ff ff51 	bl	8009670 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80097ce:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80097d0:	42be      	cmp	r6, r7
 80097d2:	da0b      	bge.n	80097ec <ip_reass_remove_oldest_datagram+0x74>
 80097d4:	2c01      	cmp	r4, #1
 80097d6:	dd09      	ble.n	80097ec <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 80097d8:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80097dc:	b133      	cbz	r3, 80097ec <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80097de:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 80097e2:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80097e4:	4621      	mov	r1, r4
    prev = NULL;
 80097e6:	46a4      	mov	ip, r4
    oldest = NULL;
 80097e8:	4620      	mov	r0, r4
 80097ea:	e7dc      	b.n	80097a6 <ip_reass_remove_oldest_datagram+0x2e>
}
 80097ec:	4630      	mov	r0, r6
 80097ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f2:	bf00      	nop
 80097f4:	2000aac4 	.word	0x2000aac4

080097f8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80097f8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80097fa:	4604      	mov	r4, r0
 80097fc:	b120      	cbz	r0, 8009808 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80097fe:	4621      	mov	r1, r4
 8009800:	2005      	movs	r0, #5
 8009802:	f7f9 fff5 	bl	80037f0 <memp_free>
}
 8009806:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009808:	4b03      	ldr	r3, [pc, #12]	; (8009818 <ip_frag_free_pbuf_custom_ref+0x20>)
 800980a:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800980e:	4903      	ldr	r1, [pc, #12]	; (800981c <ip_frag_free_pbuf_custom_ref+0x24>)
 8009810:	4803      	ldr	r0, [pc, #12]	; (8009820 <ip_frag_free_pbuf_custom_ref+0x28>)
 8009812:	f000 fc3d 	bl	800a090 <iprintf>
 8009816:	e7f2      	b.n	80097fe <ip_frag_free_pbuf_custom_ref+0x6>
 8009818:	0800cff0 	.word	0x0800cff0
 800981c:	0800b720 	.word	0x0800b720
 8009820:	0800b1cc 	.word	0x0800b1cc

08009824 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009824:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009826:	4604      	mov	r4, r0
 8009828:	b138      	cbz	r0, 800983a <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800982a:	6960      	ldr	r0, [r4, #20]
 800982c:	b108      	cbz	r0, 8009832 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800982e:	f7fa fa9d 	bl	8003d6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff ffe0 	bl	80097f8 <ip_frag_free_pbuf_custom_ref>
}
 8009838:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800983a:	4b04      	ldr	r3, [pc, #16]	; (800984c <ipfrag_free_pbuf_custom+0x28>)
 800983c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009840:	4903      	ldr	r1, [pc, #12]	; (8009850 <ipfrag_free_pbuf_custom+0x2c>)
 8009842:	4804      	ldr	r0, [pc, #16]	; (8009854 <ipfrag_free_pbuf_custom+0x30>)
 8009844:	f000 fc24 	bl	800a090 <iprintf>
 8009848:	e7ef      	b.n	800982a <ipfrag_free_pbuf_custom+0x6>
 800984a:	bf00      	nop
 800984c:	0800cff0 	.word	0x0800cff0
 8009850:	0800d0ac 	.word	0x0800d0ac
 8009854:	0800b1cc 	.word	0x0800b1cc

08009858 <ip_reass_tmr>:
{
 8009858:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <ip_reass_tmr+0x2c>)
 800985c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800985e:	b178      	cbz	r0, 8009880 <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 8009860:	2400      	movs	r4, #0
 8009862:	e004      	b.n	800986e <ip_reass_tmr+0x16>
      r->timer--;
 8009864:	3b01      	subs	r3, #1
 8009866:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8009868:	4604      	mov	r4, r0
 800986a:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800986c:	b140      	cbz	r0, 8009880 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800986e:	7fc3      	ldrb	r3, [r0, #31]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1f7      	bne.n	8009864 <ip_reass_tmr+0xc>
      r = r->next;
 8009874:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8009876:	4621      	mov	r1, r4
 8009878:	f7ff fefa 	bl	8009670 <ip_reass_free_complete_datagram>
      r = r->next;
 800987c:	4628      	mov	r0, r5
 800987e:	e7f5      	b.n	800986c <ip_reass_tmr+0x14>
}
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	bf00      	nop
 8009884:	2000aac4 	.word	0x2000aac4

08009888 <ip4_reass>:
{
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	b083      	sub	sp, #12
 800988e:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 8009890:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009894:	f899 3000 	ldrb.w	r3, [r9]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2b05      	cmp	r3, #5
 800989e:	d16e      	bne.n	800997e <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80098a0:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 80098a4:	f7f9 fc95 	bl	80031d2 <lwip_htons>
 80098a8:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80098aa:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80098ae:	f7f9 fc90 	bl	80031d2 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80098b2:	f899 3000 	ldrb.w	r3, [r9]
 80098b6:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80098ba:	009e      	lsls	r6, r3, #2
 80098bc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80098c0:	d35d      	bcc.n	800997e <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 80098c2:	1b80      	subs	r0, r0, r6
 80098c4:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 80098c6:	4628      	mov	r0, r5
 80098c8:	f7fa fbaa 	bl	8004020 <pbuf_clen>
 80098cc:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80098ce:	4ba4      	ldr	r3, [pc, #656]	; (8009b60 <ip4_reass+0x2d8>)
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	4403      	add	r3, r0
 80098d4:	2b0a      	cmp	r3, #10
 80098d6:	dc07      	bgt.n	80098e8 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80098d8:	4ba2      	ldr	r3, [pc, #648]	; (8009b64 <ip4_reass+0x2dc>)
 80098da:	681c      	ldr	r4, [r3, #0]
 80098dc:	2c00      	cmp	r4, #0
 80098de:	f000 81c7 	beq.w	8009c70 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80098e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80098e6:	e00f      	b.n	8009908 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80098e8:	4601      	mov	r1, r0
 80098ea:	4648      	mov	r0, r9
 80098ec:	f7ff ff44 	bl	8009778 <ip_reass_remove_oldest_datagram>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d044      	beq.n	800997e <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80098f4:	4b9a      	ldr	r3, [pc, #616]	; (8009b60 <ip4_reass+0x2d8>)
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80098fa:	2b0a      	cmp	r3, #10
 80098fc:	ddec      	ble.n	80098d8 <ip4_reass+0x50>
 80098fe:	e03e      	b.n	800997e <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009900:	6824      	ldr	r4, [r4, #0]
 8009902:	2c00      	cmp	r4, #0
 8009904:	f000 81b4 	beq.w	8009c70 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009908:	6963      	ldr	r3, [r4, #20]
 800990a:	4293      	cmp	r3, r2
 800990c:	d1f8      	bne.n	8009900 <ip4_reass+0x78>
 800990e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009912:	69a1      	ldr	r1, [r4, #24]
 8009914:	4299      	cmp	r1, r3
 8009916:	d1f3      	bne.n	8009900 <ip4_reass+0x78>
 8009918:	89a1      	ldrh	r1, [r4, #12]
 800991a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800991e:	4299      	cmp	r1, r3
 8009920:	d1ee      	bne.n	8009900 <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009922:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8009926:	f7f9 fc54 	bl	80031d2 <lwip_htons>
 800992a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800992e:	2800      	cmp	r0, #0
 8009930:	d03b      	beq.n	80099aa <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009932:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8009936:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009938:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800993c:	f019 0920 	ands.w	r9, r9, #32
 8009940:	d107      	bne.n	8009952 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8009942:	19bb      	adds	r3, r7, r6
 8009944:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009946:	429f      	cmp	r7, r3
 8009948:	d812      	bhi.n	8009970 <ip4_reass+0xe8>
 800994a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800994e:	4293      	cmp	r3, r2
 8009950:	d80e      	bhi.n	8009970 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009952:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009956:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800995a:	f7f9 fc3a 	bl	80031d2 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800995e:	f89a 3000 	ldrb.w	r3, [sl]
 8009962:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009966:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800996a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800996e:	d233      	bcs.n	80099d8 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8009970:	2c00      	cmp	r4, #0
 8009972:	f000 814c 	beq.w	8009c0e <ip4_reass+0x386>
  if (ipr->p == NULL) {
 8009976:	6863      	ldr	r3, [r4, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 8150 	beq.w	8009c1e <ip4_reass+0x396>
  pbuf_free(p);
 800997e:	4628      	mov	r0, r5
 8009980:	f7fa f9f4 	bl	8003d6c <pbuf_free>
  return NULL;
 8009984:	2500      	movs	r5, #0
}
 8009986:	4628      	mov	r0, r5
 8009988:	b003      	add	sp, #12
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800998e:	4641      	mov	r1, r8
 8009990:	4648      	mov	r0, r9
 8009992:	f7ff fef1 	bl	8009778 <ip_reass_remove_oldest_datagram>
 8009996:	4580      	cmp	r8, r0
 8009998:	dcf1      	bgt.n	800997e <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800999a:	2004      	movs	r0, #4
 800999c:	f7f9 fef8 	bl	8003790 <memp_malloc>
    if (ipr == NULL)
 80099a0:	4604      	mov	r4, r0
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f040 816b 	bne.w	8009c7e <ip4_reass+0x3f6>
 80099a8:	e7e9      	b.n	800997e <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80099aa:	89e0      	ldrh	r0, [r4, #14]
 80099ac:	f7f9 fc11 	bl	80031d2 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80099b0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d0bc      	beq.n	8009932 <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80099b8:	f8d9 3000 	ldr.w	r3, [r9]
 80099bc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80099c0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80099c4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	60e0      	str	r0, [r4, #12]
 80099cc:	6121      	str	r1, [r4, #16]
 80099ce:	6162      	str	r2, [r4, #20]
 80099d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099d4:	61a3      	str	r3, [r4, #24]
 80099d6:	e7ac      	b.n	8009932 <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 80099d8:	eba0 000b 	sub.w	r0, r0, fp
 80099dc:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80099e0:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80099e4:	f7f9 fbf5 	bl	80031d2 <lwip_htons>
 80099e8:	f3c0 020c 	ubfx	r2, r0, #0, #13
 80099ec:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 80099ee:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	f88a 3000 	strb.w	r3, [sl]
 80099f8:	f88a 3001 	strb.w	r3, [sl, #1]
 80099fc:	f88a 3002 	strb.w	r3, [sl, #2]
 8009a00:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 8009a04:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 8009a08:	4493      	add	fp, r2
 8009a0a:	fa1f f38b 	uxth.w	r3, fp
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d8ab      	bhi.n	8009970 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8009a18:	6860      	ldr	r0, [r4, #4]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	f000 8120 	beq.w	8009c60 <ip4_reass+0x3d8>
  int valid = 1;
 8009a20:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e030      	b.n	8009a8a <ip4_reass+0x202>
      iprh->next_pbuf = q;
 8009a28:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 8009a2c:	f1bc 0f00 	cmp.w	ip, #0
 8009a30:	d020      	beq.n	8009a74 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009a32:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 8009a36:	428a      	cmp	r2, r1
 8009a38:	d39d      	bcc.n	8009976 <ip4_reass+0xee>
 8009a3a:	889b      	ldrh	r3, [r3, #4]
 8009a3c:	9a01      	ldr	r2, [sp, #4]
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d399      	bcc.n	8009976 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 8009a42:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8009a46:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 8009a4a:	428b      	cmp	r3, r1
 8009a4c:	bf18      	it	ne
 8009a4e:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	d02f      	beq.n	8009ab8 <ip4_reass+0x230>
 8009a58:	7fa3      	ldrb	r3, [r4, #30]
 8009a5a:	f013 0f01 	tst.w	r3, #1
 8009a5e:	d12b      	bne.n	8009ab8 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009a60:	4a3f      	ldr	r2, [pc, #252]	; (8009b60 <ip4_reass+0x2d8>)
 8009a62:	8813      	ldrh	r3, [r2, #0]
 8009a64:	4498      	add	r8, r3
 8009a66:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 8009a6a:	f1b9 0f00 	cmp.w	r9, #0
 8009a6e:	d074      	beq.n	8009b5a <ip4_reass+0x2d2>
  return NULL;
 8009a70:	2500      	movs	r5, #0
 8009a72:	e788      	b.n	8009986 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 8009a74:	889b      	ldrh	r3, [r3, #4]
 8009a76:	9a01      	ldr	r2, [sp, #4]
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	f4ff af7c 	bcc.w	8009976 <ip4_reass+0xee>
        ipr->p = new_p;
 8009a7e:	6065      	str	r5, [r4, #4]
 8009a80:	e7e7      	b.n	8009a52 <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 8009a82:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f000 80da 	beq.w	8009c3e <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009a8a:	469c      	mov	ip, r3
 8009a8c:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 8009a8e:	8899      	ldrh	r1, [r3, #4]
 8009a90:	428a      	cmp	r2, r1
 8009a92:	d3c9      	bcc.n	8009a28 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 8009a94:	428a      	cmp	r2, r1
 8009a96:	f43f af6e 	beq.w	8009976 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 8009a9a:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8009a9e:	455a      	cmp	r2, fp
 8009aa0:	f4ff af69 	bcc.w	8009976 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 8009aa4:	f1bc 0f00 	cmp.w	ip, #0
 8009aa8:	d0eb      	beq.n	8009a82 <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 8009aaa:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 8009aae:	4288      	cmp	r0, r1
 8009ab0:	bf18      	it	ne
 8009ab2:	f04f 0e00 	movne.w	lr, #0
 8009ab6:	e7e4      	b.n	8009a82 <ip4_reass+0x1fa>
    if (valid) {
 8009ab8:	f1be 0f00 	cmp.w	lr, #0
 8009abc:	d02f      	beq.n	8009b1e <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	b343      	cbz	r3, 8009b14 <ip4_reass+0x28c>
 8009ac2:	6859      	ldr	r1, [r3, #4]
 8009ac4:	888b      	ldrh	r3, [r1, #4]
 8009ac6:	bb43      	cbnz	r3, 8009b1a <ip4_reass+0x292>
        q = iprh->next_pbuf;
 8009ac8:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 8009acc:	b15b      	cbz	r3, 8009ae6 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 8009ace:	4652      	mov	r2, sl
 8009ad0:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8009ad4:	88d2      	ldrh	r2, [r2, #6]
 8009ad6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d134      	bne.n	8009b48 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 8009ade:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f3      	bne.n	8009ace <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 8009ae6:	458a      	cmp	sl, r1
 8009ae8:	f040 80e7 	bne.w	8009cba <ip4_reass+0x432>
 8009aec:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <ip4_reass+0x2e0>)
 8009aee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009af2:	491e      	ldr	r1, [pc, #120]	; (8009b6c <ip4_reass+0x2e4>)
 8009af4:	481e      	ldr	r0, [pc, #120]	; (8009b70 <ip4_reass+0x2e8>)
 8009af6:	f000 facb 	bl	800a090 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8009afa:	f8da 3000 	ldr.w	r3, [sl]
 8009afe:	b333      	cbz	r3, 8009b4e <ip4_reass+0x2c6>
 8009b00:	4b19      	ldr	r3, [pc, #100]	; (8009b68 <ip4_reass+0x2e0>)
 8009b02:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8009b06:	491b      	ldr	r1, [pc, #108]	; (8009b74 <ip4_reass+0x2ec>)
 8009b08:	4819      	ldr	r0, [pc, #100]	; (8009b70 <ip4_reass+0x2e8>)
 8009b0a:	f000 fac1 	bl	800a090 <iprintf>
 8009b0e:	f04f 0e01 	mov.w	lr, #1
 8009b12:	e004      	b.n	8009b1e <ip4_reass+0x296>
        valid = 0;
 8009b14:	f04f 0e00 	mov.w	lr, #0
 8009b18:	e001      	b.n	8009b1e <ip4_reass+0x296>
 8009b1a:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8009b1e:	f1be 0100 	subs.w	r1, lr, #0
 8009b22:	bf18      	it	ne
 8009b24:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009b26:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <ip4_reass+0x2d8>)
 8009b28:	8813      	ldrh	r3, [r2, #0]
 8009b2a:	4498      	add	r8, r3
 8009b2c:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 8009b30:	f1b9 0f00 	cmp.w	r9, #0
 8009b34:	d105      	bne.n	8009b42 <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 8009b36:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8009b38:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009b3a:	7fa3      	ldrb	r3, [r4, #30]
 8009b3c:	f043 0301 	orr.w	r3, r3, #1
 8009b40:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8009b42:	b9c9      	cbnz	r1, 8009b78 <ip4_reass+0x2f0>
  return NULL;
 8009b44:	2500      	movs	r5, #0
 8009b46:	e71e      	b.n	8009986 <ip4_reass+0xfe>
 8009b48:	f04f 0e00 	mov.w	lr, #0
 8009b4c:	e7e7      	b.n	8009b1e <ip4_reass+0x296>
 8009b4e:	f04f 0e01 	mov.w	lr, #1
 8009b52:	e7e4      	b.n	8009b1e <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009b54:	f04f 0e00 	mov.w	lr, #0
 8009b58:	e7e1      	b.n	8009b1e <ip4_reass+0x296>
  if (is_last) {
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	e7eb      	b.n	8009b36 <ip4_reass+0x2ae>
 8009b5e:	bf00      	nop
 8009b60:	2000aac0 	.word	0x2000aac0
 8009b64:	2000aac4 	.word	0x2000aac4
 8009b68:	0800cff0 	.word	0x0800cff0
 8009b6c:	0800d0b8 	.word	0x0800d0b8
 8009b70:	0800b1cc 	.word	0x0800b1cc
 8009b74:	0800d0c8 	.word	0x0800d0c8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009b78:	8ba0      	ldrh	r0, [r4, #28]
 8009b7a:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	685d      	ldr	r5, [r3, #4]
 8009b80:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	68e7      	ldr	r7, [r4, #12]
 8009b86:	6921      	ldr	r1, [r4, #16]
 8009b88:	6962      	ldr	r2, [r4, #20]
 8009b8a:	602b      	str	r3, [r5, #0]
 8009b8c:	606f      	str	r7, [r5, #4]
 8009b8e:	60a9      	str	r1, [r5, #8]
 8009b90:	60ea      	str	r2, [r5, #12]
 8009b92:	69a3      	ldr	r3, [r4, #24]
 8009b94:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009b96:	b280      	uxth	r0, r0
 8009b98:	f7f9 fb1b 	bl	80031d2 <lwip_htons>
 8009b9c:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	71ab      	strb	r3, [r5, #6]
 8009ba2:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8009ba4:	72ab      	strb	r3, [r5, #10]
 8009ba6:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8009ba8:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8009baa:	b16e      	cbz	r6, 8009bc8 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 8009bac:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 8009bb0:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7fa f899 	bl	8003cec <pbuf_remove_header>
      pbuf_cat(p, r);
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7fa fa53 	bl	8004068 <pbuf_cat>
      r = iprh->next_pbuf;
 8009bc2:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 8009bc4:	2e00      	cmp	r6, #0
 8009bc6:	d1f3      	bne.n	8009bb0 <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 8009bc8:	4b3d      	ldr	r3, [pc, #244]	; (8009cc0 <ip4_reass+0x438>)
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	42a1      	cmp	r1, r4
 8009bce:	d005      	beq.n	8009bdc <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009bd0:	b129      	cbz	r1, 8009bde <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 8009bd2:	680b      	ldr	r3, [r1, #0]
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	d002      	beq.n	8009bde <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009bd8:	4619      	mov	r1, r3
 8009bda:	e7f9      	b.n	8009bd0 <ip4_reass+0x348>
      ipr_prev = NULL;
 8009bdc:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009bde:	4620      	mov	r0, r4
 8009be0:	f7ff fd22 	bl	8009628 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8009be4:	4628      	mov	r0, r5
 8009be6:	f7fa fa1b 	bl	8004020 <pbuf_clen>
 8009bea:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009bec:	4b35      	ldr	r3, [pc, #212]	; (8009cc4 <ip4_reass+0x43c>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	d304      	bcc.n	8009bfe <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8009bf4:	4a33      	ldr	r2, [pc, #204]	; (8009cc4 <ip4_reass+0x43c>)
 8009bf6:	8813      	ldrh	r3, [r2, #0]
 8009bf8:	1b1c      	subs	r4, r3, r4
 8009bfa:	8014      	strh	r4, [r2, #0]
    return p;
 8009bfc:	e6c3      	b.n	8009986 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009bfe:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <ip4_reass+0x440>)
 8009c00:	f240 229b 	movw	r2, #667	; 0x29b
 8009c04:	4931      	ldr	r1, [pc, #196]	; (8009ccc <ip4_reass+0x444>)
 8009c06:	4832      	ldr	r0, [pc, #200]	; (8009cd0 <ip4_reass+0x448>)
 8009c08:	f000 fa42 	bl	800a090 <iprintf>
 8009c0c:	e7f2      	b.n	8009bf4 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8009c0e:	4b2e      	ldr	r3, [pc, #184]	; (8009cc8 <ip4_reass+0x440>)
 8009c10:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009c14:	492f      	ldr	r1, [pc, #188]	; (8009cd4 <ip4_reass+0x44c>)
 8009c16:	482e      	ldr	r0, [pc, #184]	; (8009cd0 <ip4_reass+0x448>)
 8009c18:	f000 fa3a 	bl	800a090 <iprintf>
 8009c1c:	e6ab      	b.n	8009976 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8009c1e:	4b28      	ldr	r3, [pc, #160]	; (8009cc0 <ip4_reass+0x438>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	d006      	beq.n	8009c34 <ip4_reass+0x3ac>
 8009c26:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <ip4_reass+0x440>)
 8009c28:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009c2c:	492a      	ldr	r1, [pc, #168]	; (8009cd8 <ip4_reass+0x450>)
 8009c2e:	4828      	ldr	r0, [pc, #160]	; (8009cd0 <ip4_reass+0x448>)
 8009c30:	f000 fa2e 	bl	800a090 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8009c34:	2100      	movs	r1, #0
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7ff fcf6 	bl	8009628 <ip_reass_dequeue_datagram>
 8009c3c:	e69f      	b.n	800997e <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 8009c3e:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8009c40:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009c44:	455b      	cmp	r3, fp
 8009c46:	f43f af04 	beq.w	8009a52 <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	d081      	beq.n	8009b54 <ip4_reass+0x2cc>
 8009c50:	7fa3      	ldrb	r3, [r4, #30]
 8009c52:	f013 0f01 	tst.w	r3, #1
 8009c56:	f43f af03 	beq.w	8009a60 <ip4_reass+0x1d8>
 8009c5a:	f04f 0e00 	mov.w	lr, #0
 8009c5e:	e75e      	b.n	8009b1e <ip4_reass+0x296>
      ipr->p = new_p;
 8009c60:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009c62:	f1b9 0f00 	cmp.w	r9, #0
 8009c66:	f43f af2a 	beq.w	8009abe <ip4_reass+0x236>
  int valid = 1;
 8009c6a:	f04f 0e01 	mov.w	lr, #1
 8009c6e:	e6f3      	b.n	8009a58 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009c70:	2004      	movs	r0, #4
 8009c72:	f7f9 fd8d 	bl	8003790 <memp_malloc>
  if (ipr == NULL) {
 8009c76:	4604      	mov	r4, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f43f ae88 	beq.w	800998e <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	60a3      	str	r3, [r4, #8]
 8009c84:	60e3      	str	r3, [r4, #12]
 8009c86:	6123      	str	r3, [r4, #16]
 8009c88:	6163      	str	r3, [r4, #20]
 8009c8a:	61a3      	str	r3, [r4, #24]
 8009c8c:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 8009c8e:	230f      	movs	r3, #15
 8009c90:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8009c92:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <ip4_reass+0x438>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8009c98:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009c9a:	f8d9 3000 	ldr.w	r3, [r9]
 8009c9e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009ca2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8009ca6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009caa:	60a3      	str	r3, [r4, #8]
 8009cac:	60e0      	str	r0, [r4, #12]
 8009cae:	6121      	str	r1, [r4, #16]
 8009cb0:	6162      	str	r2, [r4, #20]
 8009cb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cb6:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 8009cb8:	e63b      	b.n	8009932 <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 8009cba:	f04f 0e01 	mov.w	lr, #1
 8009cbe:	e72e      	b.n	8009b1e <ip4_reass+0x296>
 8009cc0:	2000aac4 	.word	0x2000aac4
 8009cc4:	2000aac0 	.word	0x2000aac0
 8009cc8:	0800cff0 	.word	0x0800cff0
 8009ccc:	0800d0ec 	.word	0x0800d0ec
 8009cd0:	0800b1cc 	.word	0x0800b1cc
 8009cd4:	0800d108 	.word	0x0800d108
 8009cd8:	0800d114 	.word	0x0800d114

08009cdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	b08d      	sub	sp, #52	; 0x34
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	9107      	str	r1, [sp, #28]
 8009ce6:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009ce8:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8009cea:	3b14      	subs	r3, #20
 8009cec:	bf48      	it	mi
 8009cee:	3307      	addmi	r3, #7
 8009cf0:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8009cf4:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009cf6:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	f040 80d9 	bne.w	8009eba <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009d08:	8943      	ldrh	r3, [r0, #10]
 8009d0a:	2b13      	cmp	r3, #19
 8009d0c:	d943      	bls.n	8009d96 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009d0e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8009d12:	f7f9 fa5e 	bl	80031d2 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8009d16:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8009d1a:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8009d1c:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8009d20:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8009d22:	892b      	ldrh	r3, [r5, #8]
 8009d24:	3b14      	subs	r3, #20
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	9303      	str	r3, [sp, #12]

  while (left) {
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80c8 	beq.w	8009ec0 <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009d30:	9b06      	ldr	r3, [sp, #24]
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 8009d38:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 8009d3c:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009d3e:	9b08      	ldr	r3, [sp, #32]
 8009d40:	9a03      	ldr	r2, [sp, #12]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bf28      	it	cs
 8009d46:	4613      	movcs	r3, r2
 8009d48:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009d4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d4e:	2114      	movs	r1, #20
 8009d50:	200e      	movs	r0, #14
 8009d52:	f7fa f875 	bl	8003e40 <pbuf_alloc>
    if (rambuf == NULL) {
 8009d56:	4683      	mov	fp, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	f000 80b3 	beq.w	8009ec4 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009d5e:	8943      	ldrh	r3, [r0, #10]
 8009d60:	2b13      	cmp	r3, #19
 8009d62:	d922      	bls.n	8009daa <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009d64:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009d68:	f8da 2000 	ldr.w	r2, [sl]
 8009d6c:	f8da 6004 	ldr.w	r6, [sl, #4]
 8009d70:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009d74:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	605e      	str	r6, [r3, #4]
 8009d7c:	6098      	str	r0, [r3, #8]
 8009d7e:	60d9      	str	r1, [r3, #12]
 8009d80:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009d84:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8009d86:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009d8a:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d04e      	beq.n	8009e30 <ip4_frag+0x154>
    left_to_copy = fragsize;
 8009d92:	461e      	mov	r6, r3
 8009d94:	e01d      	b.n	8009dd2 <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009d96:	4b4d      	ldr	r3, [pc, #308]	; (8009ecc <ip4_frag+0x1f0>)
 8009d98:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8009d9c:	494c      	ldr	r1, [pc, #304]	; (8009ed0 <ip4_frag+0x1f4>)
 8009d9e:	484d      	ldr	r0, [pc, #308]	; (8009ed4 <ip4_frag+0x1f8>)
 8009da0:	f000 f976 	bl	800a090 <iprintf>
 8009da4:	f06f 0005 	mvn.w	r0, #5
 8009da8:	e07b      	b.n	8009ea2 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009daa:	4b48      	ldr	r3, [pc, #288]	; (8009ecc <ip4_frag+0x1f0>)
 8009dac:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009db0:	4949      	ldr	r1, [pc, #292]	; (8009ed8 <ip4_frag+0x1fc>)
 8009db2:	4848      	ldr	r0, [pc, #288]	; (8009ed4 <ip4_frag+0x1f8>)
 8009db4:	f000 f96c 	bl	800a090 <iprintf>
 8009db8:	e7d4      	b.n	8009d64 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009dba:	4b44      	ldr	r3, [pc, #272]	; (8009ecc <ip4_frag+0x1f0>)
 8009dbc:	f240 322d 	movw	r2, #813	; 0x32d
 8009dc0:	4946      	ldr	r1, [pc, #280]	; (8009edc <ip4_frag+0x200>)
 8009dc2:	4844      	ldr	r0, [pc, #272]	; (8009ed4 <ip4_frag+0x1f8>)
 8009dc4:	f000 f964 	bl	800a090 <iprintf>
 8009dc8:	e009      	b.n	8009dde <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 8009dca:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8009dcc:	b376      	cbz	r6, 8009e2c <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 8009dce:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 8009dd2:	896b      	ldrh	r3, [r5, #10]
 8009dd4:	eba3 0409 	sub.w	r4, r3, r9
 8009dd8:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009dda:	454b      	cmp	r3, r9
 8009ddc:	d3ed      	bcc.n	8009dba <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8009dde:	42b4      	cmp	r4, r6
 8009de0:	bf28      	it	cs
 8009de2:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	d0f0      	beq.n	8009dca <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009de8:	2005      	movs	r0, #5
 8009dea:	f7f9 fcd1 	bl	8003790 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 8009dee:	4607      	mov	r7, r0
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d051      	beq.n	8009e98 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009df4:	9401      	str	r4, [sp, #4]
 8009df6:	686b      	ldr	r3, [r5, #4]
 8009df8:	444b      	add	r3, r9
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2241      	movs	r2, #65	; 0x41
 8009e00:	4621      	mov	r1, r4
 8009e02:	2000      	movs	r0, #0
 8009e04:	f7f9 ff50 	bl	8003ca8 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 8009e08:	4680      	mov	r8, r0
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d04c      	beq.n	8009ea8 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f7fa f912 	bl	8004038 <pbuf_ref>
      pcr->original = p;
 8009e14:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009e16:	4b32      	ldr	r3, [pc, #200]	; (8009ee0 <ip4_frag+0x204>)
 8009e18:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8009e1a:	4641      	mov	r1, r8
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f7fa f923 	bl	8004068 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009e22:	1b36      	subs	r6, r6, r4
 8009e24:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8009e26:	b11e      	cbz	r6, 8009e30 <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 8009e28:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8009e2a:	e7d0      	b.n	8009dce <ip4_frag+0xf2>
        poff = 0;
 8009e2c:	46b1      	mov	r9, r6
 8009e2e:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8009e30:	44a1      	add	r9, r4
 8009e32:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8009e36:	9b05      	ldr	r3, [sp, #20]
 8009e38:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8009e3c:	9b07      	ldr	r3, [sp, #28]
 8009e3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009e40:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8009e42:	9a03      	ldr	r2, [sp, #12]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	dd01      	ble.n	8009e4c <ip4_frag+0x170>
 8009e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e4a:	b10b      	cbz	r3, 8009e50 <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8009e4c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009e50:	f7f9 f9bf 	bl	80031d2 <lwip_htons>
 8009e54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e56:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009e58:	9f04      	ldr	r7, [sp, #16]
 8009e5a:	f107 0014 	add.w	r0, r7, #20
 8009e5e:	b280      	uxth	r0, r0
 8009e60:	f7f9 f9b7 	bl	80031d2 <lwip_htons>
 8009e64:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8009e66:	2300      	movs	r3, #0
 8009e68:	72b3      	strb	r3, [r6, #10]
 8009e6a:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8009e6c:	9807      	ldr	r0, [sp, #28]
 8009e6e:	6943      	ldr	r3, [r0, #20]
 8009e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e72:	4659      	mov	r1, fp
 8009e74:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8009e76:	4658      	mov	r0, fp
 8009e78:	f7f9 ff78 	bl	8003d6c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	1bdb      	subs	r3, r3, r7
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 8009e84:	9b05      	ldr	r3, [sp, #20]
 8009e86:	9906      	ldr	r1, [sp, #24]
 8009e88:	440b      	add	r3, r1
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	9305      	str	r3, [sp, #20]
  while (left) {
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	f47f af55 	bne.w	8009d3e <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8009e94:	2000      	movs	r0, #0
 8009e96:	e004      	b.n	8009ea2 <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 8009e98:	4658      	mov	r0, fp
 8009e9a:	f7f9 ff67 	bl	8003d6c <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009ea2:	b00d      	add	sp, #52	; 0x34
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff fca5 	bl	80097f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f7f9 ff5c 	bl	8003d6c <pbuf_free>
  return ERR_MEM;
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8009eb8:	e7f3      	b.n	8009ea2 <ip4_frag+0x1c6>
    return ERR_VAL;
 8009eba:	f06f 0005 	mvn.w	r0, #5
 8009ebe:	e7f0      	b.n	8009ea2 <ip4_frag+0x1c6>
  return ERR_OK;
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7ee      	b.n	8009ea2 <ip4_frag+0x1c6>
  return ERR_MEM;
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e7eb      	b.n	8009ea2 <ip4_frag+0x1c6>
 8009eca:	bf00      	nop
 8009ecc:	0800cff0 	.word	0x0800cff0
 8009ed0:	0800d134 	.word	0x0800d134
 8009ed4:	0800b1cc 	.word	0x0800b1cc
 8009ed8:	0800d150 	.word	0x0800d150
 8009edc:	0800d170 	.word	0x0800d170
 8009ee0:	08009825 	.word	0x08009825

08009ee4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009ee8:	8943      	ldrh	r3, [r0, #10]
 8009eea:	2b0e      	cmp	r3, #14
 8009eec:	d91c      	bls.n	8009f28 <ethernet_input+0x44>
 8009eee:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009ef0:	7bc3      	ldrb	r3, [r0, #15]
 8009ef2:	b91b      	cbnz	r3, 8009efc <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8009ef4:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8009ef8:	3301      	adds	r3, #1
 8009efa:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009efc:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009efe:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009f00:	7803      	ldrb	r3, [r0, #0]
 8009f02:	f013 0f01 	tst.w	r3, #1
 8009f06:	d00a      	beq.n	8009f1e <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d012      	beq.n	8009f32 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009f0c:	2206      	movs	r2, #6
 8009f0e:	491e      	ldr	r1, [pc, #120]	; (8009f88 <ethernet_input+0xa4>)
 8009f10:	f000 f898 	bl	800a044 <memcmp>
 8009f14:	b918      	cbnz	r0, 8009f1e <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009f16:	7b63      	ldrb	r3, [r4, #13]
 8009f18:	f043 0308 	orr.w	r3, r3, #8
 8009f1c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009f1e:	2e08      	cmp	r6, #8
 8009f20:	d012      	beq.n	8009f48 <ethernet_input+0x64>
 8009f22:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8009f26:	d01f      	beq.n	8009f68 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7f9 ff1f 	bl	8003d6c <pbuf_free>
  return ERR_OK;
}
 8009f2e:	2000      	movs	r0, #0
 8009f30:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009f32:	7843      	ldrb	r3, [r0, #1]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1f2      	bne.n	8009f1e <ethernet_input+0x3a>
 8009f38:	7883      	ldrb	r3, [r0, #2]
 8009f3a:	2b5e      	cmp	r3, #94	; 0x5e
 8009f3c:	d1ef      	bne.n	8009f1e <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 8009f3e:	7b63      	ldrb	r3, [r4, #13]
 8009f40:	f043 0310 	orr.w	r3, r3, #16
 8009f44:	7363      	strb	r3, [r4, #13]
 8009f46:	e7ea      	b.n	8009f1e <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009f48:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8009f4c:	f013 0f08 	tst.w	r3, #8
 8009f50:	d0ea      	beq.n	8009f28 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009f52:	210e      	movs	r1, #14
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7f9 fec9 	bl	8003cec <pbuf_remove_header>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	d1e4      	bne.n	8009f28 <ethernet_input+0x44>
        ip4_input(p, netif);
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff f97d 	bl	8009260 <ip4_input>
      break;
 8009f66:	e7e2      	b.n	8009f2e <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009f68:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8009f6c:	f013 0f08 	tst.w	r3, #8
 8009f70:	d0da      	beq.n	8009f28 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009f72:	210e      	movs	r1, #14
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7f9 feb9 	bl	8003cec <pbuf_remove_header>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d1d4      	bne.n	8009f28 <ethernet_input+0x44>
        etharp_input(p, netif);
 8009f7e:	4629      	mov	r1, r5
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7fe fd3d 	bl	8008a00 <etharp_input>
      break;
 8009f86:	e7d2      	b.n	8009f2e <ethernet_input+0x4a>
 8009f88:	0800d1ec 	.word	0x0800d1ec

08009f8c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	4616      	mov	r6, r2
 8009f96:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8009f98:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8009f9c:	f7f9 f919 	bl	80031d2 <lwip_htons>
 8009fa0:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009fa2:	210e      	movs	r1, #14
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f7f9 fe9c 	bl	8003ce2 <pbuf_add_header>
 8009faa:	b9e8      	cbnz	r0, 8009fe8 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009fac:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8009fae:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	88bb      	ldrh	r3, [r7, #4]
 8009fb8:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8009fba:	6833      	ldr	r3, [r6, #0]
 8009fbc:	f8c1 3006 	str.w	r3, [r1, #6]
 8009fc0:	88b3      	ldrh	r3, [r6, #4]
 8009fc2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009fc4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8009fc8:	2b06      	cmp	r3, #6
 8009fca:	d105      	bne.n	8009fd8 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009fcc:	69ab      	ldr	r3, [r5, #24]
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009fd8:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <ethernet_output+0x64>)
 8009fda:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009fde:	4905      	ldr	r1, [pc, #20]	; (8009ff4 <ethernet_output+0x68>)
 8009fe0:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <ethernet_output+0x6c>)
 8009fe2:	f000 f855 	bl	800a090 <iprintf>
 8009fe6:	e7f1      	b.n	8009fcc <ethernet_output+0x40>
  return ERR_BUF;
 8009fe8:	f06f 0001 	mvn.w	r0, #1
 8009fec:	e7f2      	b.n	8009fd4 <ethernet_output+0x48>
 8009fee:	bf00      	nop
 8009ff0:	0800d180 	.word	0x0800d180
 8009ff4:	0800d1b8 	.word	0x0800d1b8
 8009ff8:	0800b1cc 	.word	0x0800b1cc

08009ffc <__libc_init_array>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	4d0d      	ldr	r5, [pc, #52]	; (800a034 <__libc_init_array+0x38>)
 800a000:	4c0d      	ldr	r4, [pc, #52]	; (800a038 <__libc_init_array+0x3c>)
 800a002:	1b64      	subs	r4, r4, r5
 800a004:	10a4      	asrs	r4, r4, #2
 800a006:	2600      	movs	r6, #0
 800a008:	42a6      	cmp	r6, r4
 800a00a:	d109      	bne.n	800a020 <__libc_init_array+0x24>
 800a00c:	4d0b      	ldr	r5, [pc, #44]	; (800a03c <__libc_init_array+0x40>)
 800a00e:	4c0c      	ldr	r4, [pc, #48]	; (800a040 <__libc_init_array+0x44>)
 800a010:	f001 f8a2 	bl	800b158 <_init>
 800a014:	1b64      	subs	r4, r4, r5
 800a016:	10a4      	asrs	r4, r4, #2
 800a018:	2600      	movs	r6, #0
 800a01a:	42a6      	cmp	r6, r4
 800a01c:	d105      	bne.n	800a02a <__libc_init_array+0x2e>
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	f855 3b04 	ldr.w	r3, [r5], #4
 800a024:	4798      	blx	r3
 800a026:	3601      	adds	r6, #1
 800a028:	e7ee      	b.n	800a008 <__libc_init_array+0xc>
 800a02a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02e:	4798      	blx	r3
 800a030:	3601      	adds	r6, #1
 800a032:	e7f2      	b.n	800a01a <__libc_init_array+0x1e>
 800a034:	0800d34c 	.word	0x0800d34c
 800a038:	0800d34c 	.word	0x0800d34c
 800a03c:	0800d34c 	.word	0x0800d34c
 800a040:	0800d350 	.word	0x0800d350

0800a044 <memcmp>:
 800a044:	b510      	push	{r4, lr}
 800a046:	3901      	subs	r1, #1
 800a048:	4402      	add	r2, r0
 800a04a:	4290      	cmp	r0, r2
 800a04c:	d101      	bne.n	800a052 <memcmp+0xe>
 800a04e:	2000      	movs	r0, #0
 800a050:	e005      	b.n	800a05e <memcmp+0x1a>
 800a052:	7803      	ldrb	r3, [r0, #0]
 800a054:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a058:	42a3      	cmp	r3, r4
 800a05a:	d001      	beq.n	800a060 <memcmp+0x1c>
 800a05c:	1b18      	subs	r0, r3, r4
 800a05e:	bd10      	pop	{r4, pc}
 800a060:	3001      	adds	r0, #1
 800a062:	e7f2      	b.n	800a04a <memcmp+0x6>

0800a064 <memcpy>:
 800a064:	440a      	add	r2, r1
 800a066:	4291      	cmp	r1, r2
 800a068:	f100 33ff 	add.w	r3, r0, #4294967295
 800a06c:	d100      	bne.n	800a070 <memcpy+0xc>
 800a06e:	4770      	bx	lr
 800a070:	b510      	push	{r4, lr}
 800a072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07a:	4291      	cmp	r1, r2
 800a07c:	d1f9      	bne.n	800a072 <memcpy+0xe>
 800a07e:	bd10      	pop	{r4, pc}

0800a080 <memset>:
 800a080:	4402      	add	r2, r0
 800a082:	4603      	mov	r3, r0
 800a084:	4293      	cmp	r3, r2
 800a086:	d100      	bne.n	800a08a <memset+0xa>
 800a088:	4770      	bx	lr
 800a08a:	f803 1b01 	strb.w	r1, [r3], #1
 800a08e:	e7f9      	b.n	800a084 <memset+0x4>

0800a090 <iprintf>:
 800a090:	b40f      	push	{r0, r1, r2, r3}
 800a092:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <iprintf+0x2c>)
 800a094:	b513      	push	{r0, r1, r4, lr}
 800a096:	681c      	ldr	r4, [r3, #0]
 800a098:	b124      	cbz	r4, 800a0a4 <iprintf+0x14>
 800a09a:	69a3      	ldr	r3, [r4, #24]
 800a09c:	b913      	cbnz	r3, 800a0a4 <iprintf+0x14>
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f8d6 	bl	800a250 <__sinit>
 800a0a4:	ab05      	add	r3, sp, #20
 800a0a6:	9a04      	ldr	r2, [sp, #16]
 800a0a8:	68a1      	ldr	r1, [r4, #8]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fa93 	bl	800a5d8 <_vfiprintf_r>
 800a0b2:	b002      	add	sp, #8
 800a0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b8:	b004      	add	sp, #16
 800a0ba:	4770      	bx	lr
 800a0bc:	20000028 	.word	0x20000028

0800a0c0 <rand>:
 800a0c0:	4b16      	ldr	r3, [pc, #88]	; (800a11c <rand+0x5c>)
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	681c      	ldr	r4, [r3, #0]
 800a0c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0c8:	b9b3      	cbnz	r3, 800a0f8 <rand+0x38>
 800a0ca:	2018      	movs	r0, #24
 800a0cc:	f000 f972 	bl	800a3b4 <malloc>
 800a0d0:	63a0      	str	r0, [r4, #56]	; 0x38
 800a0d2:	b928      	cbnz	r0, 800a0e0 <rand+0x20>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	4b12      	ldr	r3, [pc, #72]	; (800a120 <rand+0x60>)
 800a0d8:	4812      	ldr	r0, [pc, #72]	; (800a124 <rand+0x64>)
 800a0da:	214e      	movs	r1, #78	; 0x4e
 800a0dc:	f000 f842 	bl	800a164 <__assert_func>
 800a0e0:	4a11      	ldr	r2, [pc, #68]	; (800a128 <rand+0x68>)
 800a0e2:	4b12      	ldr	r3, [pc, #72]	; (800a12c <rand+0x6c>)
 800a0e4:	e9c0 2300 	strd	r2, r3, [r0]
 800a0e8:	4b11      	ldr	r3, [pc, #68]	; (800a130 <rand+0x70>)
 800a0ea:	6083      	str	r3, [r0, #8]
 800a0ec:	230b      	movs	r3, #11
 800a0ee:	8183      	strh	r3, [r0, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a0f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a0fa:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <rand+0x74>)
 800a0fc:	6920      	ldr	r0, [r4, #16]
 800a0fe:	6963      	ldr	r3, [r4, #20]
 800a100:	490d      	ldr	r1, [pc, #52]	; (800a138 <rand+0x78>)
 800a102:	4342      	muls	r2, r0
 800a104:	fb01 2203 	mla	r2, r1, r3, r2
 800a108:	fba0 0101 	umull	r0, r1, r0, r1
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	eb42 0001 	adc.w	r0, r2, r1
 800a112:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a116:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a11a:	bd10      	pop	{r4, pc}
 800a11c:	20000028 	.word	0x20000028
 800a120:	0800d200 	.word	0x0800d200
 800a124:	0800d217 	.word	0x0800d217
 800a128:	abcd330e 	.word	0xabcd330e
 800a12c:	e66d1234 	.word	0xe66d1234
 800a130:	0005deec 	.word	0x0005deec
 800a134:	5851f42d 	.word	0x5851f42d
 800a138:	4c957f2d 	.word	0x4c957f2d

0800a13c <strncpy>:
 800a13c:	b510      	push	{r4, lr}
 800a13e:	3901      	subs	r1, #1
 800a140:	4603      	mov	r3, r0
 800a142:	b132      	cbz	r2, 800a152 <strncpy+0x16>
 800a144:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a148:	f803 4b01 	strb.w	r4, [r3], #1
 800a14c:	3a01      	subs	r2, #1
 800a14e:	2c00      	cmp	r4, #0
 800a150:	d1f7      	bne.n	800a142 <strncpy+0x6>
 800a152:	441a      	add	r2, r3
 800a154:	2100      	movs	r1, #0
 800a156:	4293      	cmp	r3, r2
 800a158:	d100      	bne.n	800a15c <strncpy+0x20>
 800a15a:	bd10      	pop	{r4, pc}
 800a15c:	f803 1b01 	strb.w	r1, [r3], #1
 800a160:	e7f9      	b.n	800a156 <strncpy+0x1a>
	...

0800a164 <__assert_func>:
 800a164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a166:	4614      	mov	r4, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <__assert_func+0x2c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4605      	mov	r5, r0
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	b14c      	cbz	r4, 800a188 <__assert_func+0x24>
 800a174:	4b07      	ldr	r3, [pc, #28]	; (800a194 <__assert_func+0x30>)
 800a176:	9100      	str	r1, [sp, #0]
 800a178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a17c:	4906      	ldr	r1, [pc, #24]	; (800a198 <__assert_func+0x34>)
 800a17e:	462b      	mov	r3, r5
 800a180:	f000 f8e4 	bl	800a34c <fiprintf>
 800a184:	f000 fe12 	bl	800adac <abort>
 800a188:	4b04      	ldr	r3, [pc, #16]	; (800a19c <__assert_func+0x38>)
 800a18a:	461c      	mov	r4, r3
 800a18c:	e7f3      	b.n	800a176 <__assert_func+0x12>
 800a18e:	bf00      	nop
 800a190:	20000028 	.word	0x20000028
 800a194:	0800d272 	.word	0x0800d272
 800a198:	0800d27f 	.word	0x0800d27f
 800a19c:	0800d2ad 	.word	0x0800d2ad

0800a1a0 <std>:
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ae:	6083      	str	r3, [r0, #8]
 800a1b0:	8181      	strh	r1, [r0, #12]
 800a1b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1b4:	81c2      	strh	r2, [r0, #14]
 800a1b6:	6183      	str	r3, [r0, #24]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	305c      	adds	r0, #92	; 0x5c
 800a1be:	f7ff ff5f 	bl	800a080 <memset>
 800a1c2:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <std+0x38>)
 800a1c4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1c6:	4b05      	ldr	r3, [pc, #20]	; (800a1dc <std+0x3c>)
 800a1c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ca:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <std+0x40>)
 800a1cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1ce:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <std+0x44>)
 800a1d0:	6224      	str	r4, [r4, #32]
 800a1d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop
 800a1d8:	0800ab81 	.word	0x0800ab81
 800a1dc:	0800aba3 	.word	0x0800aba3
 800a1e0:	0800abdb 	.word	0x0800abdb
 800a1e4:	0800abff 	.word	0x0800abff

0800a1e8 <_cleanup_r>:
 800a1e8:	4901      	ldr	r1, [pc, #4]	; (800a1f0 <_cleanup_r+0x8>)
 800a1ea:	f000 b8c1 	b.w	800a370 <_fwalk_reent>
 800a1ee:	bf00      	nop
 800a1f0:	0800aee9 	.word	0x0800aee9

0800a1f4 <__sfmoreglue>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	2268      	movs	r2, #104	; 0x68
 800a1f8:	1e4d      	subs	r5, r1, #1
 800a1fa:	4355      	muls	r5, r2
 800a1fc:	460e      	mov	r6, r1
 800a1fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a202:	f000 f94b 	bl	800a49c <_malloc_r>
 800a206:	4604      	mov	r4, r0
 800a208:	b140      	cbz	r0, 800a21c <__sfmoreglue+0x28>
 800a20a:	2100      	movs	r1, #0
 800a20c:	e9c0 1600 	strd	r1, r6, [r0]
 800a210:	300c      	adds	r0, #12
 800a212:	60a0      	str	r0, [r4, #8]
 800a214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a218:	f7ff ff32 	bl	800a080 <memset>
 800a21c:	4620      	mov	r0, r4
 800a21e:	bd70      	pop	{r4, r5, r6, pc}

0800a220 <__sfp_lock_acquire>:
 800a220:	4801      	ldr	r0, [pc, #4]	; (800a228 <__sfp_lock_acquire+0x8>)
 800a222:	f000 b8c5 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 800a226:	bf00      	nop
 800a228:	2000aacd 	.word	0x2000aacd

0800a22c <__sfp_lock_release>:
 800a22c:	4801      	ldr	r0, [pc, #4]	; (800a234 <__sfp_lock_release+0x8>)
 800a22e:	f000 b8c0 	b.w	800a3b2 <__retarget_lock_release_recursive>
 800a232:	bf00      	nop
 800a234:	2000aacd 	.word	0x2000aacd

0800a238 <__sinit_lock_acquire>:
 800a238:	4801      	ldr	r0, [pc, #4]	; (800a240 <__sinit_lock_acquire+0x8>)
 800a23a:	f000 b8b9 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 800a23e:	bf00      	nop
 800a240:	2000aace 	.word	0x2000aace

0800a244 <__sinit_lock_release>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__sinit_lock_release+0x8>)
 800a246:	f000 b8b4 	b.w	800a3b2 <__retarget_lock_release_recursive>
 800a24a:	bf00      	nop
 800a24c:	2000aace 	.word	0x2000aace

0800a250 <__sinit>:
 800a250:	b510      	push	{r4, lr}
 800a252:	4604      	mov	r4, r0
 800a254:	f7ff fff0 	bl	800a238 <__sinit_lock_acquire>
 800a258:	69a3      	ldr	r3, [r4, #24]
 800a25a:	b11b      	cbz	r3, 800a264 <__sinit+0x14>
 800a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a260:	f7ff bff0 	b.w	800a244 <__sinit_lock_release>
 800a264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a268:	6523      	str	r3, [r4, #80]	; 0x50
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <__sinit+0x68>)
 800a26c:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <__sinit+0x6c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	62a2      	str	r2, [r4, #40]	; 0x28
 800a272:	42a3      	cmp	r3, r4
 800a274:	bf04      	itt	eq
 800a276:	2301      	moveq	r3, #1
 800a278:	61a3      	streq	r3, [r4, #24]
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 f820 	bl	800a2c0 <__sfp>
 800a280:	6060      	str	r0, [r4, #4]
 800a282:	4620      	mov	r0, r4
 800a284:	f000 f81c 	bl	800a2c0 <__sfp>
 800a288:	60a0      	str	r0, [r4, #8]
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 f818 	bl	800a2c0 <__sfp>
 800a290:	2200      	movs	r2, #0
 800a292:	60e0      	str	r0, [r4, #12]
 800a294:	2104      	movs	r1, #4
 800a296:	6860      	ldr	r0, [r4, #4]
 800a298:	f7ff ff82 	bl	800a1a0 <std>
 800a29c:	68a0      	ldr	r0, [r4, #8]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	2109      	movs	r1, #9
 800a2a2:	f7ff ff7d 	bl	800a1a0 <std>
 800a2a6:	68e0      	ldr	r0, [r4, #12]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	2112      	movs	r1, #18
 800a2ac:	f7ff ff78 	bl	800a1a0 <std>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	61a3      	str	r3, [r4, #24]
 800a2b4:	e7d2      	b.n	800a25c <__sinit+0xc>
 800a2b6:	bf00      	nop
 800a2b8:	0800d1fc 	.word	0x0800d1fc
 800a2bc:	0800a1e9 	.word	0x0800a1e9

0800a2c0 <__sfp>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	f7ff ffac 	bl	800a220 <__sfp_lock_acquire>
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <__sfp+0x84>)
 800a2ca:	681e      	ldr	r6, [r3, #0]
 800a2cc:	69b3      	ldr	r3, [r6, #24]
 800a2ce:	b913      	cbnz	r3, 800a2d6 <__sfp+0x16>
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff ffbd 	bl	800a250 <__sinit>
 800a2d6:	3648      	adds	r6, #72	; 0x48
 800a2d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	d503      	bpl.n	800a2e8 <__sfp+0x28>
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	b30b      	cbz	r3, 800a328 <__sfp+0x68>
 800a2e4:	6836      	ldr	r6, [r6, #0]
 800a2e6:	e7f7      	b.n	800a2d8 <__sfp+0x18>
 800a2e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2ec:	b9d5      	cbnz	r5, 800a324 <__sfp+0x64>
 800a2ee:	4b16      	ldr	r3, [pc, #88]	; (800a348 <__sfp+0x88>)
 800a2f0:	60e3      	str	r3, [r4, #12]
 800a2f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2f6:	6665      	str	r5, [r4, #100]	; 0x64
 800a2f8:	f000 f859 	bl	800a3ae <__retarget_lock_init_recursive>
 800a2fc:	f7ff ff96 	bl	800a22c <__sfp_lock_release>
 800a300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a308:	6025      	str	r5, [r4, #0]
 800a30a:	61a5      	str	r5, [r4, #24]
 800a30c:	2208      	movs	r2, #8
 800a30e:	4629      	mov	r1, r5
 800a310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a314:	f7ff feb4 	bl	800a080 <memset>
 800a318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a31c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a320:	4620      	mov	r0, r4
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	3468      	adds	r4, #104	; 0x68
 800a326:	e7d9      	b.n	800a2dc <__sfp+0x1c>
 800a328:	2104      	movs	r1, #4
 800a32a:	4638      	mov	r0, r7
 800a32c:	f7ff ff62 	bl	800a1f4 <__sfmoreglue>
 800a330:	4604      	mov	r4, r0
 800a332:	6030      	str	r0, [r6, #0]
 800a334:	2800      	cmp	r0, #0
 800a336:	d1d5      	bne.n	800a2e4 <__sfp+0x24>
 800a338:	f7ff ff78 	bl	800a22c <__sfp_lock_release>
 800a33c:	230c      	movs	r3, #12
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	e7ee      	b.n	800a320 <__sfp+0x60>
 800a342:	bf00      	nop
 800a344:	0800d1fc 	.word	0x0800d1fc
 800a348:	ffff0001 	.word	0xffff0001

0800a34c <fiprintf>:
 800a34c:	b40e      	push	{r1, r2, r3}
 800a34e:	b503      	push	{r0, r1, lr}
 800a350:	4601      	mov	r1, r0
 800a352:	ab03      	add	r3, sp, #12
 800a354:	4805      	ldr	r0, [pc, #20]	; (800a36c <fiprintf+0x20>)
 800a356:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	f000 f93b 	bl	800a5d8 <_vfiprintf_r>
 800a362:	b002      	add	sp, #8
 800a364:	f85d eb04 	ldr.w	lr, [sp], #4
 800a368:	b003      	add	sp, #12
 800a36a:	4770      	bx	lr
 800a36c:	20000028 	.word	0x20000028

0800a370 <_fwalk_reent>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	4606      	mov	r6, r0
 800a376:	4688      	mov	r8, r1
 800a378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a37c:	2700      	movs	r7, #0
 800a37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a382:	f1b9 0901 	subs.w	r9, r9, #1
 800a386:	d505      	bpl.n	800a394 <_fwalk_reent+0x24>
 800a388:	6824      	ldr	r4, [r4, #0]
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	d1f7      	bne.n	800a37e <_fwalk_reent+0xe>
 800a38e:	4638      	mov	r0, r7
 800a390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a394:	89ab      	ldrh	r3, [r5, #12]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d907      	bls.n	800a3aa <_fwalk_reent+0x3a>
 800a39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <_fwalk_reent+0x3a>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	47c0      	blx	r8
 800a3a8:	4307      	orrs	r7, r0
 800a3aa:	3568      	adds	r5, #104	; 0x68
 800a3ac:	e7e9      	b.n	800a382 <_fwalk_reent+0x12>

0800a3ae <__retarget_lock_init_recursive>:
 800a3ae:	4770      	bx	lr

0800a3b0 <__retarget_lock_acquire_recursive>:
 800a3b0:	4770      	bx	lr

0800a3b2 <__retarget_lock_release_recursive>:
 800a3b2:	4770      	bx	lr

0800a3b4 <malloc>:
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <malloc+0xc>)
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f000 b86f 	b.w	800a49c <_malloc_r>
 800a3be:	bf00      	nop
 800a3c0:	20000028 	.word	0x20000028

0800a3c4 <_free_r>:
 800a3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d044      	beq.n	800a454 <_free_r+0x90>
 800a3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ce:	9001      	str	r0, [sp, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3d6:	bfb8      	it	lt
 800a3d8:	18e4      	addlt	r4, r4, r3
 800a3da:	f000 fe39 	bl	800b050 <__malloc_lock>
 800a3de:	4a1e      	ldr	r2, [pc, #120]	; (800a458 <_free_r+0x94>)
 800a3e0:	9801      	ldr	r0, [sp, #4]
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	b933      	cbnz	r3, 800a3f4 <_free_r+0x30>
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	6014      	str	r4, [r2, #0]
 800a3ea:	b003      	add	sp, #12
 800a3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3f0:	f000 be34 	b.w	800b05c <__malloc_unlock>
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d908      	bls.n	800a40a <_free_r+0x46>
 800a3f8:	6825      	ldr	r5, [r4, #0]
 800a3fa:	1961      	adds	r1, r4, r5
 800a3fc:	428b      	cmp	r3, r1
 800a3fe:	bf01      	itttt	eq
 800a400:	6819      	ldreq	r1, [r3, #0]
 800a402:	685b      	ldreq	r3, [r3, #4]
 800a404:	1949      	addeq	r1, r1, r5
 800a406:	6021      	streq	r1, [r4, #0]
 800a408:	e7ed      	b.n	800a3e6 <_free_r+0x22>
 800a40a:	461a      	mov	r2, r3
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b10b      	cbz	r3, 800a414 <_free_r+0x50>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d9fa      	bls.n	800a40a <_free_r+0x46>
 800a414:	6811      	ldr	r1, [r2, #0]
 800a416:	1855      	adds	r5, r2, r1
 800a418:	42a5      	cmp	r5, r4
 800a41a:	d10b      	bne.n	800a434 <_free_r+0x70>
 800a41c:	6824      	ldr	r4, [r4, #0]
 800a41e:	4421      	add	r1, r4
 800a420:	1854      	adds	r4, r2, r1
 800a422:	42a3      	cmp	r3, r4
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	d1e0      	bne.n	800a3ea <_free_r+0x26>
 800a428:	681c      	ldr	r4, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	6053      	str	r3, [r2, #4]
 800a42e:	4421      	add	r1, r4
 800a430:	6011      	str	r1, [r2, #0]
 800a432:	e7da      	b.n	800a3ea <_free_r+0x26>
 800a434:	d902      	bls.n	800a43c <_free_r+0x78>
 800a436:	230c      	movs	r3, #12
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	e7d6      	b.n	800a3ea <_free_r+0x26>
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	428b      	cmp	r3, r1
 800a442:	bf04      	itt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	6063      	str	r3, [r4, #4]
 800a44a:	bf04      	itt	eq
 800a44c:	1949      	addeq	r1, r1, r5
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	6054      	str	r4, [r2, #4]
 800a452:	e7ca      	b.n	800a3ea <_free_r+0x26>
 800a454:	b003      	add	sp, #12
 800a456:	bd30      	pop	{r4, r5, pc}
 800a458:	2000aad0 	.word	0x2000aad0

0800a45c <sbrk_aligned>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	4e0e      	ldr	r6, [pc, #56]	; (800a498 <sbrk_aligned+0x3c>)
 800a460:	460c      	mov	r4, r1
 800a462:	6831      	ldr	r1, [r6, #0]
 800a464:	4605      	mov	r5, r0
 800a466:	b911      	cbnz	r1, 800a46e <sbrk_aligned+0x12>
 800a468:	f000 fb7a 	bl	800ab60 <_sbrk_r>
 800a46c:	6030      	str	r0, [r6, #0]
 800a46e:	4621      	mov	r1, r4
 800a470:	4628      	mov	r0, r5
 800a472:	f000 fb75 	bl	800ab60 <_sbrk_r>
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	d00a      	beq.n	800a490 <sbrk_aligned+0x34>
 800a47a:	1cc4      	adds	r4, r0, #3
 800a47c:	f024 0403 	bic.w	r4, r4, #3
 800a480:	42a0      	cmp	r0, r4
 800a482:	d007      	beq.n	800a494 <sbrk_aligned+0x38>
 800a484:	1a21      	subs	r1, r4, r0
 800a486:	4628      	mov	r0, r5
 800a488:	f000 fb6a 	bl	800ab60 <_sbrk_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d101      	bne.n	800a494 <sbrk_aligned+0x38>
 800a490:	f04f 34ff 	mov.w	r4, #4294967295
 800a494:	4620      	mov	r0, r4
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	2000aad4 	.word	0x2000aad4

0800a49c <_malloc_r>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	1ccd      	adds	r5, r1, #3
 800a4a2:	f025 0503 	bic.w	r5, r5, #3
 800a4a6:	3508      	adds	r5, #8
 800a4a8:	2d0c      	cmp	r5, #12
 800a4aa:	bf38      	it	cc
 800a4ac:	250c      	movcc	r5, #12
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	db01      	blt.n	800a4b8 <_malloc_r+0x1c>
 800a4b4:	42a9      	cmp	r1, r5
 800a4b6:	d905      	bls.n	800a4c4 <_malloc_r+0x28>
 800a4b8:	230c      	movs	r3, #12
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	2600      	movs	r6, #0
 800a4be:	4630      	mov	r0, r6
 800a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c4:	4e2e      	ldr	r6, [pc, #184]	; (800a580 <_malloc_r+0xe4>)
 800a4c6:	f000 fdc3 	bl	800b050 <__malloc_lock>
 800a4ca:	6833      	ldr	r3, [r6, #0]
 800a4cc:	461c      	mov	r4, r3
 800a4ce:	bb34      	cbnz	r4, 800a51e <_malloc_r+0x82>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f7ff ffc2 	bl	800a45c <sbrk_aligned>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	4604      	mov	r4, r0
 800a4dc:	d14d      	bne.n	800a57a <_malloc_r+0xde>
 800a4de:	6834      	ldr	r4, [r6, #0]
 800a4e0:	4626      	mov	r6, r4
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	d140      	bne.n	800a568 <_malloc_r+0xcc>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	eb04 0803 	add.w	r8, r4, r3
 800a4f0:	f000 fb36 	bl	800ab60 <_sbrk_r>
 800a4f4:	4580      	cmp	r8, r0
 800a4f6:	d13a      	bne.n	800a56e <_malloc_r+0xd2>
 800a4f8:	6821      	ldr	r1, [r4, #0]
 800a4fa:	3503      	adds	r5, #3
 800a4fc:	1a6d      	subs	r5, r5, r1
 800a4fe:	f025 0503 	bic.w	r5, r5, #3
 800a502:	3508      	adds	r5, #8
 800a504:	2d0c      	cmp	r5, #12
 800a506:	bf38      	it	cc
 800a508:	250c      	movcc	r5, #12
 800a50a:	4629      	mov	r1, r5
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ffa5 	bl	800a45c <sbrk_aligned>
 800a512:	3001      	adds	r0, #1
 800a514:	d02b      	beq.n	800a56e <_malloc_r+0xd2>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	442b      	add	r3, r5
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	e00e      	b.n	800a53c <_malloc_r+0xa0>
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	1b52      	subs	r2, r2, r5
 800a522:	d41e      	bmi.n	800a562 <_malloc_r+0xc6>
 800a524:	2a0b      	cmp	r2, #11
 800a526:	d916      	bls.n	800a556 <_malloc_r+0xba>
 800a528:	1961      	adds	r1, r4, r5
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	6025      	str	r5, [r4, #0]
 800a52e:	bf18      	it	ne
 800a530:	6059      	strne	r1, [r3, #4]
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	bf08      	it	eq
 800a536:	6031      	streq	r1, [r6, #0]
 800a538:	5162      	str	r2, [r4, r5]
 800a53a:	604b      	str	r3, [r1, #4]
 800a53c:	4638      	mov	r0, r7
 800a53e:	f104 060b 	add.w	r6, r4, #11
 800a542:	f000 fd8b 	bl	800b05c <__malloc_unlock>
 800a546:	f026 0607 	bic.w	r6, r6, #7
 800a54a:	1d23      	adds	r3, r4, #4
 800a54c:	1af2      	subs	r2, r6, r3
 800a54e:	d0b6      	beq.n	800a4be <_malloc_r+0x22>
 800a550:	1b9b      	subs	r3, r3, r6
 800a552:	50a3      	str	r3, [r4, r2]
 800a554:	e7b3      	b.n	800a4be <_malloc_r+0x22>
 800a556:	6862      	ldr	r2, [r4, #4]
 800a558:	42a3      	cmp	r3, r4
 800a55a:	bf0c      	ite	eq
 800a55c:	6032      	streq	r2, [r6, #0]
 800a55e:	605a      	strne	r2, [r3, #4]
 800a560:	e7ec      	b.n	800a53c <_malloc_r+0xa0>
 800a562:	4623      	mov	r3, r4
 800a564:	6864      	ldr	r4, [r4, #4]
 800a566:	e7b2      	b.n	800a4ce <_malloc_r+0x32>
 800a568:	4634      	mov	r4, r6
 800a56a:	6876      	ldr	r6, [r6, #4]
 800a56c:	e7b9      	b.n	800a4e2 <_malloc_r+0x46>
 800a56e:	230c      	movs	r3, #12
 800a570:	603b      	str	r3, [r7, #0]
 800a572:	4638      	mov	r0, r7
 800a574:	f000 fd72 	bl	800b05c <__malloc_unlock>
 800a578:	e7a1      	b.n	800a4be <_malloc_r+0x22>
 800a57a:	6025      	str	r5, [r4, #0]
 800a57c:	e7de      	b.n	800a53c <_malloc_r+0xa0>
 800a57e:	bf00      	nop
 800a580:	2000aad0 	.word	0x2000aad0

0800a584 <__sfputc_r>:
 800a584:	6893      	ldr	r3, [r2, #8]
 800a586:	3b01      	subs	r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	b410      	push	{r4}
 800a58c:	6093      	str	r3, [r2, #8]
 800a58e:	da08      	bge.n	800a5a2 <__sfputc_r+0x1e>
 800a590:	6994      	ldr	r4, [r2, #24]
 800a592:	42a3      	cmp	r3, r4
 800a594:	db01      	blt.n	800a59a <__sfputc_r+0x16>
 800a596:	290a      	cmp	r1, #10
 800a598:	d103      	bne.n	800a5a2 <__sfputc_r+0x1e>
 800a59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a59e:	f000 bb33 	b.w	800ac08 <__swbuf_r>
 800a5a2:	6813      	ldr	r3, [r2, #0]
 800a5a4:	1c58      	adds	r0, r3, #1
 800a5a6:	6010      	str	r0, [r2, #0]
 800a5a8:	7019      	strb	r1, [r3, #0]
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <__sfputs_r>:
 800a5b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	18d5      	adds	r5, r2, r3
 800a5bc:	42ac      	cmp	r4, r5
 800a5be:	d101      	bne.n	800a5c4 <__sfputs_r+0x12>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e007      	b.n	800a5d4 <__sfputs_r+0x22>
 800a5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c8:	463a      	mov	r2, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff ffda 	bl	800a584 <__sfputc_r>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d1f3      	bne.n	800a5bc <__sfputs_r+0xa>
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5d8 <_vfiprintf_r>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	460d      	mov	r5, r1
 800a5de:	b09d      	sub	sp, #116	; 0x74
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	4698      	mov	r8, r3
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	b118      	cbz	r0, 800a5f0 <_vfiprintf_r+0x18>
 800a5e8:	6983      	ldr	r3, [r0, #24]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <_vfiprintf_r+0x18>
 800a5ec:	f7ff fe30 	bl	800a250 <__sinit>
 800a5f0:	4b89      	ldr	r3, [pc, #548]	; (800a818 <_vfiprintf_r+0x240>)
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	d11b      	bne.n	800a62e <_vfiprintf_r+0x56>
 800a5f6:	6875      	ldr	r5, [r6, #4]
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x32>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x32>
 800a604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a606:	f7ff fed3 	bl	800a3b0 <__retarget_lock_acquire_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	071b      	lsls	r3, r3, #28
 800a60e:	d501      	bpl.n	800a614 <_vfiprintf_r+0x3c>
 800a610:	692b      	ldr	r3, [r5, #16]
 800a612:	b9eb      	cbnz	r3, 800a650 <_vfiprintf_r+0x78>
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f000 fb5a 	bl	800acd0 <__swsetup_r>
 800a61c:	b1c0      	cbz	r0, 800a650 <_vfiprintf_r+0x78>
 800a61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a620:	07dc      	lsls	r4, r3, #31
 800a622:	d50e      	bpl.n	800a642 <_vfiprintf_r+0x6a>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b01d      	add	sp, #116	; 0x74
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	4b7b      	ldr	r3, [pc, #492]	; (800a81c <_vfiprintf_r+0x244>)
 800a630:	429d      	cmp	r5, r3
 800a632:	d101      	bne.n	800a638 <_vfiprintf_r+0x60>
 800a634:	68b5      	ldr	r5, [r6, #8]
 800a636:	e7df      	b.n	800a5f8 <_vfiprintf_r+0x20>
 800a638:	4b79      	ldr	r3, [pc, #484]	; (800a820 <_vfiprintf_r+0x248>)
 800a63a:	429d      	cmp	r5, r3
 800a63c:	bf08      	it	eq
 800a63e:	68f5      	ldreq	r5, [r6, #12]
 800a640:	e7da      	b.n	800a5f8 <_vfiprintf_r+0x20>
 800a642:	89ab      	ldrh	r3, [r5, #12]
 800a644:	0598      	lsls	r0, r3, #22
 800a646:	d4ed      	bmi.n	800a624 <_vfiprintf_r+0x4c>
 800a648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a64a:	f7ff feb2 	bl	800a3b2 <__retarget_lock_release_recursive>
 800a64e:	e7e9      	b.n	800a624 <_vfiprintf_r+0x4c>
 800a650:	2300      	movs	r3, #0
 800a652:	9309      	str	r3, [sp, #36]	; 0x24
 800a654:	2320      	movs	r3, #32
 800a656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a65e:	2330      	movs	r3, #48	; 0x30
 800a660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a824 <_vfiprintf_r+0x24c>
 800a664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a668:	f04f 0901 	mov.w	r9, #1
 800a66c:	4623      	mov	r3, r4
 800a66e:	469a      	mov	sl, r3
 800a670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a674:	b10a      	cbz	r2, 800a67a <_vfiprintf_r+0xa2>
 800a676:	2a25      	cmp	r2, #37	; 0x25
 800a678:	d1f9      	bne.n	800a66e <_vfiprintf_r+0x96>
 800a67a:	ebba 0b04 	subs.w	fp, sl, r4
 800a67e:	d00b      	beq.n	800a698 <_vfiprintf_r+0xc0>
 800a680:	465b      	mov	r3, fp
 800a682:	4622      	mov	r2, r4
 800a684:	4629      	mov	r1, r5
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ff93 	bl	800a5b2 <__sfputs_r>
 800a68c:	3001      	adds	r0, #1
 800a68e:	f000 80aa 	beq.w	800a7e6 <_vfiprintf_r+0x20e>
 800a692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a694:	445a      	add	r2, fp
 800a696:	9209      	str	r2, [sp, #36]	; 0x24
 800a698:	f89a 3000 	ldrb.w	r3, [sl]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 80a2 	beq.w	800a7e6 <_vfiprintf_r+0x20e>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ac:	f10a 0a01 	add.w	sl, sl, #1
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	9307      	str	r3, [sp, #28]
 800a6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ba:	4654      	mov	r4, sl
 800a6bc:	2205      	movs	r2, #5
 800a6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c2:	4858      	ldr	r0, [pc, #352]	; (800a824 <_vfiprintf_r+0x24c>)
 800a6c4:	f7f5 fd9c 	bl	8000200 <memchr>
 800a6c8:	9a04      	ldr	r2, [sp, #16]
 800a6ca:	b9d8      	cbnz	r0, 800a704 <_vfiprintf_r+0x12c>
 800a6cc:	06d1      	lsls	r1, r2, #27
 800a6ce:	bf44      	itt	mi
 800a6d0:	2320      	movmi	r3, #32
 800a6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d6:	0713      	lsls	r3, r2, #28
 800a6d8:	bf44      	itt	mi
 800a6da:	232b      	movmi	r3, #43	; 0x2b
 800a6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e6:	d015      	beq.n	800a714 <_vfiprintf_r+0x13c>
 800a6e8:	9a07      	ldr	r2, [sp, #28]
 800a6ea:	4654      	mov	r4, sl
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f04f 0c0a 	mov.w	ip, #10
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f8:	3b30      	subs	r3, #48	; 0x30
 800a6fa:	2b09      	cmp	r3, #9
 800a6fc:	d94e      	bls.n	800a79c <_vfiprintf_r+0x1c4>
 800a6fe:	b1b0      	cbz	r0, 800a72e <_vfiprintf_r+0x156>
 800a700:	9207      	str	r2, [sp, #28]
 800a702:	e014      	b.n	800a72e <_vfiprintf_r+0x156>
 800a704:	eba0 0308 	sub.w	r3, r0, r8
 800a708:	fa09 f303 	lsl.w	r3, r9, r3
 800a70c:	4313      	orrs	r3, r2
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	46a2      	mov	sl, r4
 800a712:	e7d2      	b.n	800a6ba <_vfiprintf_r+0xe2>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	1d19      	adds	r1, r3, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	9103      	str	r1, [sp, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbb      	ittet	lt
 800a720:	425b      	neglt	r3, r3
 800a722:	f042 0202 	orrlt.w	r2, r2, #2
 800a726:	9307      	strge	r3, [sp, #28]
 800a728:	9307      	strlt	r3, [sp, #28]
 800a72a:	bfb8      	it	lt
 800a72c:	9204      	strlt	r2, [sp, #16]
 800a72e:	7823      	ldrb	r3, [r4, #0]
 800a730:	2b2e      	cmp	r3, #46	; 0x2e
 800a732:	d10c      	bne.n	800a74e <_vfiprintf_r+0x176>
 800a734:	7863      	ldrb	r3, [r4, #1]
 800a736:	2b2a      	cmp	r3, #42	; 0x2a
 800a738:	d135      	bne.n	800a7a6 <_vfiprintf_r+0x1ce>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	1d1a      	adds	r2, r3, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	9203      	str	r2, [sp, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	bfb8      	it	lt
 800a746:	f04f 33ff 	movlt.w	r3, #4294967295
 800a74a:	3402      	adds	r4, #2
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a834 <_vfiprintf_r+0x25c>
 800a752:	7821      	ldrb	r1, [r4, #0]
 800a754:	2203      	movs	r2, #3
 800a756:	4650      	mov	r0, sl
 800a758:	f7f5 fd52 	bl	8000200 <memchr>
 800a75c:	b140      	cbz	r0, 800a770 <_vfiprintf_r+0x198>
 800a75e:	2340      	movs	r3, #64	; 0x40
 800a760:	eba0 000a 	sub.w	r0, r0, sl
 800a764:	fa03 f000 	lsl.w	r0, r3, r0
 800a768:	9b04      	ldr	r3, [sp, #16]
 800a76a:	4303      	orrs	r3, r0
 800a76c:	3401      	adds	r4, #1
 800a76e:	9304      	str	r3, [sp, #16]
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	482c      	ldr	r0, [pc, #176]	; (800a828 <_vfiprintf_r+0x250>)
 800a776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a77a:	2206      	movs	r2, #6
 800a77c:	f7f5 fd40 	bl	8000200 <memchr>
 800a780:	2800      	cmp	r0, #0
 800a782:	d03f      	beq.n	800a804 <_vfiprintf_r+0x22c>
 800a784:	4b29      	ldr	r3, [pc, #164]	; (800a82c <_vfiprintf_r+0x254>)
 800a786:	bb1b      	cbnz	r3, 800a7d0 <_vfiprintf_r+0x1f8>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	3307      	adds	r3, #7
 800a78c:	f023 0307 	bic.w	r3, r3, #7
 800a790:	3308      	adds	r3, #8
 800a792:	9303      	str	r3, [sp, #12]
 800a794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a796:	443b      	add	r3, r7
 800a798:	9309      	str	r3, [sp, #36]	; 0x24
 800a79a:	e767      	b.n	800a66c <_vfiprintf_r+0x94>
 800a79c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	e7a5      	b.n	800a6f2 <_vfiprintf_r+0x11a>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	3401      	adds	r4, #1
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b8:	3a30      	subs	r2, #48	; 0x30
 800a7ba:	2a09      	cmp	r2, #9
 800a7bc:	d903      	bls.n	800a7c6 <_vfiprintf_r+0x1ee>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0c5      	beq.n	800a74e <_vfiprintf_r+0x176>
 800a7c2:	9105      	str	r1, [sp, #20]
 800a7c4:	e7c3      	b.n	800a74e <_vfiprintf_r+0x176>
 800a7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e7f0      	b.n	800a7b2 <_vfiprintf_r+0x1da>
 800a7d0:	ab03      	add	r3, sp, #12
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	4b16      	ldr	r3, [pc, #88]	; (800a830 <_vfiprintf_r+0x258>)
 800a7d8:	a904      	add	r1, sp, #16
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f3af 8000 	nop.w
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	1c78      	adds	r0, r7, #1
 800a7e4:	d1d6      	bne.n	800a794 <_vfiprintf_r+0x1bc>
 800a7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e8:	07d9      	lsls	r1, r3, #31
 800a7ea:	d405      	bmi.n	800a7f8 <_vfiprintf_r+0x220>
 800a7ec:	89ab      	ldrh	r3, [r5, #12]
 800a7ee:	059a      	lsls	r2, r3, #22
 800a7f0:	d402      	bmi.n	800a7f8 <_vfiprintf_r+0x220>
 800a7f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f4:	f7ff fddd 	bl	800a3b2 <__retarget_lock_release_recursive>
 800a7f8:	89ab      	ldrh	r3, [r5, #12]
 800a7fa:	065b      	lsls	r3, r3, #25
 800a7fc:	f53f af12 	bmi.w	800a624 <_vfiprintf_r+0x4c>
 800a800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a802:	e711      	b.n	800a628 <_vfiprintf_r+0x50>
 800a804:	ab03      	add	r3, sp, #12
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	462a      	mov	r2, r5
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <_vfiprintf_r+0x258>)
 800a80c:	a904      	add	r1, sp, #16
 800a80e:	4630      	mov	r0, r6
 800a810:	f000 f880 	bl	800a914 <_printf_i>
 800a814:	e7e4      	b.n	800a7e0 <_vfiprintf_r+0x208>
 800a816:	bf00      	nop
 800a818:	0800d2d0 	.word	0x0800d2d0
 800a81c:	0800d2f0 	.word	0x0800d2f0
 800a820:	0800d2b0 	.word	0x0800d2b0
 800a824:	0800d310 	.word	0x0800d310
 800a828:	0800d31a 	.word	0x0800d31a
 800a82c:	00000000 	.word	0x00000000
 800a830:	0800a5b3 	.word	0x0800a5b3
 800a834:	0800d316 	.word	0x0800d316

0800a838 <_printf_common>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	4616      	mov	r6, r2
 800a83e:	4699      	mov	r9, r3
 800a840:	688a      	ldr	r2, [r1, #8]
 800a842:	690b      	ldr	r3, [r1, #16]
 800a844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a848:	4293      	cmp	r3, r2
 800a84a:	bfb8      	it	lt
 800a84c:	4613      	movlt	r3, r2
 800a84e:	6033      	str	r3, [r6, #0]
 800a850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a854:	4607      	mov	r7, r0
 800a856:	460c      	mov	r4, r1
 800a858:	b10a      	cbz	r2, 800a85e <_printf_common+0x26>
 800a85a:	3301      	adds	r3, #1
 800a85c:	6033      	str	r3, [r6, #0]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	0699      	lsls	r1, r3, #26
 800a862:	bf42      	ittt	mi
 800a864:	6833      	ldrmi	r3, [r6, #0]
 800a866:	3302      	addmi	r3, #2
 800a868:	6033      	strmi	r3, [r6, #0]
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	f015 0506 	ands.w	r5, r5, #6
 800a870:	d106      	bne.n	800a880 <_printf_common+0x48>
 800a872:	f104 0a19 	add.w	sl, r4, #25
 800a876:	68e3      	ldr	r3, [r4, #12]
 800a878:	6832      	ldr	r2, [r6, #0]
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	42ab      	cmp	r3, r5
 800a87e:	dc26      	bgt.n	800a8ce <_printf_common+0x96>
 800a880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a884:	1e13      	subs	r3, r2, #0
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	bf18      	it	ne
 800a88a:	2301      	movne	r3, #1
 800a88c:	0692      	lsls	r2, r2, #26
 800a88e:	d42b      	bmi.n	800a8e8 <_printf_common+0xb0>
 800a890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a894:	4649      	mov	r1, r9
 800a896:	4638      	mov	r0, r7
 800a898:	47c0      	blx	r8
 800a89a:	3001      	adds	r0, #1
 800a89c:	d01e      	beq.n	800a8dc <_printf_common+0xa4>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	68e5      	ldr	r5, [r4, #12]
 800a8a2:	6832      	ldr	r2, [r6, #0]
 800a8a4:	f003 0306 	and.w	r3, r3, #6
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	bf08      	it	eq
 800a8ac:	1aad      	subeq	r5, r5, r2
 800a8ae:	68a3      	ldr	r3, [r4, #8]
 800a8b0:	6922      	ldr	r2, [r4, #16]
 800a8b2:	bf0c      	ite	eq
 800a8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8b8:	2500      	movne	r5, #0
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	bfc4      	itt	gt
 800a8be:	1a9b      	subgt	r3, r3, r2
 800a8c0:	18ed      	addgt	r5, r5, r3
 800a8c2:	2600      	movs	r6, #0
 800a8c4:	341a      	adds	r4, #26
 800a8c6:	42b5      	cmp	r5, r6
 800a8c8:	d11a      	bne.n	800a900 <_printf_common+0xc8>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e008      	b.n	800a8e0 <_printf_common+0xa8>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4652      	mov	r2, sl
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	47c0      	blx	r8
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d103      	bne.n	800a8e4 <_printf_common+0xac>
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e4:	3501      	adds	r5, #1
 800a8e6:	e7c6      	b.n	800a876 <_printf_common+0x3e>
 800a8e8:	18e1      	adds	r1, r4, r3
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	2030      	movs	r0, #48	; 0x30
 800a8ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8f2:	4422      	add	r2, r4
 800a8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8fc:	3302      	adds	r3, #2
 800a8fe:	e7c7      	b.n	800a890 <_printf_common+0x58>
 800a900:	2301      	movs	r3, #1
 800a902:	4622      	mov	r2, r4
 800a904:	4649      	mov	r1, r9
 800a906:	4638      	mov	r0, r7
 800a908:	47c0      	blx	r8
 800a90a:	3001      	adds	r0, #1
 800a90c:	d0e6      	beq.n	800a8dc <_printf_common+0xa4>
 800a90e:	3601      	adds	r6, #1
 800a910:	e7d9      	b.n	800a8c6 <_printf_common+0x8e>
	...

0800a914 <_printf_i>:
 800a914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	7e0f      	ldrb	r7, [r1, #24]
 800a91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a91c:	2f78      	cmp	r7, #120	; 0x78
 800a91e:	4691      	mov	r9, r2
 800a920:	4680      	mov	r8, r0
 800a922:	460c      	mov	r4, r1
 800a924:	469a      	mov	sl, r3
 800a926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a92a:	d807      	bhi.n	800a93c <_printf_i+0x28>
 800a92c:	2f62      	cmp	r7, #98	; 0x62
 800a92e:	d80a      	bhi.n	800a946 <_printf_i+0x32>
 800a930:	2f00      	cmp	r7, #0
 800a932:	f000 80d8 	beq.w	800aae6 <_printf_i+0x1d2>
 800a936:	2f58      	cmp	r7, #88	; 0x58
 800a938:	f000 80a3 	beq.w	800aa82 <_printf_i+0x16e>
 800a93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a944:	e03a      	b.n	800a9bc <_printf_i+0xa8>
 800a946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a94a:	2b15      	cmp	r3, #21
 800a94c:	d8f6      	bhi.n	800a93c <_printf_i+0x28>
 800a94e:	a101      	add	r1, pc, #4	; (adr r1, 800a954 <_printf_i+0x40>)
 800a950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a954:	0800a9ad 	.word	0x0800a9ad
 800a958:	0800a9c1 	.word	0x0800a9c1
 800a95c:	0800a93d 	.word	0x0800a93d
 800a960:	0800a93d 	.word	0x0800a93d
 800a964:	0800a93d 	.word	0x0800a93d
 800a968:	0800a93d 	.word	0x0800a93d
 800a96c:	0800a9c1 	.word	0x0800a9c1
 800a970:	0800a93d 	.word	0x0800a93d
 800a974:	0800a93d 	.word	0x0800a93d
 800a978:	0800a93d 	.word	0x0800a93d
 800a97c:	0800a93d 	.word	0x0800a93d
 800a980:	0800aacd 	.word	0x0800aacd
 800a984:	0800a9f1 	.word	0x0800a9f1
 800a988:	0800aaaf 	.word	0x0800aaaf
 800a98c:	0800a93d 	.word	0x0800a93d
 800a990:	0800a93d 	.word	0x0800a93d
 800a994:	0800aaef 	.word	0x0800aaef
 800a998:	0800a93d 	.word	0x0800a93d
 800a99c:	0800a9f1 	.word	0x0800a9f1
 800a9a0:	0800a93d 	.word	0x0800a93d
 800a9a4:	0800a93d 	.word	0x0800a93d
 800a9a8:	0800aab7 	.word	0x0800aab7
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	602a      	str	r2, [r5, #0]
 800a9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e0a3      	b.n	800ab08 <_printf_i+0x1f4>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	6829      	ldr	r1, [r5, #0]
 800a9c4:	0606      	lsls	r6, r0, #24
 800a9c6:	f101 0304 	add.w	r3, r1, #4
 800a9ca:	d50a      	bpl.n	800a9e2 <_printf_i+0xce>
 800a9cc:	680e      	ldr	r6, [r1, #0]
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	da03      	bge.n	800a9dc <_printf_i+0xc8>
 800a9d4:	232d      	movs	r3, #45	; 0x2d
 800a9d6:	4276      	negs	r6, r6
 800a9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9dc:	485e      	ldr	r0, [pc, #376]	; (800ab58 <_printf_i+0x244>)
 800a9de:	230a      	movs	r3, #10
 800a9e0:	e019      	b.n	800aa16 <_printf_i+0x102>
 800a9e2:	680e      	ldr	r6, [r1, #0]
 800a9e4:	602b      	str	r3, [r5, #0]
 800a9e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ea:	bf18      	it	ne
 800a9ec:	b236      	sxthne	r6, r6
 800a9ee:	e7ef      	b.n	800a9d0 <_printf_i+0xbc>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	6820      	ldr	r0, [r4, #0]
 800a9f4:	1d19      	adds	r1, r3, #4
 800a9f6:	6029      	str	r1, [r5, #0]
 800a9f8:	0601      	lsls	r1, r0, #24
 800a9fa:	d501      	bpl.n	800aa00 <_printf_i+0xec>
 800a9fc:	681e      	ldr	r6, [r3, #0]
 800a9fe:	e002      	b.n	800aa06 <_printf_i+0xf2>
 800aa00:	0646      	lsls	r6, r0, #25
 800aa02:	d5fb      	bpl.n	800a9fc <_printf_i+0xe8>
 800aa04:	881e      	ldrh	r6, [r3, #0]
 800aa06:	4854      	ldr	r0, [pc, #336]	; (800ab58 <_printf_i+0x244>)
 800aa08:	2f6f      	cmp	r7, #111	; 0x6f
 800aa0a:	bf0c      	ite	eq
 800aa0c:	2308      	moveq	r3, #8
 800aa0e:	230a      	movne	r3, #10
 800aa10:	2100      	movs	r1, #0
 800aa12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa16:	6865      	ldr	r5, [r4, #4]
 800aa18:	60a5      	str	r5, [r4, #8]
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	bfa2      	ittt	ge
 800aa1e:	6821      	ldrge	r1, [r4, #0]
 800aa20:	f021 0104 	bicge.w	r1, r1, #4
 800aa24:	6021      	strge	r1, [r4, #0]
 800aa26:	b90e      	cbnz	r6, 800aa2c <_printf_i+0x118>
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	d04d      	beq.n	800aac8 <_printf_i+0x1b4>
 800aa2c:	4615      	mov	r5, r2
 800aa2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa32:	fb03 6711 	mls	r7, r3, r1, r6
 800aa36:	5dc7      	ldrb	r7, [r0, r7]
 800aa38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa3c:	4637      	mov	r7, r6
 800aa3e:	42bb      	cmp	r3, r7
 800aa40:	460e      	mov	r6, r1
 800aa42:	d9f4      	bls.n	800aa2e <_printf_i+0x11a>
 800aa44:	2b08      	cmp	r3, #8
 800aa46:	d10b      	bne.n	800aa60 <_printf_i+0x14c>
 800aa48:	6823      	ldr	r3, [r4, #0]
 800aa4a:	07de      	lsls	r6, r3, #31
 800aa4c:	d508      	bpl.n	800aa60 <_printf_i+0x14c>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	6861      	ldr	r1, [r4, #4]
 800aa52:	4299      	cmp	r1, r3
 800aa54:	bfde      	ittt	le
 800aa56:	2330      	movle	r3, #48	; 0x30
 800aa58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa60:	1b52      	subs	r2, r2, r5
 800aa62:	6122      	str	r2, [r4, #16]
 800aa64:	f8cd a000 	str.w	sl, [sp]
 800aa68:	464b      	mov	r3, r9
 800aa6a:	aa03      	add	r2, sp, #12
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff fee2 	bl	800a838 <_printf_common>
 800aa74:	3001      	adds	r0, #1
 800aa76:	d14c      	bne.n	800ab12 <_printf_i+0x1fe>
 800aa78:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7c:	b004      	add	sp, #16
 800aa7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa82:	4835      	ldr	r0, [pc, #212]	; (800ab58 <_printf_i+0x244>)
 800aa84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa88:	6829      	ldr	r1, [r5, #0]
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa90:	6029      	str	r1, [r5, #0]
 800aa92:	061d      	lsls	r5, r3, #24
 800aa94:	d514      	bpl.n	800aac0 <_printf_i+0x1ac>
 800aa96:	07df      	lsls	r7, r3, #31
 800aa98:	bf44      	itt	mi
 800aa9a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa9e:	6023      	strmi	r3, [r4, #0]
 800aaa0:	b91e      	cbnz	r6, 800aaaa <_printf_i+0x196>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	f023 0320 	bic.w	r3, r3, #32
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	2310      	movs	r3, #16
 800aaac:	e7b0      	b.n	800aa10 <_printf_i+0xfc>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	f043 0320 	orr.w	r3, r3, #32
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	2378      	movs	r3, #120	; 0x78
 800aab8:	4828      	ldr	r0, [pc, #160]	; (800ab5c <_printf_i+0x248>)
 800aaba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aabe:	e7e3      	b.n	800aa88 <_printf_i+0x174>
 800aac0:	0659      	lsls	r1, r3, #25
 800aac2:	bf48      	it	mi
 800aac4:	b2b6      	uxthmi	r6, r6
 800aac6:	e7e6      	b.n	800aa96 <_printf_i+0x182>
 800aac8:	4615      	mov	r5, r2
 800aaca:	e7bb      	b.n	800aa44 <_printf_i+0x130>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	6826      	ldr	r6, [r4, #0]
 800aad0:	6961      	ldr	r1, [r4, #20]
 800aad2:	1d18      	adds	r0, r3, #4
 800aad4:	6028      	str	r0, [r5, #0]
 800aad6:	0635      	lsls	r5, r6, #24
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	d501      	bpl.n	800aae0 <_printf_i+0x1cc>
 800aadc:	6019      	str	r1, [r3, #0]
 800aade:	e002      	b.n	800aae6 <_printf_i+0x1d2>
 800aae0:	0670      	lsls	r0, r6, #25
 800aae2:	d5fb      	bpl.n	800aadc <_printf_i+0x1c8>
 800aae4:	8019      	strh	r1, [r3, #0]
 800aae6:	2300      	movs	r3, #0
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	4615      	mov	r5, r2
 800aaec:	e7ba      	b.n	800aa64 <_printf_i+0x150>
 800aaee:	682b      	ldr	r3, [r5, #0]
 800aaf0:	1d1a      	adds	r2, r3, #4
 800aaf2:	602a      	str	r2, [r5, #0]
 800aaf4:	681d      	ldr	r5, [r3, #0]
 800aaf6:	6862      	ldr	r2, [r4, #4]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4628      	mov	r0, r5
 800aafc:	f7f5 fb80 	bl	8000200 <memchr>
 800ab00:	b108      	cbz	r0, 800ab06 <_printf_i+0x1f2>
 800ab02:	1b40      	subs	r0, r0, r5
 800ab04:	6060      	str	r0, [r4, #4]
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab10:	e7a8      	b.n	800aa64 <_printf_i+0x150>
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	462a      	mov	r2, r5
 800ab16:	4649      	mov	r1, r9
 800ab18:	4640      	mov	r0, r8
 800ab1a:	47d0      	blx	sl
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d0ab      	beq.n	800aa78 <_printf_i+0x164>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	079b      	lsls	r3, r3, #30
 800ab24:	d413      	bmi.n	800ab4e <_printf_i+0x23a>
 800ab26:	68e0      	ldr	r0, [r4, #12]
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	4298      	cmp	r0, r3
 800ab2c:	bfb8      	it	lt
 800ab2e:	4618      	movlt	r0, r3
 800ab30:	e7a4      	b.n	800aa7c <_printf_i+0x168>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4632      	mov	r2, r6
 800ab36:	4649      	mov	r1, r9
 800ab38:	4640      	mov	r0, r8
 800ab3a:	47d0      	blx	sl
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d09b      	beq.n	800aa78 <_printf_i+0x164>
 800ab40:	3501      	adds	r5, #1
 800ab42:	68e3      	ldr	r3, [r4, #12]
 800ab44:	9903      	ldr	r1, [sp, #12]
 800ab46:	1a5b      	subs	r3, r3, r1
 800ab48:	42ab      	cmp	r3, r5
 800ab4a:	dcf2      	bgt.n	800ab32 <_printf_i+0x21e>
 800ab4c:	e7eb      	b.n	800ab26 <_printf_i+0x212>
 800ab4e:	2500      	movs	r5, #0
 800ab50:	f104 0619 	add.w	r6, r4, #25
 800ab54:	e7f5      	b.n	800ab42 <_printf_i+0x22e>
 800ab56:	bf00      	nop
 800ab58:	0800d321 	.word	0x0800d321
 800ab5c:	0800d332 	.word	0x0800d332

0800ab60 <_sbrk_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d06      	ldr	r5, [pc, #24]	; (800ab7c <_sbrk_r+0x1c>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f5 ff12 	bl	8000994 <_sbrk>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_sbrk_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_sbrk_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	2000aac8 	.word	0x2000aac8

0800ab80 <__sread>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab88:	f000 fa6e 	bl	800b068 <_read_r>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	bfab      	itete	ge
 800ab90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab92:	89a3      	ldrhlt	r3, [r4, #12]
 800ab94:	181b      	addge	r3, r3, r0
 800ab96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab9a:	bfac      	ite	ge
 800ab9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab9e:	81a3      	strhlt	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__swrite>:
 800aba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	461f      	mov	r7, r3
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	05db      	lsls	r3, r3, #23
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	4616      	mov	r6, r2
 800abb2:	d505      	bpl.n	800abc0 <__swrite+0x1e>
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2302      	movs	r3, #2
 800abba:	2200      	movs	r2, #0
 800abbc:	f000 f9d0 	bl	800af60 <_lseek_r>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	f000 b869 	b.w	800acac <_write_r>

0800abda <__sseek>:
 800abda:	b510      	push	{r4, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f000 f9bd 	bl	800af60 <_lseek_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	bf15      	itete	ne
 800abec:	6560      	strne	r0, [r4, #84]	; 0x54
 800abee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abf6:	81a3      	strheq	r3, [r4, #12]
 800abf8:	bf18      	it	ne
 800abfa:	81a3      	strhne	r3, [r4, #12]
 800abfc:	bd10      	pop	{r4, pc}

0800abfe <__sclose>:
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 b8db 	b.w	800adbc <_close_r>
	...

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6983      	ldr	r3, [r0, #24]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f7ff fb1b 	bl	800a250 <__sinit>
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <__swbuf_r+0x98>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d12b      	bne.n	800ac78 <__swbuf_r+0x70>
 800ac20:	686c      	ldr	r4, [r5, #4]
 800ac22:	69a3      	ldr	r3, [r4, #24]
 800ac24:	60a3      	str	r3, [r4, #8]
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	071a      	lsls	r2, r3, #28
 800ac2a:	d52f      	bpl.n	800ac8c <__swbuf_r+0x84>
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b36b      	cbz	r3, 800ac8c <__swbuf_r+0x84>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	1ac0      	subs	r0, r0, r3
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	b2f6      	uxtb	r6, r6
 800ac3a:	4283      	cmp	r3, r0
 800ac3c:	4637      	mov	r7, r6
 800ac3e:	dc04      	bgt.n	800ac4a <__swbuf_r+0x42>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 f950 	bl	800aee8 <_fflush_r>
 800ac48:	bb30      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	701e      	strb	r6, [r3, #0]
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	4283      	cmp	r3, r0
 800ac5e:	d004      	beq.n	800ac6a <__swbuf_r+0x62>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	07db      	lsls	r3, r3, #31
 800ac64:	d506      	bpl.n	800ac74 <__swbuf_r+0x6c>
 800ac66:	2e0a      	cmp	r6, #10
 800ac68:	d104      	bne.n	800ac74 <__swbuf_r+0x6c>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 f93b 	bl	800aee8 <_fflush_r>
 800ac72:	b988      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac74:	4638      	mov	r0, r7
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <__swbuf_r+0x9c>)
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	d101      	bne.n	800ac82 <__swbuf_r+0x7a>
 800ac7e:	68ac      	ldr	r4, [r5, #8]
 800ac80:	e7cf      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <__swbuf_r+0xa0>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	bf08      	it	eq
 800ac88:	68ec      	ldreq	r4, [r5, #12]
 800ac8a:	e7ca      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f81e 	bl	800acd0 <__swsetup_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d0cb      	beq.n	800ac30 <__swbuf_r+0x28>
 800ac98:	f04f 37ff 	mov.w	r7, #4294967295
 800ac9c:	e7ea      	b.n	800ac74 <__swbuf_r+0x6c>
 800ac9e:	bf00      	nop
 800aca0:	0800d2d0 	.word	0x0800d2d0
 800aca4:	0800d2f0 	.word	0x0800d2f0
 800aca8:	0800d2b0 	.word	0x0800d2b0

0800acac <_write_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d07      	ldr	r5, [pc, #28]	; (800accc <_write_r+0x20>)
 800acb0:	4604      	mov	r4, r0
 800acb2:	4608      	mov	r0, r1
 800acb4:	4611      	mov	r1, r2
 800acb6:	2200      	movs	r2, #0
 800acb8:	602a      	str	r2, [r5, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	f7f5 fe51 	bl	8000962 <_write>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_write_r+0x1e>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_write_r+0x1e>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	2000aac8 	.word	0x2000aac8

0800acd0 <__swsetup_r>:
 800acd0:	4b32      	ldr	r3, [pc, #200]	; (800ad9c <__swsetup_r+0xcc>)
 800acd2:	b570      	push	{r4, r5, r6, lr}
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	4606      	mov	r6, r0
 800acd8:	460c      	mov	r4, r1
 800acda:	b125      	cbz	r5, 800ace6 <__swsetup_r+0x16>
 800acdc:	69ab      	ldr	r3, [r5, #24]
 800acde:	b913      	cbnz	r3, 800ace6 <__swsetup_r+0x16>
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff fab5 	bl	800a250 <__sinit>
 800ace6:	4b2e      	ldr	r3, [pc, #184]	; (800ada0 <__swsetup_r+0xd0>)
 800ace8:	429c      	cmp	r4, r3
 800acea:	d10f      	bne.n	800ad0c <__swsetup_r+0x3c>
 800acec:	686c      	ldr	r4, [r5, #4]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acf4:	0719      	lsls	r1, r3, #28
 800acf6:	d42c      	bmi.n	800ad52 <__swsetup_r+0x82>
 800acf8:	06dd      	lsls	r5, r3, #27
 800acfa:	d411      	bmi.n	800ad20 <__swsetup_r+0x50>
 800acfc:	2309      	movs	r3, #9
 800acfe:	6033      	str	r3, [r6, #0]
 800ad00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0a:	e03e      	b.n	800ad8a <__swsetup_r+0xba>
 800ad0c:	4b25      	ldr	r3, [pc, #148]	; (800ada4 <__swsetup_r+0xd4>)
 800ad0e:	429c      	cmp	r4, r3
 800ad10:	d101      	bne.n	800ad16 <__swsetup_r+0x46>
 800ad12:	68ac      	ldr	r4, [r5, #8]
 800ad14:	e7eb      	b.n	800acee <__swsetup_r+0x1e>
 800ad16:	4b24      	ldr	r3, [pc, #144]	; (800ada8 <__swsetup_r+0xd8>)
 800ad18:	429c      	cmp	r4, r3
 800ad1a:	bf08      	it	eq
 800ad1c:	68ec      	ldreq	r4, [r5, #12]
 800ad1e:	e7e6      	b.n	800acee <__swsetup_r+0x1e>
 800ad20:	0758      	lsls	r0, r3, #29
 800ad22:	d512      	bpl.n	800ad4a <__swsetup_r+0x7a>
 800ad24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad26:	b141      	cbz	r1, 800ad3a <__swsetup_r+0x6a>
 800ad28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <__swsetup_r+0x66>
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7ff fb47 	bl	800a3c4 <_free_r>
 800ad36:	2300      	movs	r3, #0
 800ad38:	6363      	str	r3, [r4, #52]	; 0x34
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	2300      	movs	r3, #0
 800ad44:	6063      	str	r3, [r4, #4]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0308 	orr.w	r3, r3, #8
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	b94b      	cbnz	r3, 800ad6a <__swsetup_r+0x9a>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad60:	d003      	beq.n	800ad6a <__swsetup_r+0x9a>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f933 	bl	800afd0 <__smakebuf_r>
 800ad6a:	89a0      	ldrh	r0, [r4, #12]
 800ad6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad70:	f010 0301 	ands.w	r3, r0, #1
 800ad74:	d00a      	beq.n	800ad8c <__swsetup_r+0xbc>
 800ad76:	2300      	movs	r3, #0
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	6963      	ldr	r3, [r4, #20]
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	61a3      	str	r3, [r4, #24]
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	b943      	cbnz	r3, 800ad96 <__swsetup_r+0xc6>
 800ad84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad88:	d1ba      	bne.n	800ad00 <__swsetup_r+0x30>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	0781      	lsls	r1, r0, #30
 800ad8e:	bf58      	it	pl
 800ad90:	6963      	ldrpl	r3, [r4, #20]
 800ad92:	60a3      	str	r3, [r4, #8]
 800ad94:	e7f4      	b.n	800ad80 <__swsetup_r+0xb0>
 800ad96:	2000      	movs	r0, #0
 800ad98:	e7f7      	b.n	800ad8a <__swsetup_r+0xba>
 800ad9a:	bf00      	nop
 800ad9c:	20000028 	.word	0x20000028
 800ada0:	0800d2d0 	.word	0x0800d2d0
 800ada4:	0800d2f0 	.word	0x0800d2f0
 800ada8:	0800d2b0 	.word	0x0800d2b0

0800adac <abort>:
 800adac:	b508      	push	{r3, lr}
 800adae:	2006      	movs	r0, #6
 800adb0:	f000 f994 	bl	800b0dc <raise>
 800adb4:	2001      	movs	r0, #1
 800adb6:	f7f5 fdc1 	bl	800093c <_exit>
	...

0800adbc <_close_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4d06      	ldr	r5, [pc, #24]	; (800add8 <_close_r+0x1c>)
 800adc0:	2300      	movs	r3, #0
 800adc2:	4604      	mov	r4, r0
 800adc4:	4608      	mov	r0, r1
 800adc6:	602b      	str	r3, [r5, #0]
 800adc8:	f7f5 fdd8 	bl	800097c <_close>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_close_r+0x1a>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b103      	cbz	r3, 800add6 <_close_r+0x1a>
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	2000aac8 	.word	0x2000aac8

0800addc <__sflush_r>:
 800addc:	898a      	ldrh	r2, [r1, #12]
 800adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	0710      	lsls	r0, r2, #28
 800ade6:	460c      	mov	r4, r1
 800ade8:	d458      	bmi.n	800ae9c <__sflush_r+0xc0>
 800adea:	684b      	ldr	r3, [r1, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	dc05      	bgt.n	800adfc <__sflush_r+0x20>
 800adf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dc02      	bgt.n	800adfc <__sflush_r+0x20>
 800adf6:	2000      	movs	r0, #0
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	d0f9      	beq.n	800adf6 <__sflush_r+0x1a>
 800ae02:	2300      	movs	r3, #0
 800ae04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae08:	682f      	ldr	r7, [r5, #0]
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	d032      	beq.n	800ae74 <__sflush_r+0x98>
 800ae0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	075a      	lsls	r2, r3, #29
 800ae14:	d505      	bpl.n	800ae22 <__sflush_r+0x46>
 800ae16:	6863      	ldr	r3, [r4, #4]
 800ae18:	1ac0      	subs	r0, r0, r3
 800ae1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae1c:	b10b      	cbz	r3, 800ae22 <__sflush_r+0x46>
 800ae1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae20:	1ac0      	subs	r0, r0, r3
 800ae22:	2300      	movs	r3, #0
 800ae24:	4602      	mov	r2, r0
 800ae26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae28:	6a21      	ldr	r1, [r4, #32]
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b0      	blx	r6
 800ae2e:	1c43      	adds	r3, r0, #1
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	d106      	bne.n	800ae42 <__sflush_r+0x66>
 800ae34:	6829      	ldr	r1, [r5, #0]
 800ae36:	291d      	cmp	r1, #29
 800ae38:	d82c      	bhi.n	800ae94 <__sflush_r+0xb8>
 800ae3a:	4a2a      	ldr	r2, [pc, #168]	; (800aee4 <__sflush_r+0x108>)
 800ae3c:	40ca      	lsrs	r2, r1
 800ae3e:	07d6      	lsls	r6, r2, #31
 800ae40:	d528      	bpl.n	800ae94 <__sflush_r+0xb8>
 800ae42:	2200      	movs	r2, #0
 800ae44:	6062      	str	r2, [r4, #4]
 800ae46:	04d9      	lsls	r1, r3, #19
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	6022      	str	r2, [r4, #0]
 800ae4c:	d504      	bpl.n	800ae58 <__sflush_r+0x7c>
 800ae4e:	1c42      	adds	r2, r0, #1
 800ae50:	d101      	bne.n	800ae56 <__sflush_r+0x7a>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	b903      	cbnz	r3, 800ae58 <__sflush_r+0x7c>
 800ae56:	6560      	str	r0, [r4, #84]	; 0x54
 800ae58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae5a:	602f      	str	r7, [r5, #0]
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d0ca      	beq.n	800adf6 <__sflush_r+0x1a>
 800ae60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae64:	4299      	cmp	r1, r3
 800ae66:	d002      	beq.n	800ae6e <__sflush_r+0x92>
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7ff faab 	bl	800a3c4 <_free_r>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	6360      	str	r0, [r4, #52]	; 0x34
 800ae72:	e7c1      	b.n	800adf8 <__sflush_r+0x1c>
 800ae74:	6a21      	ldr	r1, [r4, #32]
 800ae76:	2301      	movs	r3, #1
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b0      	blx	r6
 800ae7c:	1c41      	adds	r1, r0, #1
 800ae7e:	d1c7      	bne.n	800ae10 <__sflush_r+0x34>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0c4      	beq.n	800ae10 <__sflush_r+0x34>
 800ae86:	2b1d      	cmp	r3, #29
 800ae88:	d001      	beq.n	800ae8e <__sflush_r+0xb2>
 800ae8a:	2b16      	cmp	r3, #22
 800ae8c:	d101      	bne.n	800ae92 <__sflush_r+0xb6>
 800ae8e:	602f      	str	r7, [r5, #0]
 800ae90:	e7b1      	b.n	800adf6 <__sflush_r+0x1a>
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	e7ad      	b.n	800adf8 <__sflush_r+0x1c>
 800ae9c:	690f      	ldr	r7, [r1, #16]
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	d0a9      	beq.n	800adf6 <__sflush_r+0x1a>
 800aea2:	0793      	lsls	r3, r2, #30
 800aea4:	680e      	ldr	r6, [r1, #0]
 800aea6:	bf08      	it	eq
 800aea8:	694b      	ldreq	r3, [r1, #20]
 800aeaa:	600f      	str	r7, [r1, #0]
 800aeac:	bf18      	it	ne
 800aeae:	2300      	movne	r3, #0
 800aeb0:	eba6 0807 	sub.w	r8, r6, r7
 800aeb4:	608b      	str	r3, [r1, #8]
 800aeb6:	f1b8 0f00 	cmp.w	r8, #0
 800aeba:	dd9c      	ble.n	800adf6 <__sflush_r+0x1a>
 800aebc:	6a21      	ldr	r1, [r4, #32]
 800aebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aec0:	4643      	mov	r3, r8
 800aec2:	463a      	mov	r2, r7
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b0      	blx	r6
 800aec8:	2800      	cmp	r0, #0
 800aeca:	dc06      	bgt.n	800aeda <__sflush_r+0xfe>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	e78e      	b.n	800adf8 <__sflush_r+0x1c>
 800aeda:	4407      	add	r7, r0
 800aedc:	eba8 0800 	sub.w	r8, r8, r0
 800aee0:	e7e9      	b.n	800aeb6 <__sflush_r+0xda>
 800aee2:	bf00      	nop
 800aee4:	20400001 	.word	0x20400001

0800aee8 <_fflush_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	690b      	ldr	r3, [r1, #16]
 800aeec:	4605      	mov	r5, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	b913      	cbnz	r3, 800aef8 <_fflush_r+0x10>
 800aef2:	2500      	movs	r5, #0
 800aef4:	4628      	mov	r0, r5
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	b118      	cbz	r0, 800af02 <_fflush_r+0x1a>
 800aefa:	6983      	ldr	r3, [r0, #24]
 800aefc:	b90b      	cbnz	r3, 800af02 <_fflush_r+0x1a>
 800aefe:	f7ff f9a7 	bl	800a250 <__sinit>
 800af02:	4b14      	ldr	r3, [pc, #80]	; (800af54 <_fflush_r+0x6c>)
 800af04:	429c      	cmp	r4, r3
 800af06:	d11b      	bne.n	800af40 <_fflush_r+0x58>
 800af08:	686c      	ldr	r4, [r5, #4]
 800af0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0ef      	beq.n	800aef2 <_fflush_r+0xa>
 800af12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af14:	07d0      	lsls	r0, r2, #31
 800af16:	d404      	bmi.n	800af22 <_fflush_r+0x3a>
 800af18:	0599      	lsls	r1, r3, #22
 800af1a:	d402      	bmi.n	800af22 <_fflush_r+0x3a>
 800af1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af1e:	f7ff fa47 	bl	800a3b0 <__retarget_lock_acquire_recursive>
 800af22:	4628      	mov	r0, r5
 800af24:	4621      	mov	r1, r4
 800af26:	f7ff ff59 	bl	800addc <__sflush_r>
 800af2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af2c:	07da      	lsls	r2, r3, #31
 800af2e:	4605      	mov	r5, r0
 800af30:	d4e0      	bmi.n	800aef4 <_fflush_r+0xc>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	059b      	lsls	r3, r3, #22
 800af36:	d4dd      	bmi.n	800aef4 <_fflush_r+0xc>
 800af38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af3a:	f7ff fa3a 	bl	800a3b2 <__retarget_lock_release_recursive>
 800af3e:	e7d9      	b.n	800aef4 <_fflush_r+0xc>
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <_fflush_r+0x70>)
 800af42:	429c      	cmp	r4, r3
 800af44:	d101      	bne.n	800af4a <_fflush_r+0x62>
 800af46:	68ac      	ldr	r4, [r5, #8]
 800af48:	e7df      	b.n	800af0a <_fflush_r+0x22>
 800af4a:	4b04      	ldr	r3, [pc, #16]	; (800af5c <_fflush_r+0x74>)
 800af4c:	429c      	cmp	r4, r3
 800af4e:	bf08      	it	eq
 800af50:	68ec      	ldreq	r4, [r5, #12]
 800af52:	e7da      	b.n	800af0a <_fflush_r+0x22>
 800af54:	0800d2d0 	.word	0x0800d2d0
 800af58:	0800d2f0 	.word	0x0800d2f0
 800af5c:	0800d2b0 	.word	0x0800d2b0

0800af60 <_lseek_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_lseek_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f5 fd0e 	bl	8000990 <_lseek>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_lseek_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_lseek_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	2000aac8 	.word	0x2000aac8

0800af84 <__swhatbuf_r>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	460e      	mov	r6, r1
 800af88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8c:	2900      	cmp	r1, #0
 800af8e:	b096      	sub	sp, #88	; 0x58
 800af90:	4614      	mov	r4, r2
 800af92:	461d      	mov	r5, r3
 800af94:	da08      	bge.n	800afa8 <__swhatbuf_r+0x24>
 800af96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	602a      	str	r2, [r5, #0]
 800af9e:	061a      	lsls	r2, r3, #24
 800afa0:	d410      	bmi.n	800afc4 <__swhatbuf_r+0x40>
 800afa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa6:	e00e      	b.n	800afc6 <__swhatbuf_r+0x42>
 800afa8:	466a      	mov	r2, sp
 800afaa:	f000 f8b3 	bl	800b114 <_fstat_r>
 800afae:	2800      	cmp	r0, #0
 800afb0:	dbf1      	blt.n	800af96 <__swhatbuf_r+0x12>
 800afb2:	9a01      	ldr	r2, [sp, #4]
 800afb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afbc:	425a      	negs	r2, r3
 800afbe:	415a      	adcs	r2, r3
 800afc0:	602a      	str	r2, [r5, #0]
 800afc2:	e7ee      	b.n	800afa2 <__swhatbuf_r+0x1e>
 800afc4:	2340      	movs	r3, #64	; 0x40
 800afc6:	2000      	movs	r0, #0
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	b016      	add	sp, #88	; 0x58
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afd0 <__smakebuf_r>:
 800afd0:	898b      	ldrh	r3, [r1, #12]
 800afd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afd4:	079d      	lsls	r5, r3, #30
 800afd6:	4606      	mov	r6, r0
 800afd8:	460c      	mov	r4, r1
 800afda:	d507      	bpl.n	800afec <__smakebuf_r+0x1c>
 800afdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	2301      	movs	r3, #1
 800afe6:	6163      	str	r3, [r4, #20]
 800afe8:	b002      	add	sp, #8
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	ab01      	add	r3, sp, #4
 800afee:	466a      	mov	r2, sp
 800aff0:	f7ff ffc8 	bl	800af84 <__swhatbuf_r>
 800aff4:	9900      	ldr	r1, [sp, #0]
 800aff6:	4605      	mov	r5, r0
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff fa4f 	bl	800a49c <_malloc_r>
 800affe:	b948      	cbnz	r0, 800b014 <__smakebuf_r+0x44>
 800b000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b004:	059a      	lsls	r2, r3, #22
 800b006:	d4ef      	bmi.n	800afe8 <__smakebuf_r+0x18>
 800b008:	f023 0303 	bic.w	r3, r3, #3
 800b00c:	f043 0302 	orr.w	r3, r3, #2
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	e7e3      	b.n	800afdc <__smakebuf_r+0xc>
 800b014:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <__smakebuf_r+0x7c>)
 800b016:	62b3      	str	r3, [r6, #40]	; 0x28
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	6020      	str	r0, [r4, #0]
 800b01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	9b00      	ldr	r3, [sp, #0]
 800b024:	6163      	str	r3, [r4, #20]
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	6120      	str	r0, [r4, #16]
 800b02a:	b15b      	cbz	r3, 800b044 <__smakebuf_r+0x74>
 800b02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b030:	4630      	mov	r0, r6
 800b032:	f000 f881 	bl	800b138 <_isatty_r>
 800b036:	b128      	cbz	r0, 800b044 <__smakebuf_r+0x74>
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	81a3      	strh	r3, [r4, #12]
 800b044:	89a0      	ldrh	r0, [r4, #12]
 800b046:	4305      	orrs	r5, r0
 800b048:	81a5      	strh	r5, [r4, #12]
 800b04a:	e7cd      	b.n	800afe8 <__smakebuf_r+0x18>
 800b04c:	0800a1e9 	.word	0x0800a1e9

0800b050 <__malloc_lock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_lock+0x8>)
 800b052:	f7ff b9ad 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	2000aacc 	.word	0x2000aacc

0800b05c <__malloc_unlock>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__malloc_unlock+0x8>)
 800b05e:	f7ff b9a8 	b.w	800a3b2 <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	2000aacc 	.word	0x2000aacc

0800b068 <_read_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d07      	ldr	r5, [pc, #28]	; (800b088 <_read_r+0x20>)
 800b06c:	4604      	mov	r4, r0
 800b06e:	4608      	mov	r0, r1
 800b070:	4611      	mov	r1, r2
 800b072:	2200      	movs	r2, #0
 800b074:	602a      	str	r2, [r5, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	f7f5 fc66 	bl	8000948 <_read>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_read_r+0x1e>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b103      	cbz	r3, 800b086 <_read_r+0x1e>
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	2000aac8 	.word	0x2000aac8

0800b08c <_raise_r>:
 800b08c:	291f      	cmp	r1, #31
 800b08e:	b538      	push	{r3, r4, r5, lr}
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	d904      	bls.n	800b0a0 <_raise_r+0x14>
 800b096:	2316      	movs	r3, #22
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0a2:	b112      	cbz	r2, 800b0aa <_raise_r+0x1e>
 800b0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0a8:	b94b      	cbnz	r3, 800b0be <_raise_r+0x32>
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f830 	bl	800b110 <_getpid_r>
 800b0b0:	462a      	mov	r2, r5
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ba:	f000 b817 	b.w	800b0ec <_kill_r>
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d00a      	beq.n	800b0d8 <_raise_r+0x4c>
 800b0c2:	1c59      	adds	r1, r3, #1
 800b0c4:	d103      	bne.n	800b0ce <_raise_r+0x42>
 800b0c6:	2316      	movs	r3, #22
 800b0c8:	6003      	str	r3, [r0, #0]
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	e7e7      	b.n	800b09e <_raise_r+0x12>
 800b0ce:	2400      	movs	r4, #0
 800b0d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	4798      	blx	r3
 800b0d8:	2000      	movs	r0, #0
 800b0da:	e7e0      	b.n	800b09e <_raise_r+0x12>

0800b0dc <raise>:
 800b0dc:	4b02      	ldr	r3, [pc, #8]	; (800b0e8 <raise+0xc>)
 800b0de:	4601      	mov	r1, r0
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	f7ff bfd3 	b.w	800b08c <_raise_r>
 800b0e6:	bf00      	nop
 800b0e8:	20000028 	.word	0x20000028

0800b0ec <_kill_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d07      	ldr	r5, [pc, #28]	; (800b10c <_kill_r+0x20>)
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	f7f5 fc17 	bl	800092c <_kill>
 800b0fe:	1c43      	adds	r3, r0, #1
 800b100:	d102      	bne.n	800b108 <_kill_r+0x1c>
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	b103      	cbz	r3, 800b108 <_kill_r+0x1c>
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	bd38      	pop	{r3, r4, r5, pc}
 800b10a:	bf00      	nop
 800b10c:	2000aac8 	.word	0x2000aac8

0800b110 <_getpid_r>:
 800b110:	f7f5 bc0a 	b.w	8000928 <_getpid>

0800b114 <_fstat_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d07      	ldr	r5, [pc, #28]	; (800b134 <_fstat_r+0x20>)
 800b118:	2300      	movs	r3, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	f7f5 fc2e 	bl	8000982 <_fstat>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d102      	bne.n	800b130 <_fstat_r+0x1c>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	b103      	cbz	r3, 800b130 <_fstat_r+0x1c>
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	bf00      	nop
 800b134:	2000aac8 	.word	0x2000aac8

0800b138 <_isatty_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4d06      	ldr	r5, [pc, #24]	; (800b154 <_isatty_r+0x1c>)
 800b13c:	2300      	movs	r3, #0
 800b13e:	4604      	mov	r4, r0
 800b140:	4608      	mov	r0, r1
 800b142:	602b      	str	r3, [r5, #0]
 800b144:	f7f5 fc22 	bl	800098c <_isatty>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_isatty_r+0x1a>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_isatty_r+0x1a>
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	2000aac8 	.word	0x2000aac8

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr
