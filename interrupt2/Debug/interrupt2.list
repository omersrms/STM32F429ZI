
interrupt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042cc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004498  08004498  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a0  080044a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000860  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000086c  2000086c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdf5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f42  00000000  00000000  0002fe31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d2d  00000000  00000000  00033460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d22e  00000000  00000000  0005718d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9daf  00000000  00000000  000643bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e16a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031bc  00000000  00000000  0013e1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004460 	.word	0x08004460

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004460 	.word	0x08004460

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
}
*/


int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fc9b 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f81b 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f951 	bl	80007a4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000502:	f000 f881 	bl	8000608 <MX_ETH_Init>
  MX_DMA_Init();
 8000506:	f000 f925 	bl	8000754 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050a:	f000 f8f5 	bl	80006f8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800050e:	f000 f8c9 	bl	80006a4 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t Test=1;
 8000512:	2301      	movs	r3, #1
 8000514:	71fb      	strb	r3, [r7, #7]


	//  HAL_UART_Receive (&huart3, Test, 5,10);
	//  HAL_UART_Transmit(&huart3, Test, 5,10);

HAL_UART_Transmit(&huart3, Test, 5,1000);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	2205      	movs	r2, #5
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <main+0x40>)
 8000522:	f002 fca8 	bl	8002e76 <HAL_UART_Transmit>
HAL_Delay(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f000 fcf3 	bl	8000f14 <HAL_Delay>
HAL_UART_Transmit(&huart3, Test, 5,1000);
 800052e:	e7f2      	b.n	8000516 <main+0x26>
 8000530:	20000250 	.word	0x20000250

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 ff84 	bl	8004450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000594:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	; 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 ff77 	bl	80024ac <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f9a4 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 f9d8 	bl	800299c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f98d 	bl	8000910 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ETH_Init+0x84>)
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <MX_ETH_Init+0x88>)
 8000610:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_ETH_Init+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ETH_Init+0x8c>)
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ETH_Init+0x8c>)
 8000620:	22e1      	movs	r2, #225	; 0xe1
 8000622:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_ETH_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ETH_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_ETH_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_ETH_Init+0x84>)
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_ETH_Init+0x8c>)
 800063a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ETH_Init+0x84>)
 800063e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000642:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ETH_Init+0x84>)
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <MX_ETH_Init+0x90>)
 8000648:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_ETH_Init+0x84>)
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_ETH_Init+0x94>)
 800064e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_ETH_Init+0x84>)
 8000652:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000656:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_ETH_Init+0x84>)
 800065a:	f001 f90d 	bl	8001878 <HAL_ETH_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000664:	f000 f954 	bl	8000910 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000668:	2238      	movs	r2, #56	; 0x38
 800066a:	2100      	movs	r1, #0
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_ETH_Init+0x98>)
 800066e:	f003 feef 	bl	8004450 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_ETH_Init+0x98>)
 8000674:	2221      	movs	r2, #33	; 0x21
 8000676:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_ETH_Init+0x98>)
 800067a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800067e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_ETH_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001a0 	.word	0x200001a0
 8000690:	40028000 	.word	0x40028000
 8000694:	20000860 	.word	0x20000860
 8000698:	20000100 	.word	0x20000100
 800069c:	20000060 	.word	0x20000060
 80006a0:	20000028 	.word	0x20000028

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART3_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006dc:	f002 fb7e 	bl	8002ddc <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f913 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000250 	.word	0x20000250
 80006f4:	40004800 	.word	0x40004800

080006f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2204      	movs	r2, #4
 8000708:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2202      	movs	r2, #2
 800070e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2202      	movs	r2, #2
 800071a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2201      	movs	r2, #1
 8000720:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2201      	movs	r2, #1
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	f001 fd99 	bl	8002272 <HAL_PCD_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8e3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000354 	.word	0x20000354

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_DMA_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200c      	movs	r0, #12
 800077c:	f000 fcc9 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000780:	200c      	movs	r0, #12
 8000782:	f000 fce2 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200e      	movs	r0, #14
 800078c:	f000 fcc1 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000790:	200e      	movs	r0, #14
 8000792:	f000 fcda 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a4f      	ldr	r2, [pc, #316]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a48      	ldr	r2, [pc, #288]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b46      	ldr	r3, [pc, #280]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a41      	ldr	r2, [pc, #260]	; (8000900 <MX_GPIO_Init+0x15c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a33      	ldr	r2, [pc, #204]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0x15c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x15c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0x15c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4826      	ldr	r0, [pc, #152]	; (8000904 <MX_GPIO_Init+0x160>)
 800086a:	f001 fcc5 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4825      	ldr	r0, [pc, #148]	; (8000908 <MX_GPIO_Init+0x164>)
 8000874:	f001 fcc0 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481f      	ldr	r0, [pc, #124]	; (800090c <MX_GPIO_Init+0x168>)
 8000890:	f001 fb06 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <MX_GPIO_Init+0x160>)
 80008ae:	f001 faf7 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <MX_GPIO_Init+0x164>)
 80008ca:	f001 fae9 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_GPIO_Init+0x164>)
 80008e2:	f001 fadd 	bl	8001ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f000 fc11 	bl	8001112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 fc2a 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a55      	ldr	r2, [pc, #340]	; (8000ae0 <HAL_ETH_MspInit+0x174>)
 800098a:	4293      	cmp	r3, r2
 800098c:	f040 80a4 	bne.w	8000ad8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a8:	623b      	str	r3, [r7, #32]
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a54:	2332      	movs	r3, #50	; 0x32
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <HAL_ETH_MspInit+0x17c>)
 8000a70:	f001 fa16 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a74:	2386      	movs	r3, #134	; 0x86
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a84:	230b      	movs	r3, #11
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <HAL_ETH_MspInit+0x180>)
 8000a90:	f001 fa06 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa6:	230b      	movs	r3, #11
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <HAL_ETH_MspInit+0x184>)
 8000ab2:	f001 f9f5 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ab6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <HAL_ETH_MspInit+0x188>)
 8000ad4:	f001 f9e4 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40028000 	.word	0x40028000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_UART_MspInit+0x150>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 8091 	bne.w	8000c3e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a49      	ldr	r2, [pc, #292]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b43      	ldr	r3, [pc, #268]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a42      	ldr	r2, [pc, #264]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <HAL_UART_MspInit+0x154>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4837      	ldr	r0, [pc, #220]	; (8000c50 <HAL_UART_MspInit+0x158>)
 8000b72:	f001 f995 	bl	8001ea0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000b76:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b78:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <HAL_UART_MspInit+0x160>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000bb6:	4827      	ldr	r0, [pc, #156]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000bb8:	f000 fae2 	bl	8001180 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000bc2:	f7ff fea5 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_UART_MspInit+0x15c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000bd4:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_UART_MspInit+0x168>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd8:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bde:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000be2:	2240      	movs	r2, #64	; 0x40
 8000be4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c14:	f000 fab4 	bl	8001180 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c1e:	f7ff fe77 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <HAL_UART_MspInit+0x164>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2027      	movs	r0, #39	; 0x27
 8000c34:	f000 fa6d 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c38:	2027      	movs	r0, #39	; 0x27
 8000c3a:	f000 fa86 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00
 8000c54:	20000294 	.word	0x20000294
 8000c58:	40026028 	.word	0x40026028
 8000c5c:	200002f4 	.word	0x200002f4
 8000c60:	40026058 	.word	0x40026058

08000c64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c84:	d13f      	bne.n	8000d06 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4815      	ldr	r0, [pc, #84]	; (8000d14 <HAL_PCD_MspInit+0xb0>)
 8000cc0:	f001 f8ee 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <HAL_PCD_MspInit+0xb0>)
 8000cda:	f001 f8e1 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_PCD_MspInit+0xac>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8b6 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <DMA1_Stream1_IRQHandler+0x10>)
 8000d72:	f000 fb45 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000294 	.word	0x20000294

08000d80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Stream3_IRQHandler+0x10>)
 8000d86:	f000 fb3b 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200002f4 	.word	0x200002f4

08000d94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USART3_IRQHandler+0x10>)
 8000d9a:	f002 f8ff 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000250 	.word	0x20000250

08000da8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000dac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000db0:	f001 fa3c 	bl	800222c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fafd 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fb6f 	bl	80004f0 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e20:	080044a8 	.word	0x080044a8
  ldr r2, =_sbss
 8000e24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e28:	2000086c 	.word	0x2000086c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f94f 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fd5a 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f967 	bl	8001166 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f92f 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000868 	.word	0x20000868

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000868 	.word	0x20000868

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff3e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff31 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff feb6 	bl	8000efc <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e099      	b.n	80012d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011bc:	e00f      	b.n	80011de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011be:	f7ff fe9d 	bl	8000efc <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d908      	bls.n	80011de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e078      	b.n	80012d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e8      	bne.n	80011be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_DMA_Init+0x158>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4313      	orrs	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2b04      	cmp	r3, #4
 8001236:	d107      	bne.n	8001248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4313      	orrs	r3, r2
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4313      	orrs	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2b04      	cmp	r3, #4
 8001270:	d117      	bne.n	80012a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00e      	beq.n	80012a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa7b 	bl	8001780 <DMA_CheckFifoParam>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800129e:	2301      	movs	r3, #1
 80012a0:	e016      	b.n	80012d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fa32 	bl	8001714 <DMA_CalcBaseAndBitshift>
 80012b0:	4603      	mov	r3, r0
 80012b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	223f      	movs	r2, #63	; 0x3f
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	f010803f 	.word	0xf010803f

080012dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ea:	f7ff fe07 	bl	8000efc <HAL_GetTick>
 80012ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d008      	beq.n	800130e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e052      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0216 	bic.w	r2, r2, #22
 800131c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d103      	bne.n	800133e <HAL_DMA_Abort+0x62>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0208 	bic.w	r2, r2, #8
 800134c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	e013      	b.n	8001388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001360:	f7ff fdcc 	bl	8000efc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b05      	cmp	r3, #5
 800136c:	d90c      	bls.n	8001388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2220      	movs	r2, #32
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e015      	b.n	80013b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e4      	bne.n	8001360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139a:	223f      	movs	r2, #63	; 0x3f
 800139c:	409a      	lsls	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d004      	beq.n	80013da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00c      	b.n	80013f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <HAL_DMA_IRQHandler+0x248>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a8e      	ldr	r2, [pc, #568]	; (800164c <HAL_DMA_IRQHandler+0x24c>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0a9b      	lsrs	r3, r3, #10
 8001418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2208      	movs	r2, #8
 800142c:	409a      	lsls	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01a      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0204 	bic.w	r2, r2, #4
 8001452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2208      	movs	r2, #8
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d012      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2204      	movs	r2, #4
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d012      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	2204      	movs	r2, #4
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f043 0204 	orr.w	r2, r3, #4
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2210      	movs	r2, #16
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d043      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03c      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	2210      	movs	r2, #16
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d018      	beq.n	8001542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e01f      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
 8001540:	e016      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0208 	bic.w	r2, r2, #8
 800155e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2220      	movs	r2, #32
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 808f 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8087 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2220      	movs	r2, #32
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d136      	bne.n	8001618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0216 	bic.w	r2, r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <HAL_DMA_IRQHandler+0x1da>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0208 	bic.w	r2, r2, #8
 80015e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	223f      	movs	r2, #63	; 0x3f
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800160a:	2b00      	cmp	r3, #0
 800160c:	d07e      	beq.n	800170c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
        }
        return;
 8001616:	e079      	b.n	800170c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01d      	beq.n	8001662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	2b00      	cmp	r3, #0
 800163a:	d031      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e02c      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e01e      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0210 	bic.w	r2, r2, #16
 800167e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d032      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2205      	movs	r2, #5
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d307      	bcc.n	80016e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f2      	bne.n	80016cc <HAL_DMA_IRQHandler+0x2cc>
 80016e6:	e000      	b.n	80016ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x30e>
        return;
 800170c:	bf00      	nop
    }
  }
}
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3b10      	subs	r3, #16
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <DMA_CalcBaseAndBitshift+0x64>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <DMA_CalcBaseAndBitshift+0x68>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d909      	bls.n	8001756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	1d1a      	adds	r2, r3, #4
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	659a      	str	r2, [r3, #88]	; 0x58
 8001754:	e007      	b.n	8001766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	aaaaaaab 	.word	0xaaaaaaab
 800177c:	08004490 	.word	0x08004490

08001780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11f      	bne.n	80017da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d856      	bhi.n	800184e <DMA_CheckFifoParam+0xce>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <DMA_CheckFifoParam+0x28>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017cb 	.word	0x080017cb
 80017b0:	080017b9 	.word	0x080017b9
 80017b4:	0800184f 	.word	0x0800184f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d046      	beq.n	8001852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e043      	b.n	8001852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017d2:	d140      	bne.n	8001856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d8:	e03d      	b.n	8001856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e2:	d121      	bne.n	8001828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d837      	bhi.n	800185a <DMA_CheckFifoParam+0xda>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <DMA_CheckFifoParam+0x70>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001801 	.word	0x08001801
 80017f4:	08001807 	.word	0x08001807
 80017f8:	08001801 	.word	0x08001801
 80017fc:	08001819 	.word	0x08001819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      break;
 8001804:	e030      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d025      	beq.n	800185e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001816:	e022      	b.n	800185e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001820:	d11f      	bne.n	8001862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001826:	e01c      	b.n	8001862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d903      	bls.n	8001836 <DMA_CheckFifoParam+0xb6>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d003      	beq.n	800183c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001834:	e018      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
      break;
 800183a:	e015      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
      break;
 800184c:	e00b      	b.n	8001866 <DMA_CheckFifoParam+0xe6>
      break;
 800184e:	bf00      	nop
 8001850:	e00a      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e008      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
 8001858:	e006      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
 800185c:	e004      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
 8001860:	e002      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;   
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
    }
  } 
  
  return status; 
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06c      	b.n	8001964 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2223      	movs	r2, #35	; 0x23
 8001898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff f865 	bl	800096c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_ETH_Init+0xf4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_ETH_Init+0xf4>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_ETH_Init+0xf4>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018be:	4b2c      	ldr	r3, [pc, #176]	; (8001970 <HAL_ETH_Init+0xf8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a2b      	ldr	r2, [pc, #172]	; (8001970 <HAL_ETH_Init+0xf8>)
 80018c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_ETH_Init+0xf8>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4927      	ldr	r1, [pc, #156]	; (8001970 <HAL_ETH_Init+0xf8>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_ETH_Init+0xf8>)
 80018da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f4:	f7ff fb02 	bl	8000efc <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018fa:	e011      	b.n	8001920 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018fc:	f7ff fafe 	bl	8000efc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800190a:	d909      	bls.n	8001920 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2204      	movs	r2, #4
 8001910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	22e0      	movs	r2, #224	; 0xe0
 8001918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e021      	b.n	8001964 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e4      	bne.n	80018fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f944 	bl	8001bc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f9eb 	bl	8001d14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa41 	bl	8001dc6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9a9 	bl	8001ca4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2210      	movs	r2, #16
 800195e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800

08001974 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <ETH_SetMACConfig+0x134>)
 800198a:	4013      	ands	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	7c1b      	ldrb	r3, [r3, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <ETH_SetMACConfig+0x28>
 8001996:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800199a:	e000      	b.n	800199e <ETH_SetMACConfig+0x2a>
 800199c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	7c5b      	ldrb	r3, [r3, #17]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <ETH_SetMACConfig+0x38>
 80019a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019aa:	e000      	b.n	80019ae <ETH_SetMACConfig+0x3a>
 80019ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	7fdb      	ldrb	r3, [r3, #31]
 80019ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	7f92      	ldrb	r2, [r2, #30]
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d102      	bne.n	80019d2 <ETH_SetMACConfig+0x5e>
 80019cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d0:	e000      	b.n	80019d4 <ETH_SetMACConfig+0x60>
 80019d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80019d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	7f1b      	ldrb	r3, [r3, #28]
 80019da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d102      	bne.n	80019fc <ETH_SetMACConfig+0x88>
 80019f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fa:	e000      	b.n	80019fe <ETH_SetMACConfig+0x8a>
 80019fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	7bdb      	ldrb	r3, [r3, #15]
 8001a04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a16:	4313      	orrs	r3, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fa70 	bl	8000f14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a5a:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001a60:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001a68:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001a70:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fa3f 	bl	8000f14 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	ff20810f 	.word	0xff20810f

08001aac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <ETH_SetDMAConfig+0x110>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	7b1b      	ldrb	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <ETH_SetDMAConfig+0x2c>
 8001ad2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ad6:	e000      	b.n	8001ada <ETH_SetDMAConfig+0x2e>
 8001ad8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7b5b      	ldrb	r3, [r3, #13]
 8001ade:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ae0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	7f52      	ldrb	r2, [r2, #29]
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	d102      	bne.n	8001af0 <ETH_SetDMAConfig+0x44>
 8001aea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aee:	e000      	b.n	8001af2 <ETH_SetDMAConfig+0x46>
 8001af0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001af2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7b9b      	ldrb	r3, [r3, #14]
 8001af8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001afa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	7f1b      	ldrb	r3, [r3, #28]
 8001b06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	7f9b      	ldrb	r3, [r3, #30]
 8001b0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b20:	4313      	orrs	r3, r2
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff f9e6 	bl	8000f14 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	461a      	mov	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	791b      	ldrb	r3, [r3, #4]
 8001b5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff f9b7 	bl	8000f14 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f8de3f23 	.word	0xf8de3f23

08001bc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a6      	sub	sp, #152	; 0x98
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe9a 	bl	8001974 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c74:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff08 	bl	8001aac <ETH_SetDMAConfig>
}
 8001c9c:	bf00      	nop
 8001c9e:	3798      	adds	r7, #152	; 0x98
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3305      	adds	r3, #5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	3204      	adds	r2, #4
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <ETH_MACAddressConfig+0x68>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	061a      	lsls	r2, r3, #24
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <ETH_MACAddressConfig+0x6c>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40028040 	.word	0x40028040
 8001d10:	40028044 	.word	0x40028044

08001d14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	e03e      	b.n	8001da0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68d9      	ldr	r1, [r3, #12]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	3206      	adds	r2, #6
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d80c      	bhi.n	8001d84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e004      	b.n	8001d8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d9bd      	bls.n	8001d22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db8:	611a      	str	r2, [r3, #16]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e046      	b.n	8001e62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6919      	ldr	r1, [r3, #16]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001e18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	3212      	adds	r2, #18
 8001e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d80c      	bhi.n	8001e52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	e004      	b.n	8001e5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d9b5      	bls.n	8001dd4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	60da      	str	r2, [r3, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e177      	b.n	80021ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8166 	bne.w	80021a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80c0 	beq.w	80021a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a61      	ldr	r2, [pc, #388]	; (80021c8 <HAL_GPIO_Init+0x328>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_GPIO_Init+0x32c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d037      	beq.n	80020de <HAL_GPIO_Init+0x23e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <HAL_GPIO_Init+0x330>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d031      	beq.n	80020da <HAL_GPIO_Init+0x23a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x236>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a55      	ldr	r2, [pc, #340]	; (80021d8 <HAL_GPIO_Init+0x338>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x232>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a54      	ldr	r2, [pc, #336]	; (80021dc <HAL_GPIO_Init+0x33c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x22e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a53      	ldr	r2, [pc, #332]	; (80021e0 <HAL_GPIO_Init+0x340>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x22a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_GPIO_Init+0x344>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_GPIO_Init+0x348>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a50      	ldr	r2, [pc, #320]	; (80021ec <HAL_GPIO_Init+0x34c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_GPIO_Init+0x350>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x21a>
 80020b6:	2309      	movs	r3, #9
 80020b8:	e012      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020ba:	230a      	movs	r3, #10
 80020bc:	e010      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020be:	2308      	movs	r3, #8
 80020c0:	e00e      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x240>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x328>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_GPIO_Init+0x354>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <HAL_GPIO_Init+0x354>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_GPIO_Init+0x354>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <HAL_GPIO_Init+0x354>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_GPIO_Init+0x354>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <HAL_GPIO_Init+0x354>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_GPIO_Init+0x354>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_GPIO_Init+0x354>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f ae84 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40021c00 	.word	0x40021c00
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40022400 	.word	0x40022400
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f806 	bl	800225c <HAL_GPIO_EXTI_Callback>
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002274:	b08f      	sub	sp, #60	; 0x3c
 8002276:	af0a      	add	r7, sp, #40	; 0x28
 8002278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e10f      	b.n	80024a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fce0 	bl	8000c64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fdff 	bl	8003ec6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	687e      	ldr	r6, [r7, #4]
 80022d0:	466d      	mov	r5, sp
 80022d2:	f106 0410 	add.w	r4, r6, #16
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e6:	1d33      	adds	r3, r6, #4
 80022e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f001 fd8a 	bl	8003e04 <USB_CoreInit>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0d0      	b.n	80024a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f001 fded 	bl	8003ee8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	e04a      	b.n	80023aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	333d      	adds	r3, #61	; 0x3d
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333c      	adds	r3, #60	; 0x3c
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	b298      	uxth	r0, r3
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3344      	adds	r3, #68	; 0x44
 8002350:	4602      	mov	r2, r0
 8002352:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3340      	adds	r3, #64	; 0x40
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3348      	adds	r3, #72	; 0x48
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334c      	adds	r3, #76	; 0x4c
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3354      	adds	r3, #84	; 0x54
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3af      	bcc.n	8002314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e044      	b.n	8002444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	3301      	adds	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d3b5      	bcc.n	80023ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	687e      	ldr	r6, [r7, #4]
 8002456:	466d      	mov	r5, sp
 8002458:	f106 0410 	add.w	r4, r6, #16
 800245c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002468:	e885 0003 	stmia.w	r5, {r0, r1}
 800246c:	1d33      	adds	r3, r6, #4
 800246e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	f001 fd85 	bl	8003f80 <USB_DevInit>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e00d      	b.n	80024a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f001 ff50 	bl	8004342 <USB_DevDisconnect>

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e267      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d075      	beq.n	80025b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d00c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e242      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x74>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b70      	ldr	r3, [pc, #448]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6f      	ldr	r2, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002544:	4b69      	ldr	r3, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a68      	ldr	r2, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fcca 	bl	8000efc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fcc6 	bl	8000efc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e207      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xc0>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fcb6 	bl	8000efc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fcb2 	bl	8000efc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1f3      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a6:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d063      	beq.n	800268a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1c7      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4937      	ldr	r1, [pc, #220]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	e03a      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x244>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fc6b 	bl	8000efc <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe fc67 	bl	8000efc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1a8      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4925      	ldr	r1, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x244>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fc4a 	bl	8000efc <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fc46 	bl	8000efc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e187      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d036      	beq.n	8002704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fc2a 	bl	8000efc <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fc26 	bl	8000efc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e167      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x240>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x200>
 80026ca:	e01b      	b.n	8002704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x248>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fc13 	bl	8000efc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00e      	b.n	80026f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fc0f 	bl	8000efc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d907      	bls.n	80026f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e150      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470000 	.word	0x42470000
 80026f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ea      	bne.n	80026da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8097 	beq.w	8002840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b7d      	ldr	r3, [pc, #500]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a7c      	ldr	r2, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b7a      	ldr	r3, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b77      	ldr	r3, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x474>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b74      	ldr	r3, [pc, #464]	; (8002920 <HAL_RCC_OscConfig+0x474>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a73      	ldr	r2, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x474>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fbcf 	bl	8000efc <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fbcb 	bl	8000efc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e10c      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x474>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x2ea>
 8002788:	4b64      	ldr	r3, [pc, #400]	; (800291c <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a63      	ldr	r2, [pc, #396]	; (800291c <HAL_RCC_OscConfig+0x470>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x30c>
 800279e:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a5e      	ldr	r2, [pc, #376]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b5c      	ldr	r3, [pc, #368]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a5b      	ldr	r2, [pc, #364]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0x324>
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a57      	ldr	r2, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 0304 	bic.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fb90 	bl	8000efc <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fb8c 	bl	8000efc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0cb      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <HAL_RCC_OscConfig+0x334>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fb7a 	bl	8000efc <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fb76 	bl	8000efc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0b5      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ee      	bne.n	800280c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a38      	ldr	r2, [pc, #224]	; (800291c <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a1 	beq.w	800298c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284a:	4b34      	ldr	r3, [pc, #208]	; (800291c <HAL_RCC_OscConfig+0x470>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d05c      	beq.n	8002910 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d141      	bne.n	80028e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fb4a 	bl	8000efc <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fb46 	bl	8000efc <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e087      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	491b      	ldr	r1, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fb1f 	bl	8000efc <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fb1b 	bl	8000efc <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e05c      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_RCC_OscConfig+0x470>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x416>
 80028e0:	e054      	b.n	800298c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_RCC_OscConfig+0x478>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fb08 	bl	8000efc <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fb04 	bl	8000efc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e045      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_OscConfig+0x470>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x444>
 800290e:	e03d      	b.n	800298c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e038      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
 800291c:	40023800 	.word	0x40023800
 8002920:	40007000 	.word	0x40007000
 8002924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x4ec>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d028      	beq.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d121      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11a      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	4293      	cmp	r3, r2
 8002962:	d111      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0cc      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d90c      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b8      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a58      	ldr	r2, [pc, #352]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	494d      	ldr	r1, [pc, #308]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d044      	beq.n	8002abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d119      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e07f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e067      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4934      	ldr	r1, [pc, #208]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fa36 	bl	8000efc <HAL_GetTick>
 8002a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a94:	f7fe fa32 	bl	8000efc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e04f      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 020c 	and.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d1eb      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d20c      	bcs.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e032      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4916      	ldr	r1, [pc, #88]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b22:	f000 f821 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002b26:	4602      	mov	r2, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	5ccb      	ldrb	r3, [r1, r3]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f996 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023c00 	.word	0x40023c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	08004478 	.word	0x08004478
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b6c:	b094      	sub	sp, #80	; 0x50
 8002b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
 8002b74:	2300      	movs	r3, #0
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b78:	2300      	movs	r3, #0
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b80:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	f200 80e1 	bhi.w	8002d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x34>
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b9a:	e0db      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ba0:	e0db      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba6:	e0d8      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb2:	4b6d      	ldr	r3, [pc, #436]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b6a      	ldr	r3, [pc, #424]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	0159      	lsls	r1, r3, #5
 8002be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bec:	0150      	lsls	r0, r2, #5
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	1a51      	subs	r1, r2, r1
 8002bf6:	6139      	str	r1, [r7, #16]
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	018b      	lsls	r3, r1, #6
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c16:	4651      	mov	r1, sl
 8002c18:	018a      	lsls	r2, r1, #6
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c20:	4659      	mov	r1, fp
 8002c22:	eb63 0901 	sbc.w	r9, r3, r1
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3a:	4690      	mov	r8, r2
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	4623      	mov	r3, r4
 8002c40:	eb18 0303 	adds.w	r3, r8, r3
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	462b      	mov	r3, r5
 8002c48:	eb49 0303 	adc.w	r3, r9, r3
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	024b      	lsls	r3, r1, #9
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c64:	4621      	mov	r1, r4
 8002c66:	024a      	lsls	r2, r1, #9
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c78:	f7fd fab8 	bl	80001ec <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c84:	e058      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	4611      	mov	r1, r2
 8002c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0159      	lsls	r1, r3, #5
 8002cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb2:	0150      	lsls	r0, r2, #5
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4641      	mov	r1, r8
 8002cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	00eb      	lsls	r3, r5, #3
 8002cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cee:	00e2      	lsls	r2, r4, #3
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	461d      	mov	r5, r3
 8002cf4:	4643      	mov	r3, r8
 8002cf6:	18e3      	adds	r3, r4, r3
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	eb45 0303 	adc.w	r3, r5, r3
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	028b      	lsls	r3, r1, #10
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d18:	4621      	mov	r1, r4
 8002d1a:	028a      	lsls	r2, r1, #10
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	2200      	movs	r2, #0
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	61fa      	str	r2, [r7, #28]
 8002d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2c:	f7fd fa5e 	bl	80001ec <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3750      	adds	r7, #80	; 0x50
 8002d60:	46bd      	mov	sp, r7
 8002d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	00f42400 	.word	0x00f42400
 8002d70:	007a1200 	.word	0x007a1200

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d90:	f7ff fff0 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0a9b      	lsrs	r3, r3, #10
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	08004488 	.word	0x08004488

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db8:	f7ff ffdc 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0b5b      	lsrs	r3, r3, #13
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	08004488 	.word	0x08004488

08002ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e03f      	b.n	8002e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fe78 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fd7b 	bl	800391c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d17c      	bne.n	8002f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit+0x2c>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e075      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Transmit+0x3e>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e06e      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	; 0x21
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fe f817 	bl	8000efc <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x82>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f08:	e02a      	b.n	8002f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 faf9 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e036      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	e007      	b.n	8002f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cf      	bne.n	8002f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fac9 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0ba      	sub	sp, #232	; 0xe8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fbd3 	bl	80037a6 <UART_Receive_IT>
      return;
 8003000:	e256      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80de 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
 800300c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80d1 	beq.w	80031c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
 800307a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0204 	orr.w	r2, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d011      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 81ed 	beq.w	80034a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fb5e 	bl	80037a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_UART_IRQHandler+0x17a>
 800310e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d04f      	beq.n	80031b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa66 	bl	80035e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d141      	bne.n	80031ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800315a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1d9      	bne.n	800312a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <HAL_UART_IRQHandler+0x3dc>)
 8003184:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe f916 	bl	80013bc <HAL_DMA_Abort_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a4:	e00e      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f99a 	bl	80034e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	e00a      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f996 	bl	80034e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e006      	b.n	80031c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f992 	bl	80034e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031c2:	e170      	b.n	80034a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	bf00      	nop
    return;
 80031c6:	e16e      	b.n	80034a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f040 814a 	bne.w	8003466 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8143 	beq.w	8003466 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 813c 	beq.w	8003466 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	f040 80b4 	bne.w	800337c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8140 	beq.w	80034aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	429a      	cmp	r2, r3
 8003234:	f080 8139 	bcs.w	80034aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800323e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	f000 8088 	beq.w	800335e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800327a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003286:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1d9      	bne.n	800324e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e1      	bne.n	800329a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3314      	adds	r3, #20
 80032dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3314      	adds	r3, #20
 80032f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003300:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e3      	bne.n	80032d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800332c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332e:	f023 0310 	bic.w	r3, r3, #16
 8003332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003340:	65ba      	str	r2, [r7, #88]	; 0x58
 8003342:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800334e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e3      	bne.n	800331c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd ffbf 	bl	80012dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003366:	b29b      	uxth	r3, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29b      	uxth	r3, r3
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8c0 	bl	80034f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003374:	e099      	b.n	80034aa <HAL_UART_IRQHandler+0x50e>
 8003376:	bf00      	nop
 8003378:	080036af 	.word	0x080036af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003384:	b29b      	uxth	r3, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 808b 	beq.w	80034ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8086 	beq.w	80034ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033c6:	647a      	str	r2, [r7, #68]	; 0x44
 80033c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e3      	bne.n	80033a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e3      	bne.n	80033da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003444:	61fa      	str	r2, [r7, #28]
 8003446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	617b      	str	r3, [r7, #20]
   return(result);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e3      	bne.n	8003420 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f848 	bl	80034f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003464:	e023      	b.n	80034ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x4ea>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f929 	bl	80036d6 <UART_Transmit_IT>
    return;
 8003484:	e014      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <HAL_UART_IRQHandler+0x514>
 8003492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f969 	bl	8003776 <UART_EndTransmit_IT>
    return;
 80034a4:	e004      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
    return;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
      return;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_UART_IRQHandler+0x514>
      return;
 80034ae:	bf00      	nop
  }
}
 80034b0:	37e8      	adds	r7, #232	; 0xe8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop

080034b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e050      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d04c      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	f7fd fce6 	bl	8000efc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003538:	429a      	cmp	r2, r3
 800353a:	d241      	bcs.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355c:	637a      	str	r2, [r7, #52]	; 0x34
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	613b      	str	r3, [r7, #16]
   return(result);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003590:	623a      	str	r2, [r7, #32]
 8003592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69f9      	ldr	r1, [r7, #28]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	61bb      	str	r3, [r7, #24]
   return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e5      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d09f      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b095      	sub	sp, #84	; 0x54
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003610:	643a      	str	r2, [r7, #64]	; 0x40
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003616:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	61fb      	str	r3, [r7, #28]
   return(result);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3314      	adds	r3, #20
 8003642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	d119      	bne.n	8003694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f023 0310 	bic.w	r3, r3, #16
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003680:	61ba      	str	r2, [r7, #24]
 8003682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	613b      	str	r3, [r7, #16]
   return(result);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e5      	bne.n	8003660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036a2:	bf00      	nop
 80036a4:	3754      	adds	r7, #84	; 0x54
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff ff09 	bl	80034e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b21      	cmp	r3, #33	; 0x21
 80036e8:	d13e      	bne.n	8003768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d114      	bne.n	800371e <UART_Transmit_IT+0x48>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d110      	bne.n	800371e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]
 800371c:	e008      	b.n	8003730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1c59      	adds	r1, r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6211      	str	r1, [r2, #32]
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4619      	mov	r1, r3
 800373e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10f      	bne.n	8003764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff fe8e 	bl	80034b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b08c      	sub	sp, #48	; 0x30
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b22      	cmp	r3, #34	; 0x22
 80037b8:	f040 80ab 	bne.w	8003912 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c4:	d117      	bne.n	80037f6 <UART_Receive_IT+0x50>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d113      	bne.n	80037f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
 80037f4:	e026      	b.n	8003844 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d007      	beq.n	800381a <UART_Receive_IT+0x74>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10a      	bne.n	8003828 <UART_Receive_IT+0x82>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e008      	b.n	800383a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003834:	b2da      	uxtb	r2, r3
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4619      	mov	r1, r3
 8003852:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003854:	2b00      	cmp	r3, #0
 8003856:	d15a      	bne.n	800390e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0220 	bic.w	r2, r2, #32
 8003866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	d135      	bne.n	8003904 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	613b      	str	r3, [r7, #16]
   return(result);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f023 0310 	bic.w	r3, r3, #16
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	623a      	str	r2, [r7, #32]
 80038c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d10a      	bne.n	80038f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fdf9 	bl	80034f4 <HAL_UARTEx_RxEventCallback>
 8003902:	e002      	b.n	800390a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fde1 	bl	80034cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e002      	b.n	8003914 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3730      	adds	r7, #48	; 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b0c0      	sub	sp, #256	; 0x100
 8003922:	af00      	add	r7, sp, #0
 8003924:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	68d9      	ldr	r1, [r3, #12]
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	ea40 0301 	orr.w	r3, r0, r1
 8003944:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	431a      	orrs	r2, r3
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	431a      	orrs	r2, r3
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003974:	f021 010c 	bic.w	r1, r1, #12
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003982:	430b      	orrs	r3, r1
 8003984:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	6999      	ldr	r1, [r3, #24]
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	ea40 0301 	orr.w	r3, r0, r1
 80039a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <UART_SetConfig+0x2cc>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d005      	beq.n	80039bc <UART_SetConfig+0xa0>
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b8d      	ldr	r3, [pc, #564]	; (8003bec <UART_SetConfig+0x2d0>)
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d104      	bne.n	80039c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7ff f9fa 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 80039c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039c4:	e003      	b.n	80039ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c6:	f7ff f9e1 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80039ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d8:	f040 810c 	bne.w	8003bf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	1891      	adds	r1, r2, r2
 80039f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80039f6:	415b      	adcs	r3, r3
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039fe:	4621      	mov	r1, r4
 8003a00:	eb12 0801 	adds.w	r8, r2, r1
 8003a04:	4629      	mov	r1, r5
 8003a06:	eb43 0901 	adc.w	r9, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1e:	4690      	mov	r8, r2
 8003a20:	4699      	mov	r9, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	eb18 0303 	adds.w	r3, r8, r3
 8003a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	eb49 0303 	adc.w	r3, r9, r3
 8003a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	18db      	adds	r3, r3, r3
 8003a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a50:	4613      	mov	r3, r2
 8003a52:	eb42 0303 	adc.w	r3, r2, r3
 8003a56:	657b      	str	r3, [r7, #84]	; 0x54
 8003a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a60:	f7fc fbc4 	bl	80001ec <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	011c      	lsls	r4, r3, #4
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a94:	4641      	mov	r1, r8
 8003a96:	eb12 0a01 	adds.w	sl, r2, r1
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab4:	4692      	mov	sl, r2
 8003ab6:	469b      	mov	fp, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	eb1a 0303 	adds.w	r3, sl, r3
 8003abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ad8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003adc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	18db      	adds	r3, r3, r3
 8003ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	eb42 0303 	adc.w	r3, r2, r3
 8003aec:	647b      	str	r3, [r7, #68]	; 0x44
 8003aee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003af2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003af6:	f7fc fb79 	bl	80001ec <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003b02:	fba3 2301 	umull	r2, r3, r3, r1
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2264      	movs	r2, #100	; 0x64
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003b18:	fba3 2302 	umull	r2, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b24:	441c      	add	r4, r3
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b40:	415b      	adcs	r3, r3
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	18db      	adds	r3, r3, r3
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bb2:	f7fc fb1b 	bl	80001ec <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <UART_SetConfig+0x2d4>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 0207 	and.w	r2, r3, #7
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4422      	add	r2, r4
 8003be2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be4:	e105      	b.n	8003df2 <UART_SetConfig+0x4d6>
 8003be6:	bf00      	nop
 8003be8:	40011000 	.word	0x40011000
 8003bec:	40011400 	.word	0x40011400
 8003bf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c06:	4642      	mov	r2, r8
 8003c08:	464b      	mov	r3, r9
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	6239      	str	r1, [r7, #32]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c16:	4641      	mov	r1, r8
 8003c18:	1854      	adds	r4, r2, r1
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	eb43 0501 	adc.w	r5, r3, r1
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	00eb      	lsls	r3, r5, #3
 8003c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2e:	00e2      	lsls	r2, r4, #3
 8003c30:	4614      	mov	r4, r2
 8003c32:	461d      	mov	r5, r3
 8003c34:	4643      	mov	r3, r8
 8003c36:	18e3      	adds	r3, r4, r3
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	eb45 0303 	adc.w	r3, r5, r3
 8003c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c62:	4629      	mov	r1, r5
 8003c64:	008b      	lsls	r3, r1, #2
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	008a      	lsls	r2, r1, #2
 8003c70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c74:	f7fc faba 	bl	80001ec <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4b60      	ldr	r3, [pc, #384]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	011c      	lsls	r4, r3, #4
 8003c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c98:	4642      	mov	r2, r8
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	61b9      	str	r1, [r7, #24]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca8:	4641      	mov	r1, r8
 8003caa:	1851      	adds	r1, r2, r1
 8003cac:	6139      	str	r1, [r7, #16]
 8003cae:	4649      	mov	r1, r9
 8003cb0:	414b      	adcs	r3, r1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc0:	4659      	mov	r1, fp
 8003cc2:	00cb      	lsls	r3, r1, #3
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cca:	4651      	mov	r1, sl
 8003ccc:	00ca      	lsls	r2, r1, #3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cdc:	464b      	mov	r3, r9
 8003cde:	460a      	mov	r2, r1
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d00:	4649      	mov	r1, r9
 8003d02:	008b      	lsls	r3, r1, #2
 8003d04:	4641      	mov	r1, r8
 8003d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	008a      	lsls	r2, r1, #2
 8003d0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d12:	f7fc fa6b 	bl	80001ec <__aeabi_uldivmod>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3332      	adds	r3, #50	; 0x32
 8003d2e:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3a:	441c      	add	r4, r3
 8003d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d40:	2200      	movs	r2, #0
 8003d42:	673b      	str	r3, [r7, #112]	; 0x70
 8003d44:	677a      	str	r2, [r7, #116]	; 0x74
 8003d46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	1891      	adds	r1, r2, r2
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	415b      	adcs	r3, r3
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	1851      	adds	r1, r2, r1
 8003d5e:	6039      	str	r1, [r7, #0]
 8003d60:	4649      	mov	r1, r9
 8003d62:	414b      	adcs	r3, r1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d72:	4659      	mov	r1, fp
 8003d74:	00cb      	lsls	r3, r1, #3
 8003d76:	4651      	mov	r1, sl
 8003d78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	00ca      	lsls	r2, r1, #3
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	4603      	mov	r3, r0
 8003d86:	4642      	mov	r2, r8
 8003d88:	189b      	adds	r3, r3, r2
 8003d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	460a      	mov	r2, r1
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003da0:	667a      	str	r2, [r7, #100]	; 0x64
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dae:	4649      	mov	r1, r9
 8003db0:	008b      	lsls	r3, r1, #2
 8003db2:	4641      	mov	r1, r8
 8003db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db8:	4641      	mov	r1, r8
 8003dba:	008a      	lsls	r2, r1, #2
 8003dbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc0:	f7fc fa14 	bl	80001ec <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003dca:	fba3 1302 	umull	r1, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2164      	movs	r1, #100	; 0x64
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	3332      	adds	r3, #50	; 0x32
 8003ddc:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <UART_SetConfig+0x4e4>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4422      	add	r2, r4
 8003df0:	609a      	str	r2, [r3, #8]
}
 8003df2:	bf00      	nop
 8003df4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	51eb851f 	.word	0x51eb851f

08003e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e04:	b084      	sub	sp, #16
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	f107 001c 	add.w	r0, r7, #28
 8003e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d122      	bne.n	8003e62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 faa2 	bl	80043a0 <USB_CoreReset>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e01a      	b.n	8003e98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa96 	bl	80043a0 <USB_CoreReset>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
 8003e8a:	e005      	b.n	8003e98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10b      	bne.n	8003eb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f043 0206 	orr.w	r2, r3, #6
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ec2:	b004      	add	sp, #16
 8003ec4:	4770      	bx	lr

08003ec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0201 	bic.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d115      	bne.n	8003f36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f16:	2001      	movs	r0, #1
 8003f18:	f7fc fffc 	bl	8000f14 <HAL_Delay>
      ms++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa2e 	bl	8004384 <USB_GetMode>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d01e      	beq.n	8003f6c <USB_SetCurrentMode+0x84>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b31      	cmp	r3, #49	; 0x31
 8003f32:	d9f0      	bls.n	8003f16 <USB_SetCurrentMode+0x2e>
 8003f34:	e01a      	b.n	8003f6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d115      	bne.n	8003f68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f7fc ffe3 	bl	8000f14 <HAL_Delay>
      ms++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa15 	bl	8004384 <USB_GetMode>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <USB_SetCurrentMode+0x84>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b31      	cmp	r3, #49	; 0x31
 8003f64:	d9f0      	bls.n	8003f48 <USB_SetCurrentMode+0x60>
 8003f66:	e001      	b.n	8003f6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e005      	b.n	8003f78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b32      	cmp	r3, #50	; 0x32
 8003f70:	d101      	bne.n	8003f76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f80:	b084      	sub	sp, #16
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e009      	b.n	8003fb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	3340      	adds	r3, #64	; 0x40
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b0e      	cmp	r3, #14
 8003fb8:	d9f2      	bls.n	8003fa0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11c      	bne.n	8003ffa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff8:	e00b      	b.n	8004012 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004024:	4619      	mov	r1, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402c:	461a      	mov	r2, r3
 800402e:	680b      	ldr	r3, [r1, #0]
 8004030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10c      	bne.n	8004052 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800403e:	2100      	movs	r1, #0
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f965 	bl	8004310 <USB_SetDevSpeed>
 8004046:	e008      	b.n	800405a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004048:	2101      	movs	r1, #1
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f960 	bl	8004310 <USB_SetDevSpeed>
 8004050:	e003      	b.n	800405a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004052:	2103      	movs	r1, #3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f95b 	bl	8004310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800405a:	2110      	movs	r1, #16
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8f3 	bl	8004248 <USB_FlushTxFifo>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f91f 	bl	80042b0 <USB_FlushRxFifo>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004082:	461a      	mov	r2, r3
 8004084:	2300      	movs	r3, #0
 8004086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	461a      	mov	r2, r3
 8004090:	2300      	movs	r3, #0
 8004092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	461a      	mov	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	e043      	b.n	800412e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040bc:	d118      	bne.n	80040f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e013      	b.n	8004102 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e008      	b.n	8004102 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	461a      	mov	r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	461a      	mov	r2, r3
 8004110:	2300      	movs	r3, #0
 8004112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	461a      	mov	r2, r3
 8004122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3301      	adds	r3, #1
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d3b7      	bcc.n	80040a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	e043      	b.n	80041c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800414e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004152:	d118      	bne.n	8004186 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e013      	b.n	8004198 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e008      	b.n	8004198 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	461a      	mov	r2, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	461a      	mov	r2, r3
 80041b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3301      	adds	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3b7      	bcc.n	800413c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <USB_DevInit+0x2c4>)
 8004206:	4313      	orrs	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f043 0208 	orr.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800421e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004240:	b004      	add	sp, #16
 8004242:	4770      	bx	lr
 8004244:	803c3800 	.word	0x803c3800

08004248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3301      	adds	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <USB_FlushTxFifo+0x64>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e01b      	b.n	80042a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	daf2      	bge.n	8004256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4a08      	ldr	r2, [pc, #32]	; (80042ac <USB_FlushTxFifo+0x64>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e006      	b.n	80042a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b20      	cmp	r3, #32
 800429c:	d0f0      	beq.n	8004280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	00030d40 	.word	0x00030d40

080042b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a11      	ldr	r2, [pc, #68]	; (800430c <USB_FlushRxFifo+0x5c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e018      	b.n	8004300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	daf2      	bge.n	80042bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2210      	movs	r2, #16
 80042de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <USB_FlushRxFifo+0x5c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e006      	b.n	8004300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d0f0      	beq.n	80042e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	00030d40 	.word	0x00030d40

08004310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	68f9      	ldr	r1, [r7, #12]
 800432c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800435c:	f023 0303 	bic.w	r3, r3, #3
 8004360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0301 	and.w	r3, r3, #1
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <USB_CoreReset+0x64>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e01b      	b.n	80043f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	daf2      	bge.n	80043ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <USB_CoreReset+0x64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d0f0      	beq.n	80043d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	00030d40 	.word	0x00030d40

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	; (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	; (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	; (800444c <__libc_init_array+0x44>)
 800441c:	f000 f820 	bl	8004460 <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	080044a0 	.word	0x080044a0
 8004444:	080044a0 	.word	0x080044a0
 8004448:	080044a0 	.word	0x080044a0
 800444c:	080044a4 	.word	0x080044a4

08004450 <memset>:
 8004450:	4402      	add	r2, r0
 8004452:	4603      	mov	r3, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	d100      	bne.n	800445a <memset+0xa>
 8004458:	4770      	bx	lr
 800445a:	f803 1b01 	strb.w	r1, [r3], #1
 800445e:	e7f9      	b.n	8004454 <memset+0x4>

08004460 <_init>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr

0800446c <_fini>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr
